
OLED-Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000528c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000036a8  080053a0  080053a0  000153a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a48  08008a48  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08008a48  08008a48  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008a48  08008a48  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a48  08008a48  00018a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a4c  08008a4c  00018a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008a50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000490  20000090  08008ae0  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  08008ae0  00020520  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000752c  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a0b  00000000  00000000  000275e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000820  00000000  00000000  00028ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000748  00000000  00000000  00029810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a13  00000000  00000000  00029f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cbc0  00000000  00000000  0004196b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000834be  00000000  00000000  0004e52b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d19e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027d8  00000000  00000000  000d1a3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	08005384 	.word	0x08005384

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	08005384 	.word	0x08005384

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d5a:	2afd      	cmp	r2, #253	; 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	; 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	; 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	; 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b088      	sub	sp, #32
 8000fac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fae:	f107 0310 	add.w	r3, r7, #16
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fbc:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <MX_GPIO_Init+0x8c>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	4a1c      	ldr	r2, [pc, #112]	; (8001034 <MX_GPIO_Init+0x8c>)
 8000fc2:	f043 0310 	orr.w	r3, r3, #16
 8000fc6:	6193      	str	r3, [r2, #24]
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <MX_GPIO_Init+0x8c>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	f003 0310 	and.w	r3, r3, #16
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd4:	4b17      	ldr	r3, [pc, #92]	; (8001034 <MX_GPIO_Init+0x8c>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	4a16      	ldr	r2, [pc, #88]	; (8001034 <MX_GPIO_Init+0x8c>)
 8000fda:	f043 0308 	orr.w	r3, r3, #8
 8000fde:	6193      	str	r3, [r2, #24]
 8000fe0:	4b14      	ldr	r3, [pc, #80]	; (8001034 <MX_GPIO_Init+0x8c>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	f003 0308 	and.w	r3, r3, #8
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <MX_GPIO_Init+0x8c>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	4a10      	ldr	r2, [pc, #64]	; (8001034 <MX_GPIO_Init+0x8c>)
 8000ff2:	f043 0304 	orr.w	r3, r3, #4
 8000ff6:	6193      	str	r3, [r2, #24]
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <MX_GPIO_Init+0x8c>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f003 0304 	and.w	r3, r3, #4
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	21f0      	movs	r1, #240	; 0xf0
 8001008:	480b      	ldr	r0, [pc, #44]	; (8001038 <MX_GPIO_Init+0x90>)
 800100a:	f001 fc45 	bl	8002898 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800100e:	23f0      	movs	r3, #240	; 0xf0
 8001010:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001012:	2301      	movs	r3, #1
 8001014:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001016:	2302      	movs	r3, #2
 8001018:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2302      	movs	r3, #2
 800101c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800101e:	f107 0310 	add.w	r3, r7, #16
 8001022:	4619      	mov	r1, r3
 8001024:	4804      	ldr	r0, [pc, #16]	; (8001038 <MX_GPIO_Init+0x90>)
 8001026:	f001 fab3 	bl	8002590 <HAL_GPIO_Init>

}
 800102a:	bf00      	nop
 800102c:	3720      	adds	r7, #32
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40021000 	.word	0x40021000
 8001038:	40011000 	.word	0x40011000

0800103c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <MX_I2C2_Init+0x50>)
 8001042:	4a13      	ldr	r2, [pc, #76]	; (8001090 <MX_I2C2_Init+0x54>)
 8001044:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <MX_I2C2_Init+0x50>)
 8001048:	4a12      	ldr	r2, [pc, #72]	; (8001094 <MX_I2C2_Init+0x58>)
 800104a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800104c:	4b0f      	ldr	r3, [pc, #60]	; (800108c <MX_I2C2_Init+0x50>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <MX_I2C2_Init+0x50>)
 8001054:	2200      	movs	r2, #0
 8001056:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <MX_I2C2_Init+0x50>)
 800105a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800105e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001060:	4b0a      	ldr	r3, [pc, #40]	; (800108c <MX_I2C2_Init+0x50>)
 8001062:	2200      	movs	r2, #0
 8001064:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <MX_I2C2_Init+0x50>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800106c:	4b07      	ldr	r3, [pc, #28]	; (800108c <MX_I2C2_Init+0x50>)
 800106e:	2200      	movs	r2, #0
 8001070:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <MX_I2C2_Init+0x50>)
 8001074:	2200      	movs	r2, #0
 8001076:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001078:	4804      	ldr	r0, [pc, #16]	; (800108c <MX_I2C2_Init+0x50>)
 800107a:	f001 fc25 	bl	80028c8 <HAL_I2C_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001084:	f000 f8b3 	bl	80011ee <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200000ac 	.word	0x200000ac
 8001090:	40005800 	.word	0x40005800
 8001094:	00061a80 	.word	0x00061a80

08001098 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 0310 	add.w	r3, r7, #16
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a16      	ldr	r2, [pc, #88]	; (800110c <HAL_I2C_MspInit+0x74>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d124      	bne.n	8001102 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b8:	4b15      	ldr	r3, [pc, #84]	; (8001110 <HAL_I2C_MspInit+0x78>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	4a14      	ldr	r2, [pc, #80]	; (8001110 <HAL_I2C_MspInit+0x78>)
 80010be:	f043 0308 	orr.w	r3, r3, #8
 80010c2:	6193      	str	r3, [r2, #24]
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <HAL_I2C_MspInit+0x78>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	f003 0308 	and.w	r3, r3, #8
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010d0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010d6:	2312      	movs	r3, #18
 80010d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010da:	2303      	movs	r3, #3
 80010dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010de:	f107 0310 	add.w	r3, r7, #16
 80010e2:	4619      	mov	r1, r3
 80010e4:	480b      	ldr	r0, [pc, #44]	; (8001114 <HAL_I2C_MspInit+0x7c>)
 80010e6:	f001 fa53 	bl	8002590 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <HAL_I2C_MspInit+0x78>)
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	4a08      	ldr	r2, [pc, #32]	; (8001110 <HAL_I2C_MspInit+0x78>)
 80010f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010f4:	61d3      	str	r3, [r2, #28]
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_I2C_MspInit+0x78>)
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001102:	bf00      	nop
 8001104:	3720      	adds	r7, #32
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40005800 	.word	0x40005800
 8001110:	40021000 	.word	0x40021000
 8001114:	40010c00 	.word	0x40010c00

08001118 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	   uint8_t y = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001122:	f001 f8cb 	bl	80022bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001126:	f000 f81d 	bl	8001164 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800112a:	f7ff ff3d 	bl	8000fa8 <MX_GPIO_Init>
  MX_I2C2_Init();
 800112e:	f7ff ff85 	bl	800103c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8001132:	f000 f899 	bl	8001268 <ssd1306_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 8001136:	2201      	movs	r2, #1
 8001138:	21f0      	movs	r1, #240	; 0xf0
 800113a:	4809      	ldr	r0, [pc, #36]	; (8001160 <main+0x48>)
 800113c:	f001 fbac 	bl	8002898 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8001140:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001144:	f001 f91c 	bl	8002380 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	21f0      	movs	r1, #240	; 0xf0
 800114c:	4804      	ldr	r0, [pc, #16]	; (8001160 <main+0x48>)
 800114e:	f001 fba3 	bl	8002898 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8001152:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001156:	f001 f913 	bl	8002380 <HAL_Delay>
	  ssd1306_TestAll();
 800115a:	f000 ffb3 	bl	80020c4 <ssd1306_TestAll>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 800115e:	e7ea      	b.n	8001136 <main+0x1e>
 8001160:	40011000 	.word	0x40011000

08001164 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b090      	sub	sp, #64	; 0x40
 8001168:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116a:	f107 0318 	add.w	r3, r7, #24
 800116e:	2228      	movs	r2, #40	; 0x28
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f002 fc5a 	bl	8003a2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
 8001184:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001186:	2301      	movs	r3, #1
 8001188:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800118a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800118e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001194:	2301      	movs	r3, #1
 8001196:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001198:	2302      	movs	r3, #2
 800119a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800119c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011a2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a8:	f107 0318 	add.w	r3, r7, #24
 80011ac:	4618      	mov	r0, r3
 80011ae:	f001 ffe5 	bl	800317c <HAL_RCC_OscConfig>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80011b8:	f000 f819 	bl	80011ee <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011bc:	230f      	movs	r3, #15
 80011be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c0:	2302      	movs	r3, #2
 80011c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	2102      	movs	r1, #2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f002 fa52 	bl	8003680 <HAL_RCC_ClockConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80011e2:	f000 f804 	bl	80011ee <Error_Handler>
  }
}
 80011e6:	bf00      	nop
 80011e8:	3740      	adds	r7, #64	; 0x40
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f2:	b672      	cpsid	i
}
 80011f4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <Error_Handler+0x8>

080011f8 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr

08001204 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af04      	add	r7, sp, #16
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800120e:	f04f 33ff 	mov.w	r3, #4294967295
 8001212:	9302      	str	r3, [sp, #8]
 8001214:	2301      	movs	r3, #1
 8001216:	9301      	str	r3, [sp, #4]
 8001218:	1dfb      	adds	r3, r7, #7
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	2301      	movs	r3, #1
 800121e:	2200      	movs	r2, #0
 8001220:	2178      	movs	r1, #120	; 0x78
 8001222:	4803      	ldr	r0, [pc, #12]	; (8001230 <ssd1306_WriteCommand+0x2c>)
 8001224:	f001 fc94 	bl	8002b50 <HAL_I2C_Mem_Write>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	200000ac 	.word	0x200000ac

08001234 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af04      	add	r7, sp, #16
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	b29b      	uxth	r3, r3
 8001242:	f04f 32ff 	mov.w	r2, #4294967295
 8001246:	9202      	str	r2, [sp, #8]
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	2301      	movs	r3, #1
 8001250:	2240      	movs	r2, #64	; 0x40
 8001252:	2178      	movs	r1, #120	; 0x78
 8001254:	4803      	ldr	r0, [pc, #12]	; (8001264 <ssd1306_WriteData+0x30>)
 8001256:	f001 fc7b 	bl	8002b50 <HAL_I2C_Mem_Write>
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200000ac 	.word	0x200000ac

08001268 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800126c:	f7ff ffc4 	bl	80011f8 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001270:	2064      	movs	r0, #100	; 0x64
 8001272:	f001 f885 	bl	8002380 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001276:	2000      	movs	r0, #0
 8001278:	f000 fce8 	bl	8001c4c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800127c:	2020      	movs	r0, #32
 800127e:	f7ff ffc1 	bl	8001204 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001282:	2000      	movs	r0, #0
 8001284:	f7ff ffbe 	bl	8001204 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001288:	20b0      	movs	r0, #176	; 0xb0
 800128a:	f7ff ffbb 	bl	8001204 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800128e:	20c8      	movs	r0, #200	; 0xc8
 8001290:	f7ff ffb8 	bl	8001204 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001294:	2000      	movs	r0, #0
 8001296:	f7ff ffb5 	bl	8001204 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800129a:	2010      	movs	r0, #16
 800129c:	f7ff ffb2 	bl	8001204 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80012a0:	2040      	movs	r0, #64	; 0x40
 80012a2:	f7ff ffaf 	bl	8001204 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80012a6:	20ff      	movs	r0, #255	; 0xff
 80012a8:	f000 fcbd 	bl	8001c26 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80012ac:	20a1      	movs	r0, #161	; 0xa1
 80012ae:	f7ff ffa9 	bl	8001204 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80012b2:	20a6      	movs	r0, #166	; 0xa6
 80012b4:	f7ff ffa6 	bl	8001204 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80012b8:	20a8      	movs	r0, #168	; 0xa8
 80012ba:	f7ff ffa3 	bl	8001204 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80012be:	203f      	movs	r0, #63	; 0x3f
 80012c0:	f7ff ffa0 	bl	8001204 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80012c4:	20a4      	movs	r0, #164	; 0xa4
 80012c6:	f7ff ff9d 	bl	8001204 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80012ca:	20d3      	movs	r0, #211	; 0xd3
 80012cc:	f7ff ff9a 	bl	8001204 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80012d0:	2000      	movs	r0, #0
 80012d2:	f7ff ff97 	bl	8001204 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80012d6:	20d5      	movs	r0, #213	; 0xd5
 80012d8:	f7ff ff94 	bl	8001204 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80012dc:	20f0      	movs	r0, #240	; 0xf0
 80012de:	f7ff ff91 	bl	8001204 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80012e2:	20d9      	movs	r0, #217	; 0xd9
 80012e4:	f7ff ff8e 	bl	8001204 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80012e8:	2022      	movs	r0, #34	; 0x22
 80012ea:	f7ff ff8b 	bl	8001204 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80012ee:	20da      	movs	r0, #218	; 0xda
 80012f0:	f7ff ff88 	bl	8001204 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80012f4:	2012      	movs	r0, #18
 80012f6:	f7ff ff85 	bl	8001204 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80012fa:	20db      	movs	r0, #219	; 0xdb
 80012fc:	f7ff ff82 	bl	8001204 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001300:	2020      	movs	r0, #32
 8001302:	f7ff ff7f 	bl	8001204 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001306:	208d      	movs	r0, #141	; 0x8d
 8001308:	f7ff ff7c 	bl	8001204 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800130c:	2014      	movs	r0, #20
 800130e:	f7ff ff79 	bl	8001204 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001312:	2001      	movs	r0, #1
 8001314:	f000 fc9a 	bl	8001c4c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001318:	2000      	movs	r0, #0
 800131a:	f000 f80f 	bl	800133c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800131e:	f000 f82f 	bl	8001380 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001322:	4b05      	ldr	r3, [pc, #20]	; (8001338 <ssd1306_Init+0xd0>)
 8001324:	2200      	movs	r2, #0
 8001326:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <ssd1306_Init+0xd0>)
 800132a:	2200      	movs	r2, #0
 800132c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800132e:	4b02      	ldr	r3, [pc, #8]	; (8001338 <ssd1306_Init+0xd0>)
 8001330:	2201      	movs	r2, #1
 8001332:	711a      	strb	r2, [r3, #4]
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000500 	.word	0x20000500

0800133c <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	e00d      	b.n	8001368 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d101      	bne.n	8001356 <ssd1306_Fill+0x1a>
 8001352:	2100      	movs	r1, #0
 8001354:	e000      	b.n	8001358 <ssd1306_Fill+0x1c>
 8001356:	21ff      	movs	r1, #255	; 0xff
 8001358:	4a08      	ldr	r2, [pc, #32]	; (800137c <ssd1306_Fill+0x40>)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	4413      	add	r3, r2
 800135e:	460a      	mov	r2, r1
 8001360:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	3301      	adds	r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800136e:	d3ed      	bcc.n	800134c <ssd1306_Fill+0x10>
    }
}
 8001370:	bf00      	nop
 8001372:	bf00      	nop
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr
 800137c:	20000100 	.word	0x20000100

08001380 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001386:	2300      	movs	r3, #0
 8001388:	71fb      	strb	r3, [r7, #7]
 800138a:	e016      	b.n	80013ba <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	3b50      	subs	r3, #80	; 0x50
 8001390:	b2db      	uxtb	r3, r3
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff ff36 	bl	8001204 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001398:	2000      	movs	r0, #0
 800139a:	f7ff ff33 	bl	8001204 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 800139e:	2010      	movs	r0, #16
 80013a0:	f7ff ff30 	bl	8001204 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	01db      	lsls	r3, r3, #7
 80013a8:	4a08      	ldr	r2, [pc, #32]	; (80013cc <ssd1306_UpdateScreen+0x4c>)
 80013aa:	4413      	add	r3, r2
 80013ac:	2180      	movs	r1, #128	; 0x80
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff ff40 	bl	8001234 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	3301      	adds	r3, #1
 80013b8:	71fb      	strb	r3, [r7, #7]
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	2b07      	cmp	r3, #7
 80013be:	d9e5      	bls.n	800138c <ssd1306_UpdateScreen+0xc>
    }
}
 80013c0:	bf00      	nop
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000100 	.word	0x20000100

080013d0 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
 80013da:	460b      	mov	r3, r1
 80013dc:	71bb      	strb	r3, [r7, #6]
 80013de:	4613      	mov	r3, r2
 80013e0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	db3d      	blt.n	8001466 <ssd1306_DrawPixel+0x96>
 80013ea:	79bb      	ldrb	r3, [r7, #6]
 80013ec:	2b3f      	cmp	r3, #63	; 0x3f
 80013ee:	d83a      	bhi.n	8001466 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80013f0:	797b      	ldrb	r3, [r7, #5]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d11a      	bne.n	800142c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80013f6:	79fa      	ldrb	r2, [r7, #7]
 80013f8:	79bb      	ldrb	r3, [r7, #6]
 80013fa:	08db      	lsrs	r3, r3, #3
 80013fc:	b2d8      	uxtb	r0, r3
 80013fe:	4603      	mov	r3, r0
 8001400:	01db      	lsls	r3, r3, #7
 8001402:	4413      	add	r3, r2
 8001404:	4a1a      	ldr	r2, [pc, #104]	; (8001470 <ssd1306_DrawPixel+0xa0>)
 8001406:	5cd3      	ldrb	r3, [r2, r3]
 8001408:	b25a      	sxtb	r2, r3
 800140a:	79bb      	ldrb	r3, [r7, #6]
 800140c:	f003 0307 	and.w	r3, r3, #7
 8001410:	2101      	movs	r1, #1
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	b25b      	sxtb	r3, r3
 8001418:	4313      	orrs	r3, r2
 800141a:	b259      	sxtb	r1, r3
 800141c:	79fa      	ldrb	r2, [r7, #7]
 800141e:	4603      	mov	r3, r0
 8001420:	01db      	lsls	r3, r3, #7
 8001422:	4413      	add	r3, r2
 8001424:	b2c9      	uxtb	r1, r1
 8001426:	4a12      	ldr	r2, [pc, #72]	; (8001470 <ssd1306_DrawPixel+0xa0>)
 8001428:	54d1      	strb	r1, [r2, r3]
 800142a:	e01d      	b.n	8001468 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800142c:	79fa      	ldrb	r2, [r7, #7]
 800142e:	79bb      	ldrb	r3, [r7, #6]
 8001430:	08db      	lsrs	r3, r3, #3
 8001432:	b2d8      	uxtb	r0, r3
 8001434:	4603      	mov	r3, r0
 8001436:	01db      	lsls	r3, r3, #7
 8001438:	4413      	add	r3, r2
 800143a:	4a0d      	ldr	r2, [pc, #52]	; (8001470 <ssd1306_DrawPixel+0xa0>)
 800143c:	5cd3      	ldrb	r3, [r2, r3]
 800143e:	b25a      	sxtb	r2, r3
 8001440:	79bb      	ldrb	r3, [r7, #6]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	2101      	movs	r1, #1
 8001448:	fa01 f303 	lsl.w	r3, r1, r3
 800144c:	b25b      	sxtb	r3, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	b25b      	sxtb	r3, r3
 8001452:	4013      	ands	r3, r2
 8001454:	b259      	sxtb	r1, r3
 8001456:	79fa      	ldrb	r2, [r7, #7]
 8001458:	4603      	mov	r3, r0
 800145a:	01db      	lsls	r3, r3, #7
 800145c:	4413      	add	r3, r2
 800145e:	b2c9      	uxtb	r1, r1
 8001460:	4a03      	ldr	r2, [pc, #12]	; (8001470 <ssd1306_DrawPixel+0xa0>)
 8001462:	54d1      	strb	r1, [r2, r3]
 8001464:	e000      	b.n	8001468 <ssd1306_DrawPixel+0x98>
        return;
 8001466:	bf00      	nop
    }
}
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	20000100 	.word	0x20000100

08001474 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001474:	b590      	push	{r4, r7, lr}
 8001476:	b089      	sub	sp, #36	; 0x24
 8001478:	af00      	add	r7, sp, #0
 800147a:	4604      	mov	r4, r0
 800147c:	1d38      	adds	r0, r7, #4
 800147e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001482:	461a      	mov	r2, r3
 8001484:	4623      	mov	r3, r4
 8001486:	73fb      	strb	r3, [r7, #15]
 8001488:	4613      	mov	r3, r2
 800148a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	2b1f      	cmp	r3, #31
 8001490:	d902      	bls.n	8001498 <ssd1306_WriteChar+0x24>
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	2b7e      	cmp	r3, #126	; 0x7e
 8001496:	d901      	bls.n	800149c <ssd1306_WriteChar+0x28>
        return 0;
 8001498:	2300      	movs	r3, #0
 800149a:	e06d      	b.n	8001578 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800149c:	4b38      	ldr	r3, [pc, #224]	; (8001580 <ssd1306_WriteChar+0x10c>)
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	793b      	ldrb	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	2b80      	cmp	r3, #128	; 0x80
 80014a8:	dc06      	bgt.n	80014b8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80014aa:	4b35      	ldr	r3, [pc, #212]	; (8001580 <ssd1306_WriteChar+0x10c>)
 80014ac:	885b      	ldrh	r3, [r3, #2]
 80014ae:	461a      	mov	r2, r3
 80014b0:	797b      	ldrb	r3, [r7, #5]
 80014b2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80014b4:	2b40      	cmp	r3, #64	; 0x40
 80014b6:	dd01      	ble.n	80014bc <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	e05d      	b.n	8001578 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]
 80014c0:	e04c      	b.n	800155c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	3b20      	subs	r3, #32
 80014c8:	7979      	ldrb	r1, [r7, #5]
 80014ca:	fb01 f303 	mul.w	r3, r1, r3
 80014ce:	4619      	mov	r1, r3
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	440b      	add	r3, r1
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	4413      	add	r3, r2
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80014dc:	2300      	movs	r3, #0
 80014de:	61bb      	str	r3, [r7, #24]
 80014e0:	e034      	b.n	800154c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80014e2:	697a      	ldr	r2, [r7, #20]
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d012      	beq.n	8001518 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80014f2:	4b23      	ldr	r3, [pc, #140]	; (8001580 <ssd1306_WriteChar+0x10c>)
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	4413      	add	r3, r2
 80014fe:	b2d8      	uxtb	r0, r3
 8001500:	4b1f      	ldr	r3, [pc, #124]	; (8001580 <ssd1306_WriteChar+0x10c>)
 8001502:	885b      	ldrh	r3, [r3, #2]
 8001504:	b2da      	uxtb	r2, r3
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	4413      	add	r3, r2
 800150c:	b2db      	uxtb	r3, r3
 800150e:	7bba      	ldrb	r2, [r7, #14]
 8001510:	4619      	mov	r1, r3
 8001512:	f7ff ff5d 	bl	80013d0 <ssd1306_DrawPixel>
 8001516:	e016      	b.n	8001546 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001518:	4b19      	ldr	r3, [pc, #100]	; (8001580 <ssd1306_WriteChar+0x10c>)
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	b2da      	uxtb	r2, r3
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	4413      	add	r3, r2
 8001524:	b2d8      	uxtb	r0, r3
 8001526:	4b16      	ldr	r3, [pc, #88]	; (8001580 <ssd1306_WriteChar+0x10c>)
 8001528:	885b      	ldrh	r3, [r3, #2]
 800152a:	b2da      	uxtb	r2, r3
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	b2db      	uxtb	r3, r3
 8001530:	4413      	add	r3, r2
 8001532:	b2d9      	uxtb	r1, r3
 8001534:	7bbb      	ldrb	r3, [r7, #14]
 8001536:	2b00      	cmp	r3, #0
 8001538:	bf0c      	ite	eq
 800153a:	2301      	moveq	r3, #1
 800153c:	2300      	movne	r3, #0
 800153e:	b2db      	uxtb	r3, r3
 8001540:	461a      	mov	r2, r3
 8001542:	f7ff ff45 	bl	80013d0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	3301      	adds	r3, #1
 800154a:	61bb      	str	r3, [r7, #24]
 800154c:	793b      	ldrb	r3, [r7, #4]
 800154e:	461a      	mov	r2, r3
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	4293      	cmp	r3, r2
 8001554:	d3c5      	bcc.n	80014e2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3301      	adds	r3, #1
 800155a:	61fb      	str	r3, [r7, #28]
 800155c:	797b      	ldrb	r3, [r7, #5]
 800155e:	461a      	mov	r2, r3
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	4293      	cmp	r3, r2
 8001564:	d3ad      	bcc.n	80014c2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <ssd1306_WriteChar+0x10c>)
 8001568:	881a      	ldrh	r2, [r3, #0]
 800156a:	793b      	ldrb	r3, [r7, #4]
 800156c:	b29b      	uxth	r3, r3
 800156e:	4413      	add	r3, r2
 8001570:	b29a      	uxth	r2, r3
 8001572:	4b03      	ldr	r3, [pc, #12]	; (8001580 <ssd1306_WriteChar+0x10c>)
 8001574:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001576:	7bfb      	ldrb	r3, [r7, #15]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3724      	adds	r7, #36	; 0x24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd90      	pop	{r4, r7, pc}
 8001580:	20000500 	.word	0x20000500

08001584 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	1d38      	adds	r0, r7, #4
 800158e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001592:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001594:	e012      	b.n	80015bc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	7818      	ldrb	r0, [r3, #0]
 800159a:	78fb      	ldrb	r3, [r7, #3]
 800159c:	1d3a      	adds	r2, r7, #4
 800159e:	ca06      	ldmia	r2, {r1, r2}
 80015a0:	f7ff ff68 	bl	8001474 <ssd1306_WriteChar>
 80015a4:	4603      	mov	r3, r0
 80015a6:	461a      	mov	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d002      	beq.n	80015b6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	e008      	b.n	80015c8 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	3301      	adds	r3, #1
 80015ba:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1e8      	bne.n	8001596 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	781b      	ldrb	r3, [r3, #0]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	460a      	mov	r2, r1
 80015da:	71fb      	strb	r3, [r7, #7]
 80015dc:	4613      	mov	r3, r2
 80015de:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	4b05      	ldr	r3, [pc, #20]	; (80015fc <ssd1306_SetCursor+0x2c>)
 80015e6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80015e8:	79bb      	ldrb	r3, [r7, #6]
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	4b03      	ldr	r3, [pc, #12]	; (80015fc <ssd1306_SetCursor+0x2c>)
 80015ee:	805a      	strh	r2, [r3, #2]
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	20000500 	.word	0x20000500

08001600 <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001600:	b590      	push	{r4, r7, lr}
 8001602:	b089      	sub	sp, #36	; 0x24
 8001604:	af00      	add	r7, sp, #0
 8001606:	4604      	mov	r4, r0
 8001608:	4608      	mov	r0, r1
 800160a:	4611      	mov	r1, r2
 800160c:	461a      	mov	r2, r3
 800160e:	4623      	mov	r3, r4
 8001610:	71fb      	strb	r3, [r7, #7]
 8001612:	4603      	mov	r3, r0
 8001614:	71bb      	strb	r3, [r7, #6]
 8001616:	460b      	mov	r3, r1
 8001618:	717b      	strb	r3, [r7, #5]
 800161a:	4613      	mov	r3, r2
 800161c:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 800161e:	797a      	ldrb	r2, [r7, #5]
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b00      	cmp	r3, #0
 8001626:	bfb8      	it	lt
 8001628:	425b      	neglt	r3, r3
 800162a:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 800162c:	793a      	ldrb	r2, [r7, #4]
 800162e:	79bb      	ldrb	r3, [r7, #6]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	bfb8      	it	lt
 8001636:	425b      	neglt	r3, r3
 8001638:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 800163a:	79fa      	ldrb	r2, [r7, #7]
 800163c:	797b      	ldrb	r3, [r7, #5]
 800163e:	429a      	cmp	r2, r3
 8001640:	d201      	bcs.n	8001646 <ssd1306_Line+0x46>
 8001642:	2301      	movs	r3, #1
 8001644:	e001      	b.n	800164a <ssd1306_Line+0x4a>
 8001646:	f04f 33ff 	mov.w	r3, #4294967295
 800164a:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 800164c:	79ba      	ldrb	r2, [r7, #6]
 800164e:	793b      	ldrb	r3, [r7, #4]
 8001650:	429a      	cmp	r2, r3
 8001652:	d201      	bcs.n	8001658 <ssd1306_Line+0x58>
 8001654:	2301      	movs	r3, #1
 8001656:	e001      	b.n	800165c <ssd1306_Line+0x5c>
 8001658:	f04f 33ff 	mov.w	r3, #4294967295
 800165c:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 8001666:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800166a:	7939      	ldrb	r1, [r7, #4]
 800166c:	797b      	ldrb	r3, [r7, #5]
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff feae 	bl	80013d0 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 8001674:	e024      	b.n	80016c0 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 8001676:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800167a:	79b9      	ldrb	r1, [r7, #6]
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fea6 	bl	80013d0 <ssd1306_DrawPixel>
    error2 = error * 2;
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	425b      	negs	r3, r3
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	429a      	cmp	r2, r3
 8001692:	dd08      	ble.n	80016a6 <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 8001694:	69fa      	ldr	r2, [r7, #28]
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	4413      	add	r3, r2
 80016a4:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 80016a6:	68ba      	ldr	r2, [r7, #8]
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	da08      	bge.n	80016c0 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 80016ae:	69fa      	ldr	r2, [r7, #28]
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	4413      	add	r3, r2
 80016b4:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	79bb      	ldrb	r3, [r7, #6]
 80016bc:	4413      	add	r3, r2
 80016be:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 80016c0:	79fa      	ldrb	r2, [r7, #7]
 80016c2:	797b      	ldrb	r3, [r7, #5]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d1d6      	bne.n	8001676 <ssd1306_Line+0x76>
 80016c8:	79ba      	ldrb	r2, [r7, #6]
 80016ca:	793b      	ldrb	r3, [r7, #4]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d1d2      	bne.n	8001676 <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 80016d0:	bf00      	nop
}
 80016d2:	3724      	adds	r7, #36	; 0x24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd90      	pop	{r4, r7, pc}

080016d8 <ssd1306_Polyline>:
//Draw polyline
void ssd1306_Polyline(const SSD1306_VERTEX *par_vertex, uint16_t par_size, SSD1306_COLOR color) {
 80016d8:	b590      	push	{r4, r7, lr}
 80016da:	b087      	sub	sp, #28
 80016dc:	af02      	add	r7, sp, #8
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	807b      	strh	r3, [r7, #2]
 80016e4:	4613      	mov	r3, r2
 80016e6:	707b      	strb	r3, [r7, #1]
  uint16_t i;
  if(par_vertex != 0){
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d02a      	beq.n	8001744 <ssd1306_Polyline+0x6c>
    for(i = 1; i < par_size; i++){
 80016ee:	2301      	movs	r3, #1
 80016f0:	81fb      	strh	r3, [r7, #14]
 80016f2:	e022      	b.n	800173a <ssd1306_Polyline+0x62>
      ssd1306_Line(par_vertex[i - 1].x, par_vertex[i - 1].y, par_vertex[i].x, par_vertex[i].y, color);
 80016f4:	89fb      	ldrh	r3, [r7, #14]
 80016f6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80016fa:	3b01      	subs	r3, #1
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	7818      	ldrb	r0, [r3, #0]
 8001704:	89fb      	ldrh	r3, [r7, #14]
 8001706:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800170a:	3b01      	subs	r3, #1
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	7859      	ldrb	r1, [r3, #1]
 8001714:	89fb      	ldrh	r3, [r7, #14]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	4413      	add	r3, r2
 800171c:	781c      	ldrb	r4, [r3, #0]
 800171e:	89fb      	ldrh	r3, [r7, #14]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	4413      	add	r3, r2
 8001726:	785a      	ldrb	r2, [r3, #1]
 8001728:	787b      	ldrb	r3, [r7, #1]
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	4613      	mov	r3, r2
 800172e:	4622      	mov	r2, r4
 8001730:	f7ff ff66 	bl	8001600 <ssd1306_Line>
    for(i = 1; i < par_size; i++){
 8001734:	89fb      	ldrh	r3, [r7, #14]
 8001736:	3301      	adds	r3, #1
 8001738:	81fb      	strh	r3, [r7, #14]
 800173a:	89fa      	ldrh	r2, [r7, #14]
 800173c:	887b      	ldrh	r3, [r7, #2]
 800173e:	429a      	cmp	r2, r3
 8001740:	d3d8      	bcc.n	80016f4 <ssd1306_Polyline+0x1c>
  }
  else
  {
    /*nothing to do*/
  }
  return;
 8001742:	bf00      	nop
 8001744:	bf00      	nop
}
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	bd90      	pop	{r4, r7, pc}
 800174c:	0000      	movs	r0, r0
	...

08001750 <ssd1306_DegToRad>:
/*Convert Degrees to Radians*/
static float ssd1306_DegToRad(float par_deg) {
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
    return par_deg * 3.14 / 180.0;
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7fe fe5d 	bl	8000418 <__aeabi_f2d>
 800175e:	a30c      	add	r3, pc, #48	; (adr r3, 8001790 <ssd1306_DegToRad+0x40>)
 8001760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001764:	f7fe feb0 	bl	80004c8 <__aeabi_dmul>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4610      	mov	r0, r2
 800176e:	4619      	mov	r1, r3
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	4b08      	ldr	r3, [pc, #32]	; (8001798 <ssd1306_DegToRad+0x48>)
 8001776:	f7fe ffd1 	bl	800071c <__aeabi_ddiv>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4610      	mov	r0, r2
 8001780:	4619      	mov	r1, r3
 8001782:	f7ff f963 	bl	8000a4c <__aeabi_d2f>
 8001786:	4603      	mov	r3, r0
}
 8001788:	4618      	mov	r0, r3
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	51eb851f 	.word	0x51eb851f
 8001794:	40091eb8 	.word	0x40091eb8
 8001798:	40668000 	.word	0x40668000

0800179c <ssd1306_NormalizeTo0_360>:
/*Normalize degree to [0;360]*/
static uint16_t ssd1306_NormalizeTo0_360(uint16_t par_deg) {
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	80fb      	strh	r3, [r7, #6]
  uint16_t loc_angle;
  if(par_deg <= 360)
 80017a6:	88fb      	ldrh	r3, [r7, #6]
 80017a8:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80017ac:	d802      	bhi.n	80017b4 <ssd1306_NormalizeTo0_360+0x18>
  {
    loc_angle = par_deg;
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	81fb      	strh	r3, [r7, #14]
 80017b2:	e013      	b.n	80017dc <ssd1306_NormalizeTo0_360+0x40>
  }
  else
  {
    loc_angle = par_deg % 360;
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	08da      	lsrs	r2, r3, #3
 80017b8:	490b      	ldr	r1, [pc, #44]	; (80017e8 <ssd1306_NormalizeTo0_360+0x4c>)
 80017ba:	fba1 1202 	umull	r1, r2, r1, r2
 80017be:	0892      	lsrs	r2, r2, #2
 80017c0:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80017c4:	fb01 f202 	mul.w	r2, r1, r2
 80017c8:	1a9b      	subs	r3, r3, r2
 80017ca:	81fb      	strh	r3, [r7, #14]
    loc_angle = ((par_deg != 0)?par_deg:360);
 80017cc:	88fb      	ldrh	r3, [r7, #6]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <ssd1306_NormalizeTo0_360+0x3a>
 80017d2:	88fb      	ldrh	r3, [r7, #6]
 80017d4:	e001      	b.n	80017da <ssd1306_NormalizeTo0_360+0x3e>
 80017d6:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80017da:	81fb      	strh	r3, [r7, #14]
  }
  return loc_angle;
 80017dc:	89fb      	ldrh	r3, [r7, #14]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr
 80017e8:	16c16c17 	.word	0x16c16c17

080017ec <ssd1306_DrawArc>:
/*DrawArc. Draw angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle in degree
 * sweep in degree
 */
void ssd1306_DrawArc(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 80017ec:	b5b0      	push	{r4, r5, r7, lr}
 80017ee:	b08a      	sub	sp, #40	; 0x28
 80017f0:	af02      	add	r7, sp, #8
 80017f2:	4604      	mov	r4, r0
 80017f4:	4608      	mov	r0, r1
 80017f6:	4611      	mov	r1, r2
 80017f8:	461a      	mov	r2, r3
 80017fa:	4623      	mov	r3, r4
 80017fc:	71fb      	strb	r3, [r7, #7]
 80017fe:	4603      	mov	r3, r0
 8001800:	71bb      	strb	r3, [r7, #6]
 8001802:	460b      	mov	r3, r1
 8001804:	717b      	strb	r3, [r7, #5]
 8001806:	4613      	mov	r3, r2
 8001808:	807b      	strh	r3, [r7, #2]
    #define CIRCLE_APPROXIMATION_SEGMENTS 36
    float approx_degree;
    uint32_t approx_segments;
    uint8_t xp1,xp2;
    uint8_t yp1,yp2;
    uint32_t count = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
    uint32_t loc_sweep = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
    float rad;
    
    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 8001812:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ffc1 	bl	800179c <ssd1306_NormalizeTo0_360>
 800181a:	4603      	mov	r3, r0
 800181c:	617b      	str	r3, [r7, #20]
    
    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 800181e:	887b      	ldrh	r3, [r7, #2]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ffbb 	bl	800179c <ssd1306_NormalizeTo0_360>
 8001826:	4603      	mov	r3, r0
 8001828:	4a70      	ldr	r2, [pc, #448]	; (80019ec <ssd1306_DrawArc+0x200>)
 800182a:	fb82 1203 	smull	r1, r2, r2, r3
 800182e:	1092      	asrs	r2, r2, #2
 8001830:	17db      	asrs	r3, r3, #31
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	61fb      	str	r3, [r7, #28]
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	4613      	mov	r3, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	4413      	add	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	08db      	lsrs	r3, r3, #3
 8001842:	4a6b      	ldr	r2, [pc, #428]	; (80019f0 <ssd1306_DrawArc+0x204>)
 8001844:	fba2 2303 	umull	r2, r3, r2, r3
 8001848:	089b      	lsrs	r3, r3, #2
 800184a:	613b      	str	r3, [r7, #16]
    approx_degree = loc_sweep / (float)approx_segments;
 800184c:	6978      	ldr	r0, [r7, #20]
 800184e:	f7ff fa03 	bl	8000c58 <__aeabi_ui2f>
 8001852:	4604      	mov	r4, r0
 8001854:	6938      	ldr	r0, [r7, #16]
 8001856:	f7ff f9ff 	bl	8000c58 <__aeabi_ui2f>
 800185a:	4603      	mov	r3, r0
 800185c:	4619      	mov	r1, r3
 800185e:	4620      	mov	r0, r4
 8001860:	f7ff fb06 	bl	8000e70 <__aeabi_fdiv>
 8001864:	4603      	mov	r3, r0
 8001866:	60fb      	str	r3, [r7, #12]
    while(count < approx_segments)
 8001868:	e0b7      	b.n	80019da <ssd1306_DrawArc+0x1ee>
    {
        rad = ssd1306_DegToRad(count*approx_degree);
 800186a:	69f8      	ldr	r0, [r7, #28]
 800186c:	f7ff f9f4 	bl	8000c58 <__aeabi_ui2f>
 8001870:	4603      	mov	r3, r0
 8001872:	68f9      	ldr	r1, [r7, #12]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fa47 	bl	8000d08 <__aeabi_fmul>
 800187a:	4603      	mov	r3, r0
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff67 	bl	8001750 <ssd1306_DegToRad>
 8001882:	61b8      	str	r0, [r7, #24]
        xp1 = x + (int8_t)(sin(rad)*radius);
 8001884:	69b8      	ldr	r0, [r7, #24]
 8001886:	f7fe fdc7 	bl	8000418 <__aeabi_f2d>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4610      	mov	r0, r2
 8001890:	4619      	mov	r1, r3
 8001892:	f002 fd7f 	bl	8004394 <sin>
 8001896:	4604      	mov	r4, r0
 8001898:	460d      	mov	r5, r1
 800189a:	797b      	ldrb	r3, [r7, #5]
 800189c:	4618      	mov	r0, r3
 800189e:	f7fe fda9 	bl	80003f4 <__aeabi_i2d>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4620      	mov	r0, r4
 80018a8:	4629      	mov	r1, r5
 80018aa:	f7fe fe0d 	bl	80004c8 <__aeabi_dmul>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4610      	mov	r0, r2
 80018b4:	4619      	mov	r1, r3
 80018b6:	f7ff f8a1 	bl	80009fc <__aeabi_d2iz>
 80018ba:	4603      	mov	r3, r0
 80018bc:	b25b      	sxtb	r3, r3
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	4413      	add	r3, r2
 80018c4:	72fb      	strb	r3, [r7, #11]
        yp1 = y + (int8_t)(cos(rad)*radius);    
 80018c6:	69b8      	ldr	r0, [r7, #24]
 80018c8:	f7fe fda6 	bl	8000418 <__aeabi_f2d>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4610      	mov	r0, r2
 80018d2:	4619      	mov	r1, r3
 80018d4:	f002 fd18 	bl	8004308 <cos>
 80018d8:	4604      	mov	r4, r0
 80018da:	460d      	mov	r5, r1
 80018dc:	797b      	ldrb	r3, [r7, #5]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fd88 	bl	80003f4 <__aeabi_i2d>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4620      	mov	r0, r4
 80018ea:	4629      	mov	r1, r5
 80018ec:	f7fe fdec 	bl	80004c8 <__aeabi_dmul>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4610      	mov	r0, r2
 80018f6:	4619      	mov	r1, r3
 80018f8:	f7ff f880 	bl	80009fc <__aeabi_d2iz>
 80018fc:	4603      	mov	r3, r0
 80018fe:	b25b      	sxtb	r3, r3
 8001900:	b2da      	uxtb	r2, r3
 8001902:	79bb      	ldrb	r3, [r7, #6]
 8001904:	4413      	add	r3, r2
 8001906:	72bb      	strb	r3, [r7, #10]
        count++;
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	3301      	adds	r3, #1
 800190c:	61fb      	str	r3, [r7, #28]
        if(count != approx_segments)
 800190e:	69fa      	ldr	r2, [r7, #28]
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	429a      	cmp	r2, r3
 8001914:	d00d      	beq.n	8001932 <ssd1306_DrawArc+0x146>
        {
            rad = ssd1306_DegToRad(count*approx_degree);
 8001916:	69f8      	ldr	r0, [r7, #28]
 8001918:	f7ff f99e 	bl	8000c58 <__aeabi_ui2f>
 800191c:	4603      	mov	r3, r0
 800191e:	68f9      	ldr	r1, [r7, #12]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff f9f1 	bl	8000d08 <__aeabi_fmul>
 8001926:	4603      	mov	r3, r0
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ff11 	bl	8001750 <ssd1306_DegToRad>
 800192e:	61b8      	str	r0, [r7, #24]
 8001930:	e007      	b.n	8001942 <ssd1306_DrawArc+0x156>
        }
        else
        {            
            rad = ssd1306_DegToRad(loc_sweep);
 8001932:	6978      	ldr	r0, [r7, #20]
 8001934:	f7ff f990 	bl	8000c58 <__aeabi_ui2f>
 8001938:	4603      	mov	r3, r0
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff ff08 	bl	8001750 <ssd1306_DegToRad>
 8001940:	61b8      	str	r0, [r7, #24]
        }
        xp2 = x + (int8_t)(sin(rad)*radius);
 8001942:	69b8      	ldr	r0, [r7, #24]
 8001944:	f7fe fd68 	bl	8000418 <__aeabi_f2d>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4610      	mov	r0, r2
 800194e:	4619      	mov	r1, r3
 8001950:	f002 fd20 	bl	8004394 <sin>
 8001954:	4604      	mov	r4, r0
 8001956:	460d      	mov	r5, r1
 8001958:	797b      	ldrb	r3, [r7, #5]
 800195a:	4618      	mov	r0, r3
 800195c:	f7fe fd4a 	bl	80003f4 <__aeabi_i2d>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4620      	mov	r0, r4
 8001966:	4629      	mov	r1, r5
 8001968:	f7fe fdae 	bl	80004c8 <__aeabi_dmul>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4610      	mov	r0, r2
 8001972:	4619      	mov	r1, r3
 8001974:	f7ff f842 	bl	80009fc <__aeabi_d2iz>
 8001978:	4603      	mov	r3, r0
 800197a:	b25b      	sxtb	r3, r3
 800197c:	b2da      	uxtb	r2, r3
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	4413      	add	r3, r2
 8001982:	727b      	strb	r3, [r7, #9]
        yp2 = y + (int8_t)(cos(rad)*radius);    
 8001984:	69b8      	ldr	r0, [r7, #24]
 8001986:	f7fe fd47 	bl	8000418 <__aeabi_f2d>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	4610      	mov	r0, r2
 8001990:	4619      	mov	r1, r3
 8001992:	f002 fcb9 	bl	8004308 <cos>
 8001996:	4604      	mov	r4, r0
 8001998:	460d      	mov	r5, r1
 800199a:	797b      	ldrb	r3, [r7, #5]
 800199c:	4618      	mov	r0, r3
 800199e:	f7fe fd29 	bl	80003f4 <__aeabi_i2d>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4620      	mov	r0, r4
 80019a8:	4629      	mov	r1, r5
 80019aa:	f7fe fd8d 	bl	80004c8 <__aeabi_dmul>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	4610      	mov	r0, r2
 80019b4:	4619      	mov	r1, r3
 80019b6:	f7ff f821 	bl	80009fc <__aeabi_d2iz>
 80019ba:	4603      	mov	r3, r0
 80019bc:	b25b      	sxtb	r3, r3
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	79bb      	ldrb	r3, [r7, #6]
 80019c2:	4413      	add	r3, r2
 80019c4:	723b      	strb	r3, [r7, #8]
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 80019c6:	7a3c      	ldrb	r4, [r7, #8]
 80019c8:	7a7a      	ldrb	r2, [r7, #9]
 80019ca:	7ab9      	ldrb	r1, [r7, #10]
 80019cc:	7af8      	ldrb	r0, [r7, #11]
 80019ce:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	4623      	mov	r3, r4
 80019d6:	f7ff fe13 	bl	8001600 <ssd1306_Line>
    while(count < approx_segments)
 80019da:	69fa      	ldr	r2, [r7, #28]
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	429a      	cmp	r2, r3
 80019e0:	f4ff af43 	bcc.w	800186a <ssd1306_DrawArc+0x7e>
    }
    
    return;
 80019e4:	bf00      	nop
}
 80019e6:	3720      	adds	r7, #32
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bdb0      	pop	{r4, r5, r7, pc}
 80019ec:	66666667 	.word	0x66666667
 80019f0:	16c16c17 	.word	0x16c16c17

080019f4 <ssd1306_DrawCircle>:
//Draw circle by Bresenhem's algorithm
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 80019f4:	b590      	push	{r4, r7, lr}
 80019f6:	b087      	sub	sp, #28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4604      	mov	r4, r0
 80019fc:	4608      	mov	r0, r1
 80019fe:	4611      	mov	r1, r2
 8001a00:	461a      	mov	r2, r3
 8001a02:	4623      	mov	r3, r4
 8001a04:	71fb      	strb	r3, [r7, #7]
 8001a06:	4603      	mov	r3, r0
 8001a08:	71bb      	strb	r3, [r7, #6]
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	717b      	strb	r3, [r7, #5]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	713b      	strb	r3, [r7, #4]
  int32_t x = -par_r;
 8001a12:	797b      	ldrb	r3, [r7, #5]
 8001a14:	425b      	negs	r3, r3
 8001a16:	617b      	str	r3, [r7, #20]
  int32_t y = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	613b      	str	r3, [r7, #16]
  int32_t err = 2 - 2 * par_r;
 8001a1c:	797b      	ldrb	r3, [r7, #5]
 8001a1e:	f1c3 0301 	rsb	r3, r3, #1
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	60fb      	str	r3, [r7, #12]
  int32_t e2;

  if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8001a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	db65      	blt.n	8001afa <ssd1306_DrawCircle+0x106>
 8001a2e:	79bb      	ldrb	r3, [r7, #6]
 8001a30:	2b3f      	cmp	r3, #63	; 0x3f
 8001a32:	d862      	bhi.n	8001afa <ssd1306_DrawCircle+0x106>
    return;
  }

    do {
      ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	79fa      	ldrb	r2, [r7, #7]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	b2d8      	uxtb	r0, r3
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	79bb      	ldrb	r3, [r7, #6]
 8001a44:	4413      	add	r3, r2
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	793a      	ldrb	r2, [r7, #4]
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	f7ff fcc0 	bl	80013d0 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	4413      	add	r3, r2
 8001a58:	b2d8      	uxtb	r0, r3
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	79bb      	ldrb	r3, [r7, #6]
 8001a60:	4413      	add	r3, r2
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	793a      	ldrb	r2, [r7, #4]
 8001a66:	4619      	mov	r1, r3
 8001a68:	f7ff fcb2 	bl	80013d0 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	4413      	add	r3, r2
 8001a74:	b2d8      	uxtb	r0, r3
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	79ba      	ldrb	r2, [r7, #6]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	793a      	ldrb	r2, [r7, #4]
 8001a82:	4619      	mov	r1, r3
 8001a84:	f7ff fca4 	bl	80013d0 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	79fa      	ldrb	r2, [r7, #7]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	b2d8      	uxtb	r0, r3
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	79ba      	ldrb	r2, [r7, #6]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	793a      	ldrb	r2, [r7, #4]
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	f7ff fc96 	bl	80013d0 <ssd1306_DrawPixel>
        e2 = err;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 8001aa8:	68ba      	ldr	r2, [r7, #8]
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	dc13      	bgt.n	8001ad8 <ssd1306_DrawCircle+0xe4>
            y++;
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	3301      	adds	r3, #1
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	4413      	add	r3, r2
 8001ac0:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	425b      	negs	r3, r3
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d105      	bne.n	8001ad8 <ssd1306_DrawCircle+0xe4>
 8001acc:	68ba      	ldr	r2, [r7, #8]
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	dc01      	bgt.n	8001ad8 <ssd1306_DrawCircle+0xe4>
              e2 = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          /*nothing to do*/
        }
        if(e2 > x) {
 8001ad8:	68ba      	ldr	r2, [r7, #8]
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	dd08      	ble.n	8001af2 <ssd1306_DrawCircle+0xfe>
          x++;
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	617b      	str	r3, [r7, #20]
          err = err + (x * 2 + 1);
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	3301      	adds	r3, #1
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	4413      	add	r3, r2
 8001af0:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          /*nothing to do*/
        }
    } while(x <= 0);
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	dd9d      	ble.n	8001a34 <ssd1306_DrawCircle+0x40>

    return;
 8001af8:	e000      	b.n	8001afc <ssd1306_DrawCircle+0x108>
    return;
 8001afa:	bf00      	nop
}
 8001afc:	371c      	adds	r7, #28
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd90      	pop	{r4, r7, pc}

08001b02 <ssd1306_DrawRectangle>:

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001b02:	b590      	push	{r4, r7, lr}
 8001b04:	b085      	sub	sp, #20
 8001b06:	af02      	add	r7, sp, #8
 8001b08:	4604      	mov	r4, r0
 8001b0a:	4608      	mov	r0, r1
 8001b0c:	4611      	mov	r1, r2
 8001b0e:	461a      	mov	r2, r3
 8001b10:	4623      	mov	r3, r4
 8001b12:	71fb      	strb	r3, [r7, #7]
 8001b14:	4603      	mov	r3, r0
 8001b16:	71bb      	strb	r3, [r7, #6]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	717b      	strb	r3, [r7, #5]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	713b      	strb	r3, [r7, #4]
  ssd1306_Line(x1,y1,x2,y1,color);
 8001b20:	79bc      	ldrb	r4, [r7, #6]
 8001b22:	797a      	ldrb	r2, [r7, #5]
 8001b24:	79b9      	ldrb	r1, [r7, #6]
 8001b26:	79f8      	ldrb	r0, [r7, #7]
 8001b28:	7e3b      	ldrb	r3, [r7, #24]
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	4623      	mov	r3, r4
 8001b2e:	f7ff fd67 	bl	8001600 <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 8001b32:	793c      	ldrb	r4, [r7, #4]
 8001b34:	797a      	ldrb	r2, [r7, #5]
 8001b36:	79b9      	ldrb	r1, [r7, #6]
 8001b38:	7978      	ldrb	r0, [r7, #5]
 8001b3a:	7e3b      	ldrb	r3, [r7, #24]
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	4623      	mov	r3, r4
 8001b40:	f7ff fd5e 	bl	8001600 <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 8001b44:	793c      	ldrb	r4, [r7, #4]
 8001b46:	79fa      	ldrb	r2, [r7, #7]
 8001b48:	7939      	ldrb	r1, [r7, #4]
 8001b4a:	7978      	ldrb	r0, [r7, #5]
 8001b4c:	7e3b      	ldrb	r3, [r7, #24]
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	4623      	mov	r3, r4
 8001b52:	f7ff fd55 	bl	8001600 <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 8001b56:	79bc      	ldrb	r4, [r7, #6]
 8001b58:	79fa      	ldrb	r2, [r7, #7]
 8001b5a:	7939      	ldrb	r1, [r7, #4]
 8001b5c:	79f8      	ldrb	r0, [r7, #7]
 8001b5e:	7e3b      	ldrb	r3, [r7, #24]
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	4623      	mov	r3, r4
 8001b64:	f7ff fd4c 	bl	8001600 <ssd1306_Line>

  return;
 8001b68:	bf00      	nop
}
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd90      	pop	{r4, r7, pc}

08001b70 <ssd1306_DrawBitmap>:

//Draw bitmap - ported from the ADAFruit GFX library

void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	603a      	str	r2, [r7, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	71fb      	strb	r3, [r7, #7]
 8001b7e:	460b      	mov	r3, r1
 8001b80:	71bb      	strb	r3, [r7, #6]
 8001b82:	4613      	mov	r3, r2
 8001b84:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001b86:	797b      	ldrb	r3, [r7, #5]
 8001b88:	3307      	adds	r3, #7
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	da00      	bge.n	8001b90 <ssd1306_DrawBitmap+0x20>
 8001b8e:	3307      	adds	r3, #7
 8001b90:	10db      	asrs	r3, r3, #3
 8001b92:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	db3e      	blt.n	8001c1e <ssd1306_DrawBitmap+0xae>
 8001ba0:	79bb      	ldrb	r3, [r7, #6]
 8001ba2:	2b3f      	cmp	r3, #63	; 0x3f
 8001ba4:	d83b      	bhi.n	8001c1e <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	73bb      	strb	r3, [r7, #14]
 8001baa:	e033      	b.n	8001c14 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8001bac:	2300      	movs	r3, #0
 8001bae:	737b      	strb	r3, [r7, #13]
 8001bb0:	e026      	b.n	8001c00 <ssd1306_DrawBitmap+0x90>
            if (i & 7)
 8001bb2:	7b7b      	ldrb	r3, [r7, #13]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	73fb      	strb	r3, [r7, #15]
 8001bc2:	e00d      	b.n	8001be0 <ssd1306_DrawBitmap+0x70>
            else
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001bc4:	7bbb      	ldrb	r3, [r7, #14]
 8001bc6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001bca:	fb02 f303 	mul.w	r3, r2, r3
 8001bce:	7b7a      	ldrb	r2, [r7, #13]
 8001bd0:	08d2      	lsrs	r2, r2, #3
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	4413      	add	r3, r2
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	73fb      	strb	r3, [r7, #15]
            if (byte & 0x80)
 8001be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	da08      	bge.n	8001bfa <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8001be8:	79fa      	ldrb	r2, [r7, #7]
 8001bea:	7b7b      	ldrb	r3, [r7, #13]
 8001bec:	4413      	add	r3, r2
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	7f3a      	ldrb	r2, [r7, #28]
 8001bf2:	79b9      	ldrb	r1, [r7, #6]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff fbeb 	bl	80013d0 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8001bfa:	7b7b      	ldrb	r3, [r7, #13]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	737b      	strb	r3, [r7, #13]
 8001c00:	7b7a      	ldrb	r2, [r7, #13]
 8001c02:	797b      	ldrb	r3, [r7, #5]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d3d4      	bcc.n	8001bb2 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8001c08:	7bbb      	ldrb	r3, [r7, #14]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	73bb      	strb	r3, [r7, #14]
 8001c0e:	79bb      	ldrb	r3, [r7, #6]
 8001c10:	3301      	adds	r3, #1
 8001c12:	71bb      	strb	r3, [r7, #6]
 8001c14:	7bba      	ldrb	r2, [r7, #14]
 8001c16:	7e3b      	ldrb	r3, [r7, #24]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d3c7      	bcc.n	8001bac <ssd1306_DrawBitmap+0x3c>
        }
    }
    return;
 8001c1c:	e000      	b.n	8001c20 <ssd1306_DrawBitmap+0xb0>
        return;
 8001c1e:	bf00      	nop
}
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b084      	sub	sp, #16
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001c30:	2381      	movs	r3, #129	; 0x81
 8001c32:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fae4 	bl	8001204 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fae0 	bl	8001204 <ssd1306_WriteCommand>
}
 8001c44:	bf00      	nop
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d005      	beq.n	8001c68 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001c5c:	23af      	movs	r3, #175	; 0xaf
 8001c5e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001c60:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <ssd1306_SetDisplayOn+0x38>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	715a      	strb	r2, [r3, #5]
 8001c66:	e004      	b.n	8001c72 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001c68:	23ae      	movs	r3, #174	; 0xae
 8001c6a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001c6c:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <ssd1306_SetDisplayOn+0x38>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff fac5 	bl	8001204 <ssd1306_WriteCommand>
}
 8001c7a:	bf00      	nop
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000500 	.word	0x20000500

08001c88 <ssd1306_TestBorder>:
0x00, 0x03, 0xFF, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00,
0x00, 0x00, 0x3F, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0xF0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void ssd1306_TestBorder() {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f7ff fb54 	bl	800133c <ssd1306_Fill>
   
    uint32_t start = HAL_GetTick();
 8001c94:	f000 fb6a 	bl	800236c <HAL_GetTick>
 8001c98:	60b8      	str	r0, [r7, #8]
    uint32_t end = start;
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	607b      	str	r3, [r7, #4]
    uint8_t x = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	73fb      	strb	r3, [r7, #15]
    uint8_t y = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	73bb      	strb	r3, [r7, #14]
    do {
        ssd1306_DrawPixel(x, y, Black);
 8001ca6:	7bb9      	ldrb	r1, [r7, #14]
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	2200      	movs	r2, #0
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fb8f 	bl	80013d0 <ssd1306_DrawPixel>

        if((y == 0) && (x < 127))
 8001cb2:	7bbb      	ldrb	r3, [r7, #14]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d106      	bne.n	8001cc6 <ssd1306_TestBorder+0x3e>
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	2b7e      	cmp	r3, #126	; 0x7e
 8001cbc:	d803      	bhi.n	8001cc6 <ssd1306_TestBorder+0x3e>
            x++;
 8001cbe:	7bfb      	ldrb	r3, [r7, #15]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	73fb      	strb	r3, [r7, #15]
 8001cc4:	e016      	b.n	8001cf4 <ssd1306_TestBorder+0x6c>
        else if((x == 127) && (y < (SSD1306_HEIGHT-1)))
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
 8001cc8:	2b7f      	cmp	r3, #127	; 0x7f
 8001cca:	d106      	bne.n	8001cda <ssd1306_TestBorder+0x52>
 8001ccc:	7bbb      	ldrb	r3, [r7, #14]
 8001cce:	2b3e      	cmp	r3, #62	; 0x3e
 8001cd0:	d803      	bhi.n	8001cda <ssd1306_TestBorder+0x52>
            y++;
 8001cd2:	7bbb      	ldrb	r3, [r7, #14]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	73bb      	strb	r3, [r7, #14]
 8001cd8:	e00c      	b.n	8001cf4 <ssd1306_TestBorder+0x6c>
        else if((y == (SSD1306_HEIGHT-1)) && (x > 0)) 
 8001cda:	7bbb      	ldrb	r3, [r7, #14]
 8001cdc:	2b3f      	cmp	r3, #63	; 0x3f
 8001cde:	d106      	bne.n	8001cee <ssd1306_TestBorder+0x66>
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <ssd1306_TestBorder+0x66>
            x--;
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	73fb      	strb	r3, [r7, #15]
 8001cec:	e002      	b.n	8001cf4 <ssd1306_TestBorder+0x6c>
        else
            y--;
 8001cee:	7bbb      	ldrb	r3, [r7, #14]
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	73bb      	strb	r3, [r7, #14]

        ssd1306_DrawPixel(x, y, White);
 8001cf4:	7bb9      	ldrb	r1, [r7, #14]
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff fb68 	bl	80013d0 <ssd1306_DrawPixel>
        ssd1306_UpdateScreen();
 8001d00:	f7ff fb3e 	bl	8001380 <ssd1306_UpdateScreen>
    
        HAL_Delay(5);
 8001d04:	2005      	movs	r0, #5
 8001d06:	f000 fb3b 	bl	8002380 <HAL_Delay>
        end = HAL_GetTick();
 8001d0a:	f000 fb2f 	bl	800236c <HAL_GetTick>
 8001d0e:	6078      	str	r0, [r7, #4]
    } while((end - start) < 8000);
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001d1a:	d3c4      	bcc.n	8001ca6 <ssd1306_TestBorder+0x1e>
   
    HAL_Delay(1000);
 8001d1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d20:	f000 fb2e 	bl	8002380 <HAL_Delay>
}
 8001d24:	bf00      	nop
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <ssd1306_TestFonts>:

void ssd1306_TestFonts() {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
    uint8_t y = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	71fb      	strb	r3, [r7, #7]
    ssd1306_Fill(Black);
 8001d36:	2000      	movs	r0, #0
 8001d38:	f7ff fb00 	bl	800133c <ssd1306_Fill>

    #ifdef SSD1306_INCLUDE_FONT_16x26
    ssd1306_SetCursor(2, y);
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	4619      	mov	r1, r3
 8001d40:	2002      	movs	r0, #2
 8001d42:	f7ff fc45 	bl	80015d0 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 16x26", Font_16x26, White);
 8001d46:	4a1b      	ldr	r2, [pc, #108]	; (8001db4 <ssd1306_TestFonts+0x88>)
 8001d48:	2301      	movs	r3, #1
 8001d4a:	ca06      	ldmia	r2, {r1, r2}
 8001d4c:	481a      	ldr	r0, [pc, #104]	; (8001db8 <ssd1306_TestFonts+0x8c>)
 8001d4e:	f7ff fc19 	bl	8001584 <ssd1306_WriteString>
    y += 26;
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	331a      	adds	r3, #26
 8001d56:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_11x18
    ssd1306_SetCursor(2, y);
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	2002      	movs	r0, #2
 8001d5e:	f7ff fc37 	bl	80015d0 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 11x18", Font_11x18, White);
 8001d62:	4a16      	ldr	r2, [pc, #88]	; (8001dbc <ssd1306_TestFonts+0x90>)
 8001d64:	2301      	movs	r3, #1
 8001d66:	ca06      	ldmia	r2, {r1, r2}
 8001d68:	4815      	ldr	r0, [pc, #84]	; (8001dc0 <ssd1306_TestFonts+0x94>)
 8001d6a:	f7ff fc0b 	bl	8001584 <ssd1306_WriteString>
    y += 18;
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	3312      	adds	r3, #18
 8001d72:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_7x10
    ssd1306_SetCursor(2, y);
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	4619      	mov	r1, r3
 8001d78:	2002      	movs	r0, #2
 8001d7a:	f7ff fc29 	bl	80015d0 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 7x10", Font_7x10, White);
 8001d7e:	4a11      	ldr	r2, [pc, #68]	; (8001dc4 <ssd1306_TestFonts+0x98>)
 8001d80:	2301      	movs	r3, #1
 8001d82:	ca06      	ldmia	r2, {r1, r2}
 8001d84:	4810      	ldr	r0, [pc, #64]	; (8001dc8 <ssd1306_TestFonts+0x9c>)
 8001d86:	f7ff fbfd 	bl	8001584 <ssd1306_WriteString>
    y += 10;
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	330a      	adds	r3, #10
 8001d8e:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_6x8
    ssd1306_SetCursor(2, y);
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	4619      	mov	r1, r3
 8001d94:	2002      	movs	r0, #2
 8001d96:	f7ff fc1b 	bl	80015d0 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 6x8", Font_6x8, White);
 8001d9a:	4a0c      	ldr	r2, [pc, #48]	; (8001dcc <ssd1306_TestFonts+0xa0>)
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	ca06      	ldmia	r2, {r1, r2}
 8001da0:	480b      	ldr	r0, [pc, #44]	; (8001dd0 <ssd1306_TestFonts+0xa4>)
 8001da2:	f7ff fbef 	bl	8001584 <ssd1306_WriteString>
    #endif

    ssd1306_UpdateScreen();
 8001da6:	f7ff faeb 	bl	8001380 <ssd1306_UpdateScreen>
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000018 	.word	0x20000018
 8001db8:	080053a0 	.word	0x080053a0
 8001dbc:	20000010 	.word	0x20000010
 8001dc0:	080053ac 	.word	0x080053ac
 8001dc4:	20000008 	.word	0x20000008
 8001dc8:	080053b8 	.word	0x080053b8
 8001dcc:	20000000 	.word	0x20000000
 8001dd0:	080053c4 	.word	0x080053c4

08001dd4 <ssd1306_TestFPS>:

void ssd1306_TestFPS() {
 8001dd4:	b5b0      	push	{r4, r5, r7, lr}
 8001dd6:	b098      	sub	sp, #96	; 0x60
 8001dd8:	af00      	add	r7, sp, #0
    ssd1306_Fill(White);
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f7ff faae 	bl	800133c <ssd1306_Fill>
   
    uint32_t start = HAL_GetTick();
 8001de0:	f000 fac4 	bl	800236c <HAL_GetTick>
 8001de4:	65b8      	str	r0, [r7, #88]	; 0x58
    uint32_t end = start;
 8001de6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001de8:	657b      	str	r3, [r7, #84]	; 0x54
    int fps = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	65fb      	str	r3, [r7, #92]	; 0x5c
    char message[] = "ABCDEFGHIJK";
 8001dee:	4a42      	ldr	r2, [pc, #264]	; (8001ef8 <ssd1306_TestFPS+0x124>)
 8001df0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001df4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001df6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   
    ssd1306_SetCursor(2,0);
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	2002      	movs	r0, #2
 8001dfe:	f7ff fbe7 	bl	80015d0 <ssd1306_SetCursor>
    ssd1306_WriteString("Testing...", Font_11x18, Black);
 8001e02:	4a3e      	ldr	r2, [pc, #248]	; (8001efc <ssd1306_TestFPS+0x128>)
 8001e04:	2300      	movs	r3, #0
 8001e06:	ca06      	ldmia	r2, {r1, r2}
 8001e08:	483d      	ldr	r0, [pc, #244]	; (8001f00 <ssd1306_TestFPS+0x12c>)
 8001e0a:	f7ff fbbb 	bl	8001584 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 18*2);
 8001e0e:	2124      	movs	r1, #36	; 0x24
 8001e10:	2002      	movs	r0, #2
 8001e12:	f7ff fbdd 	bl	80015d0 <ssd1306_SetCursor>
    ssd1306_WriteString("0123456789A", Font_11x18, Black);
 8001e16:	4a39      	ldr	r2, [pc, #228]	; (8001efc <ssd1306_TestFPS+0x128>)
 8001e18:	2300      	movs	r3, #0
 8001e1a:	ca06      	ldmia	r2, {r1, r2}
 8001e1c:	4839      	ldr	r0, [pc, #228]	; (8001f04 <ssd1306_TestFPS+0x130>)
 8001e1e:	f7ff fbb1 	bl	8001584 <ssd1306_WriteString>
   
    do {
        ssd1306_SetCursor(2, 18);
 8001e22:	2112      	movs	r1, #18
 8001e24:	2002      	movs	r0, #2
 8001e26:	f7ff fbd3 	bl	80015d0 <ssd1306_SetCursor>
        ssd1306_WriteString(message, Font_11x18, Black);
 8001e2a:	4a34      	ldr	r2, [pc, #208]	; (8001efc <ssd1306_TestFPS+0x128>)
 8001e2c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001e30:	2300      	movs	r3, #0
 8001e32:	ca06      	ldmia	r2, {r1, r2}
 8001e34:	f7ff fba6 	bl	8001584 <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 8001e38:	f7ff faa2 	bl	8001380 <ssd1306_UpdateScreen>
       
        char ch = message[0];
 8001e3c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001e40:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        memmove(message, message+1, sizeof(message)-2);
 8001e44:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e48:	3301      	adds	r3, #1
 8001e4a:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001e4e:	220a      	movs	r2, #10
 8001e50:	4619      	mov	r1, r3
 8001e52:	f001 fdd1 	bl	80039f8 <memmove>
        message[sizeof(message)-2] = ch;
 8001e56:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001e5a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

        fps++;
 8001e5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e60:	3301      	adds	r3, #1
 8001e62:	65fb      	str	r3, [r7, #92]	; 0x5c
        end = HAL_GetTick();
 8001e64:	f000 fa82 	bl	800236c <HAL_GetTick>
 8001e68:	6578      	str	r0, [r7, #84]	; 0x54
    } while((end - start) < 5000);
 8001e6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	f241 3287 	movw	r2, #4999	; 0x1387
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d9d4      	bls.n	8001e22 <ssd1306_TestFPS+0x4e>
   
    HAL_Delay(5000);
 8001e78:	f241 3088 	movw	r0, #5000	; 0x1388
 8001e7c:	f000 fa80 	bl	8002380 <HAL_Delay>

    char buff[64];
    fps = (float)fps / ((end - start) / 1000.0);
 8001e80:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001e82:	f7fe feed 	bl	8000c60 <__aeabi_i2f>
 8001e86:	4603      	mov	r3, r0
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe fac5 	bl	8000418 <__aeabi_f2d>
 8001e8e:	4604      	mov	r4, r0
 8001e90:	460d      	mov	r5, r1
 8001e92:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe fa9b 	bl	80003d4 <__aeabi_ui2d>
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	4b19      	ldr	r3, [pc, #100]	; (8001f08 <ssd1306_TestFPS+0x134>)
 8001ea4:	f7fe fc3a 	bl	800071c <__aeabi_ddiv>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4620      	mov	r0, r4
 8001eae:	4629      	mov	r1, r5
 8001eb0:	f7fe fc34 	bl	800071c <__aeabi_ddiv>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4610      	mov	r0, r2
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f7fe fd9e 	bl	80009fc <__aeabi_d2iz>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	65fb      	str	r3, [r7, #92]	; 0x5c
    snprintf(buff, sizeof(buff), "~%d FPS", fps);
 8001ec4:	1d38      	adds	r0, r7, #4
 8001ec6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ec8:	4a10      	ldr	r2, [pc, #64]	; (8001f0c <ssd1306_TestFPS+0x138>)
 8001eca:	2140      	movs	r1, #64	; 0x40
 8001ecc:	f001 fdb6 	bl	8003a3c <sniprintf>
   
    ssd1306_Fill(White);
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	f7ff fa33 	bl	800133c <ssd1306_Fill>
    ssd1306_SetCursor(2, 2);
 8001ed6:	2102      	movs	r1, #2
 8001ed8:	2002      	movs	r0, #2
 8001eda:	f7ff fb79 	bl	80015d0 <ssd1306_SetCursor>
    ssd1306_WriteString(buff, Font_11x18, Black);
 8001ede:	4a07      	ldr	r2, [pc, #28]	; (8001efc <ssd1306_TestFPS+0x128>)
 8001ee0:	1d38      	adds	r0, r7, #4
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	ca06      	ldmia	r2, {r1, r2}
 8001ee6:	f7ff fb4d 	bl	8001584 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8001eea:	f7ff fa49 	bl	8001380 <ssd1306_UpdateScreen>
}
 8001eee:	bf00      	nop
 8001ef0:	3760      	adds	r7, #96	; 0x60
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	080053f0 	.word	0x080053f0
 8001efc:	20000010 	.word	0x20000010
 8001f00:	080053d0 	.word	0x080053d0
 8001f04:	080053dc 	.word	0x080053dc
 8001f08:	408f4000 	.word	0x408f4000
 8001f0c:	080053e8 	.word	0x080053e8

08001f10 <ssd1306_TestLine>:

void ssd1306_TestLine() {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af02      	add	r7, sp, #8

  ssd1306_Line(1,1,SSD1306_WIDTH - 1,SSD1306_HEIGHT - 1,White);
 8001f16:	2301      	movs	r3, #1
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	233f      	movs	r3, #63	; 0x3f
 8001f1c:	227f      	movs	r2, #127	; 0x7f
 8001f1e:	2101      	movs	r1, #1
 8001f20:	2001      	movs	r0, #1
 8001f22:	f7ff fb6d 	bl	8001600 <ssd1306_Line>
  ssd1306_Line(SSD1306_WIDTH - 1,1,1,SSD1306_HEIGHT - 1,White);
 8001f26:	2301      	movs	r3, #1
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	233f      	movs	r3, #63	; 0x3f
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	2101      	movs	r1, #1
 8001f30:	207f      	movs	r0, #127	; 0x7f
 8001f32:	f7ff fb65 	bl	8001600 <ssd1306_Line>
  ssd1306_UpdateScreen();
 8001f36:	f7ff fa23 	bl	8001380 <ssd1306_UpdateScreen>
  return;
 8001f3a:	bf00      	nop
}
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <ssd1306_TestRectangle>:

void ssd1306_TestRectangle() {
 8001f40:	b590      	push	{r4, r7, lr}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af02      	add	r7, sp, #8
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 8001f46:	2300      	movs	r3, #0
 8001f48:	607b      	str	r3, [r7, #4]
 8001f4a:	e028      	b.n	8001f9e <ssd1306_TestRectangle+0x5e>
    ssd1306_DrawRectangle(1 + (5*delta),1 + (5*delta) ,SSD1306_WIDTH-1 - (5*delta),SSD1306_HEIGHT-1 - (5*delta),White);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	461a      	mov	r2, r3
 8001f52:	0092      	lsls	r2, r2, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	3301      	adds	r3, #1
 8001f5a:	b2d8      	uxtb	r0, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	461a      	mov	r2, r3
 8001f62:	0092      	lsls	r2, r2, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	3301      	adds	r3, #1
 8001f6a:	b2d9      	uxtb	r1, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	461a      	mov	r2, r3
 8001f72:	0092      	lsls	r2, r2, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	461c      	mov	r4, r3
 8001f84:	00a4      	lsls	r4, r4, #2
 8001f86:	4423      	add	r3, r4
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2401      	movs	r4, #1
 8001f92:	9400      	str	r4, [sp, #0]
 8001f94:	f7ff fdb5 	bl	8001b02 <ssd1306_DrawRectangle>
  for(delta = 0; delta < 5; delta ++) {
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	607b      	str	r3, [r7, #4]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b04      	cmp	r3, #4
 8001fa2:	d9d3      	bls.n	8001f4c <ssd1306_TestRectangle+0xc>
  }
  ssd1306_UpdateScreen();
 8001fa4:	f7ff f9ec 	bl	8001380 <ssd1306_UpdateScreen>
  return;
 8001fa8:	bf00      	nop
}
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd90      	pop	{r4, r7, pc}

08001fb0 <ssd1306_TestCircle>:

void ssd1306_TestCircle() {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	607b      	str	r3, [r7, #4]
 8001fba:	e010      	b.n	8001fde <ssd1306_TestCircle+0x2e>
    ssd1306_DrawCircle(20* delta+30, 15, 10, White);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	0092      	lsls	r2, r2, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	331e      	adds	r3, #30
 8001fcc:	b2d8      	uxtb	r0, r3
 8001fce:	2301      	movs	r3, #1
 8001fd0:	220a      	movs	r2, #10
 8001fd2:	210f      	movs	r1, #15
 8001fd4:	f7ff fd0e 	bl	80019f4 <ssd1306_DrawCircle>
  for(delta = 0; delta < 5; delta ++) {
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	607b      	str	r3, [r7, #4]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d9eb      	bls.n	8001fbc <ssd1306_TestCircle+0xc>
  }
  ssd1306_UpdateScreen();
 8001fe4:	f7ff f9cc 	bl	8001380 <ssd1306_UpdateScreen>
  return;
 8001fe8:	bf00      	nop
}
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <ssd1306_TestArc>:

void ssd1306_TestArc() {
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af02      	add	r7, sp, #8
  ssd1306_DrawArc(30, 30, 30, 20, 270, White);
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	9301      	str	r3, [sp, #4]
 8001ffa:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	2314      	movs	r3, #20
 8002002:	221e      	movs	r2, #30
 8002004:	211e      	movs	r1, #30
 8002006:	201e      	movs	r0, #30
 8002008:	f7ff fbf0 	bl	80017ec <ssd1306_DrawArc>
  ssd1306_UpdateScreen();
 800200c:	f7ff f9b8 	bl	8001380 <ssd1306_UpdateScreen>
  return;
 8002010:	bf00      	nop
}
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <ssd1306_TestPolyline>:

void ssd1306_TestPolyline() {
 8002018:	b590      	push	{r4, r7, lr}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
  SSD1306_VERTEX loc_vertex[] =
 800201e:	4b08      	ldr	r3, [pc, #32]	; (8002040 <ssd1306_TestPolyline+0x28>)
 8002020:	463c      	mov	r4, r7
 8002022:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002024:	c407      	stmia	r4!, {r0, r1, r2}
 8002026:	8023      	strh	r3, [r4, #0]
      {45,16},
      {50,10},
      {53,16}
  };

  ssd1306_Polyline(loc_vertex,sizeof(loc_vertex)/sizeof(loc_vertex[0]),White);
 8002028:	463b      	mov	r3, r7
 800202a:	2201      	movs	r2, #1
 800202c:	2107      	movs	r1, #7
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff fb52 	bl	80016d8 <ssd1306_Polyline>
  ssd1306_UpdateScreen();
 8002034:	f7ff f9a4 	bl	8001380 <ssd1306_UpdateScreen>
  return;
 8002038:	bf00      	nop
}
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	bd90      	pop	{r4, r7, pc}
 8002040:	080053fc 	.word	0x080053fc

08002044 <ssd1306_TestDrawBitmap>:

void ssd1306_TestDrawBitmap()
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af02      	add	r7, sp, #8
    ssd1306_Fill(White);
 800204a:	2001      	movs	r0, #1
 800204c:	f7ff f976 	bl	800133c <ssd1306_Fill>
    ssd1306_DrawBitmap(0,0,garfield_128x64,128,64,Black);
 8002050:	2300      	movs	r3, #0
 8002052:	9301      	str	r3, [sp, #4]
 8002054:	2340      	movs	r3, #64	; 0x40
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	2380      	movs	r3, #128	; 0x80
 800205a:	4a18      	ldr	r2, [pc, #96]	; (80020bc <ssd1306_TestDrawBitmap+0x78>)
 800205c:	2100      	movs	r1, #0
 800205e:	2000      	movs	r0, #0
 8002060:	f7ff fd86 	bl	8001b70 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 8002064:	f7ff f98c 	bl	8001380 <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 8002068:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800206c:	f000 f988 	bl	8002380 <HAL_Delay>
    ssd1306_Fill(Black);
 8002070:	2000      	movs	r0, #0
 8002072:	f7ff f963 	bl	800133c <ssd1306_Fill>
    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,White);
 8002076:	2301      	movs	r3, #1
 8002078:	9301      	str	r3, [sp, #4]
 800207a:	2340      	movs	r3, #64	; 0x40
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	2340      	movs	r3, #64	; 0x40
 8002080:	4a0f      	ldr	r2, [pc, #60]	; (80020c0 <ssd1306_TestDrawBitmap+0x7c>)
 8002082:	2100      	movs	r1, #0
 8002084:	2020      	movs	r0, #32
 8002086:	f7ff fd73 	bl	8001b70 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 800208a:	f7ff f979 	bl	8001380 <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 800208e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002092:	f000 f975 	bl	8002380 <HAL_Delay>
    ssd1306_Fill(White);
 8002096:	2001      	movs	r0, #1
 8002098:	f7ff f950 	bl	800133c <ssd1306_Fill>
    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,Black);
 800209c:	2300      	movs	r3, #0
 800209e:	9301      	str	r3, [sp, #4]
 80020a0:	2340      	movs	r3, #64	; 0x40
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	2340      	movs	r3, #64	; 0x40
 80020a6:	4a06      	ldr	r2, [pc, #24]	; (80020c0 <ssd1306_TestDrawBitmap+0x7c>)
 80020a8:	2100      	movs	r1, #0
 80020aa:	2020      	movs	r0, #32
 80020ac:	f7ff fd60 	bl	8001b70 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 80020b0:	f7ff f966 	bl	8001380 <ssd1306_UpdateScreen>
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	08008220 	.word	0x08008220
 80020c0:	08008620 	.word	0x08008620

080020c4 <ssd1306_TestAll>:

void ssd1306_TestAll() {
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
    ssd1306_Init();
 80020c8:	f7ff f8ce 	bl	8001268 <ssd1306_Init>
    ssd1306_TestFPS();
 80020cc:	f7ff fe82 	bl	8001dd4 <ssd1306_TestFPS>
    HAL_Delay(3000);
 80020d0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80020d4:	f000 f954 	bl	8002380 <HAL_Delay>
    ssd1306_TestBorder();
 80020d8:	f7ff fdd6 	bl	8001c88 <ssd1306_TestBorder>
    ssd1306_TestFonts();
 80020dc:	f7ff fe26 	bl	8001d2c <ssd1306_TestFonts>
    HAL_Delay(3000);
 80020e0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80020e4:	f000 f94c 	bl	8002380 <HAL_Delay>
    ssd1306_Fill(Black);
 80020e8:	2000      	movs	r0, #0
 80020ea:	f7ff f927 	bl	800133c <ssd1306_Fill>
    ssd1306_TestRectangle();
 80020ee:	f7ff ff27 	bl	8001f40 <ssd1306_TestRectangle>
    ssd1306_TestLine();
 80020f2:	f7ff ff0d 	bl	8001f10 <ssd1306_TestLine>
    HAL_Delay(3000);
 80020f6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80020fa:	f000 f941 	bl	8002380 <HAL_Delay>
    ssd1306_Fill(Black);
 80020fe:	2000      	movs	r0, #0
 8002100:	f7ff f91c 	bl	800133c <ssd1306_Fill>
    ssd1306_TestPolyline();
 8002104:	f7ff ff88 	bl	8002018 <ssd1306_TestPolyline>
    HAL_Delay(3000);
 8002108:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800210c:	f000 f938 	bl	8002380 <HAL_Delay>
    ssd1306_Fill(Black);
 8002110:	2000      	movs	r0, #0
 8002112:	f7ff f913 	bl	800133c <ssd1306_Fill>
    ssd1306_TestArc();
 8002116:	f7ff ff6b 	bl	8001ff0 <ssd1306_TestArc>
    HAL_Delay(3000);
 800211a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800211e:	f000 f92f 	bl	8002380 <HAL_Delay>
    ssd1306_Fill(Black);
 8002122:	2000      	movs	r0, #0
 8002124:	f7ff f90a 	bl	800133c <ssd1306_Fill>
    ssd1306_TestCircle();
 8002128:	f7ff ff42 	bl	8001fb0 <ssd1306_TestCircle>
    HAL_Delay(3000);
 800212c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002130:	f000 f926 	bl	8002380 <HAL_Delay>
    ssd1306_TestDrawBitmap();
 8002134:	f7ff ff86 	bl	8002044 <ssd1306_TestDrawBitmap>
    HAL_Delay(3000);
 8002138:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800213c:	f000 f920 	bl	8002380 <HAL_Delay>
}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}

08002144 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800214a:	4b15      	ldr	r3, [pc, #84]	; (80021a0 <HAL_MspInit+0x5c>)
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	4a14      	ldr	r2, [pc, #80]	; (80021a0 <HAL_MspInit+0x5c>)
 8002150:	f043 0301 	orr.w	r3, r3, #1
 8002154:	6193      	str	r3, [r2, #24]
 8002156:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <HAL_MspInit+0x5c>)
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	60bb      	str	r3, [r7, #8]
 8002160:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002162:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <HAL_MspInit+0x5c>)
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	4a0e      	ldr	r2, [pc, #56]	; (80021a0 <HAL_MspInit+0x5c>)
 8002168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800216c:	61d3      	str	r3, [r2, #28]
 800216e:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <HAL_MspInit+0x5c>)
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002176:	607b      	str	r3, [r7, #4]
 8002178:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800217a:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <HAL_MspInit+0x60>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	4a04      	ldr	r2, [pc, #16]	; (80021a4 <HAL_MspInit+0x60>)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002196:	bf00      	nop
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40010000 	.word	0x40010000

080021a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021ac:	e7fe      	b.n	80021ac <NMI_Handler+0x4>

080021ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ae:	b480      	push	{r7}
 80021b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021b2:	e7fe      	b.n	80021b2 <HardFault_Handler+0x4>

080021b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021b8:	e7fe      	b.n	80021b8 <MemManage_Handler+0x4>

080021ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ba:	b480      	push	{r7}
 80021bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021be:	e7fe      	b.n	80021be <BusFault_Handler+0x4>

080021c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021c4:	e7fe      	b.n	80021c4 <UsageFault_Handler+0x4>

080021c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr

080021d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021d2:	b480      	push	{r7}
 80021d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr

080021de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021de:	b480      	push	{r7}
 80021e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr

080021ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021ee:	f000 f8ab 	bl	8002348 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002200:	4a14      	ldr	r2, [pc, #80]	; (8002254 <_sbrk+0x5c>)
 8002202:	4b15      	ldr	r3, [pc, #84]	; (8002258 <_sbrk+0x60>)
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800220c:	4b13      	ldr	r3, [pc, #76]	; (800225c <_sbrk+0x64>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d102      	bne.n	800221a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002214:	4b11      	ldr	r3, [pc, #68]	; (800225c <_sbrk+0x64>)
 8002216:	4a12      	ldr	r2, [pc, #72]	; (8002260 <_sbrk+0x68>)
 8002218:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800221a:	4b10      	ldr	r3, [pc, #64]	; (800225c <_sbrk+0x64>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4413      	add	r3, r2
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	429a      	cmp	r2, r3
 8002226:	d207      	bcs.n	8002238 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002228:	f001 fbae 	bl	8003988 <__errno>
 800222c:	4603      	mov	r3, r0
 800222e:	220c      	movs	r2, #12
 8002230:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002232:	f04f 33ff 	mov.w	r3, #4294967295
 8002236:	e009      	b.n	800224c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002238:	4b08      	ldr	r3, [pc, #32]	; (800225c <_sbrk+0x64>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800223e:	4b07      	ldr	r3, [pc, #28]	; (800225c <_sbrk+0x64>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4413      	add	r3, r2
 8002246:	4a05      	ldr	r2, [pc, #20]	; (800225c <_sbrk+0x64>)
 8002248:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800224a:	68fb      	ldr	r3, [r7, #12]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20005000 	.word	0x20005000
 8002258:	00000400 	.word	0x00000400
 800225c:	20000508 	.word	0x20000508
 8002260:	20000520 	.word	0x20000520

08002264 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr

08002270 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002270:	480c      	ldr	r0, [pc, #48]	; (80022a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002272:	490d      	ldr	r1, [pc, #52]	; (80022a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002274:	4a0d      	ldr	r2, [pc, #52]	; (80022ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002276:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002278:	e002      	b.n	8002280 <LoopCopyDataInit>

0800227a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800227a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800227c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800227e:	3304      	adds	r3, #4

08002280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002284:	d3f9      	bcc.n	800227a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002286:	4a0a      	ldr	r2, [pc, #40]	; (80022b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002288:	4c0a      	ldr	r4, [pc, #40]	; (80022b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800228a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800228c:	e001      	b.n	8002292 <LoopFillZerobss>

0800228e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800228e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002290:	3204      	adds	r2, #4

08002292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002294:	d3fb      	bcc.n	800228e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002296:	f7ff ffe5 	bl	8002264 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800229a:	f001 fb7b 	bl	8003994 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800229e:	f7fe ff3b 	bl	8001118 <main>
  bx lr
 80022a2:	4770      	bx	lr
  ldr r0, =_sdata
 80022a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022a8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80022ac:	08008a50 	.word	0x08008a50
  ldr r2, =_sbss
 80022b0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80022b4:	20000520 	.word	0x20000520

080022b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022b8:	e7fe      	b.n	80022b8 <ADC1_2_IRQHandler>
	...

080022bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022c0:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <HAL_Init+0x28>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a07      	ldr	r2, [pc, #28]	; (80022e4 <HAL_Init+0x28>)
 80022c6:	f043 0310 	orr.w	r3, r3, #16
 80022ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022cc:	2003      	movs	r0, #3
 80022ce:	f000 f92b 	bl	8002528 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022d2:	200f      	movs	r0, #15
 80022d4:	f000 f808 	bl	80022e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022d8:	f7ff ff34 	bl	8002144 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40022000 	.word	0x40022000

080022e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022f0:	4b12      	ldr	r3, [pc, #72]	; (800233c <HAL_InitTick+0x54>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	4b12      	ldr	r3, [pc, #72]	; (8002340 <HAL_InitTick+0x58>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	4619      	mov	r1, r3
 80022fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002302:	fbb2 f3f3 	udiv	r3, r2, r3
 8002306:	4618      	mov	r0, r3
 8002308:	f000 f935 	bl	8002576 <HAL_SYSTICK_Config>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e00e      	b.n	8002334 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b0f      	cmp	r3, #15
 800231a:	d80a      	bhi.n	8002332 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800231c:	2200      	movs	r2, #0
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	f04f 30ff 	mov.w	r0, #4294967295
 8002324:	f000 f90b 	bl	800253e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002328:	4a06      	ldr	r2, [pc, #24]	; (8002344 <HAL_InitTick+0x5c>)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800232e:	2300      	movs	r3, #0
 8002330:	e000      	b.n	8002334 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
}
 8002334:	4618      	mov	r0, r3
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	20000020 	.word	0x20000020
 8002340:	20000028 	.word	0x20000028
 8002344:	20000024 	.word	0x20000024

08002348 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800234c:	4b05      	ldr	r3, [pc, #20]	; (8002364 <HAL_IncTick+0x1c>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	461a      	mov	r2, r3
 8002352:	4b05      	ldr	r3, [pc, #20]	; (8002368 <HAL_IncTick+0x20>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4413      	add	r3, r2
 8002358:	4a03      	ldr	r2, [pc, #12]	; (8002368 <HAL_IncTick+0x20>)
 800235a:	6013      	str	r3, [r2, #0]
}
 800235c:	bf00      	nop
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr
 8002364:	20000028 	.word	0x20000028
 8002368:	2000050c 	.word	0x2000050c

0800236c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  return uwTick;
 8002370:	4b02      	ldr	r3, [pc, #8]	; (800237c <HAL_GetTick+0x10>)
 8002372:	681b      	ldr	r3, [r3, #0]
}
 8002374:	4618      	mov	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr
 800237c:	2000050c 	.word	0x2000050c

08002380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002388:	f7ff fff0 	bl	800236c <HAL_GetTick>
 800238c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002398:	d005      	beq.n	80023a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800239a:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <HAL_Delay+0x44>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	461a      	mov	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4413      	add	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023a6:	bf00      	nop
 80023a8:	f7ff ffe0 	bl	800236c <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d8f7      	bhi.n	80023a8 <HAL_Delay+0x28>
  {
  }
}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20000028 	.word	0x20000028

080023c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023d8:	4b0c      	ldr	r3, [pc, #48]	; (800240c <__NVIC_SetPriorityGrouping+0x44>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023e4:	4013      	ands	r3, r2
 80023e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023fa:	4a04      	ldr	r2, [pc, #16]	; (800240c <__NVIC_SetPriorityGrouping+0x44>)
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	60d3      	str	r3, [r2, #12]
}
 8002400:	bf00      	nop
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002414:	4b04      	ldr	r3, [pc, #16]	; (8002428 <__NVIC_GetPriorityGrouping+0x18>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	0a1b      	lsrs	r3, r3, #8
 800241a:	f003 0307 	and.w	r3, r3, #7
}
 800241e:	4618      	mov	r0, r3
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	6039      	str	r1, [r7, #0]
 8002436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243c:	2b00      	cmp	r3, #0
 800243e:	db0a      	blt.n	8002456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	b2da      	uxtb	r2, r3
 8002444:	490c      	ldr	r1, [pc, #48]	; (8002478 <__NVIC_SetPriority+0x4c>)
 8002446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244a:	0112      	lsls	r2, r2, #4
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	440b      	add	r3, r1
 8002450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002454:	e00a      	b.n	800246c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	b2da      	uxtb	r2, r3
 800245a:	4908      	ldr	r1, [pc, #32]	; (800247c <__NVIC_SetPriority+0x50>)
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	3b04      	subs	r3, #4
 8002464:	0112      	lsls	r2, r2, #4
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	440b      	add	r3, r1
 800246a:	761a      	strb	r2, [r3, #24]
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	bc80      	pop	{r7}
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	e000e100 	.word	0xe000e100
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002480:	b480      	push	{r7}
 8002482:	b089      	sub	sp, #36	; 0x24
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f1c3 0307 	rsb	r3, r3, #7
 800249a:	2b04      	cmp	r3, #4
 800249c:	bf28      	it	cs
 800249e:	2304      	movcs	r3, #4
 80024a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	3304      	adds	r3, #4
 80024a6:	2b06      	cmp	r3, #6
 80024a8:	d902      	bls.n	80024b0 <NVIC_EncodePriority+0x30>
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	3b03      	subs	r3, #3
 80024ae:	e000      	b.n	80024b2 <NVIC_EncodePriority+0x32>
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b4:	f04f 32ff 	mov.w	r2, #4294967295
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43da      	mvns	r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	401a      	ands	r2, r3
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024c8:	f04f 31ff 	mov.w	r1, #4294967295
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	fa01 f303 	lsl.w	r3, r1, r3
 80024d2:	43d9      	mvns	r1, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d8:	4313      	orrs	r3, r2
         );
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3724      	adds	r7, #36	; 0x24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr

080024e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024f4:	d301      	bcc.n	80024fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024f6:	2301      	movs	r3, #1
 80024f8:	e00f      	b.n	800251a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024fa:	4a0a      	ldr	r2, [pc, #40]	; (8002524 <SysTick_Config+0x40>)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3b01      	subs	r3, #1
 8002500:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002502:	210f      	movs	r1, #15
 8002504:	f04f 30ff 	mov.w	r0, #4294967295
 8002508:	f7ff ff90 	bl	800242c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800250c:	4b05      	ldr	r3, [pc, #20]	; (8002524 <SysTick_Config+0x40>)
 800250e:	2200      	movs	r2, #0
 8002510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002512:	4b04      	ldr	r3, [pc, #16]	; (8002524 <SysTick_Config+0x40>)
 8002514:	2207      	movs	r2, #7
 8002516:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	e000e010 	.word	0xe000e010

08002528 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff ff49 	bl	80023c8 <__NVIC_SetPriorityGrouping>
}
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800253e:	b580      	push	{r7, lr}
 8002540:	b086      	sub	sp, #24
 8002542:	af00      	add	r7, sp, #0
 8002544:	4603      	mov	r3, r0
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	607a      	str	r2, [r7, #4]
 800254a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002550:	f7ff ff5e 	bl	8002410 <__NVIC_GetPriorityGrouping>
 8002554:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	68b9      	ldr	r1, [r7, #8]
 800255a:	6978      	ldr	r0, [r7, #20]
 800255c:	f7ff ff90 	bl	8002480 <NVIC_EncodePriority>
 8002560:	4602      	mov	r2, r0
 8002562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002566:	4611      	mov	r1, r2
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff ff5f 	bl	800242c <__NVIC_SetPriority>
}
 800256e:	bf00      	nop
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff ffb0 	bl	80024e4 <SysTick_Config>
 8002584:	4603      	mov	r3, r0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002590:	b480      	push	{r7}
 8002592:	b08b      	sub	sp, #44	; 0x2c
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800259a:	2300      	movs	r3, #0
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800259e:	2300      	movs	r3, #0
 80025a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025a2:	e169      	b.n	8002878 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025a4:	2201      	movs	r2, #1
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	69fa      	ldr	r2, [r7, #28]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	429a      	cmp	r2, r3
 80025be:	f040 8158 	bne.w	8002872 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	4a9a      	ldr	r2, [pc, #616]	; (8002830 <HAL_GPIO_Init+0x2a0>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d05e      	beq.n	800268a <HAL_GPIO_Init+0xfa>
 80025cc:	4a98      	ldr	r2, [pc, #608]	; (8002830 <HAL_GPIO_Init+0x2a0>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d875      	bhi.n	80026be <HAL_GPIO_Init+0x12e>
 80025d2:	4a98      	ldr	r2, [pc, #608]	; (8002834 <HAL_GPIO_Init+0x2a4>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d058      	beq.n	800268a <HAL_GPIO_Init+0xfa>
 80025d8:	4a96      	ldr	r2, [pc, #600]	; (8002834 <HAL_GPIO_Init+0x2a4>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d86f      	bhi.n	80026be <HAL_GPIO_Init+0x12e>
 80025de:	4a96      	ldr	r2, [pc, #600]	; (8002838 <HAL_GPIO_Init+0x2a8>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d052      	beq.n	800268a <HAL_GPIO_Init+0xfa>
 80025e4:	4a94      	ldr	r2, [pc, #592]	; (8002838 <HAL_GPIO_Init+0x2a8>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d869      	bhi.n	80026be <HAL_GPIO_Init+0x12e>
 80025ea:	4a94      	ldr	r2, [pc, #592]	; (800283c <HAL_GPIO_Init+0x2ac>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d04c      	beq.n	800268a <HAL_GPIO_Init+0xfa>
 80025f0:	4a92      	ldr	r2, [pc, #584]	; (800283c <HAL_GPIO_Init+0x2ac>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d863      	bhi.n	80026be <HAL_GPIO_Init+0x12e>
 80025f6:	4a92      	ldr	r2, [pc, #584]	; (8002840 <HAL_GPIO_Init+0x2b0>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d046      	beq.n	800268a <HAL_GPIO_Init+0xfa>
 80025fc:	4a90      	ldr	r2, [pc, #576]	; (8002840 <HAL_GPIO_Init+0x2b0>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d85d      	bhi.n	80026be <HAL_GPIO_Init+0x12e>
 8002602:	2b12      	cmp	r3, #18
 8002604:	d82a      	bhi.n	800265c <HAL_GPIO_Init+0xcc>
 8002606:	2b12      	cmp	r3, #18
 8002608:	d859      	bhi.n	80026be <HAL_GPIO_Init+0x12e>
 800260a:	a201      	add	r2, pc, #4	; (adr r2, 8002610 <HAL_GPIO_Init+0x80>)
 800260c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002610:	0800268b 	.word	0x0800268b
 8002614:	08002665 	.word	0x08002665
 8002618:	08002677 	.word	0x08002677
 800261c:	080026b9 	.word	0x080026b9
 8002620:	080026bf 	.word	0x080026bf
 8002624:	080026bf 	.word	0x080026bf
 8002628:	080026bf 	.word	0x080026bf
 800262c:	080026bf 	.word	0x080026bf
 8002630:	080026bf 	.word	0x080026bf
 8002634:	080026bf 	.word	0x080026bf
 8002638:	080026bf 	.word	0x080026bf
 800263c:	080026bf 	.word	0x080026bf
 8002640:	080026bf 	.word	0x080026bf
 8002644:	080026bf 	.word	0x080026bf
 8002648:	080026bf 	.word	0x080026bf
 800264c:	080026bf 	.word	0x080026bf
 8002650:	080026bf 	.word	0x080026bf
 8002654:	0800266d 	.word	0x0800266d
 8002658:	08002681 	.word	0x08002681
 800265c:	4a79      	ldr	r2, [pc, #484]	; (8002844 <HAL_GPIO_Init+0x2b4>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d013      	beq.n	800268a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002662:	e02c      	b.n	80026be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	623b      	str	r3, [r7, #32]
          break;
 800266a:	e029      	b.n	80026c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	3304      	adds	r3, #4
 8002672:	623b      	str	r3, [r7, #32]
          break;
 8002674:	e024      	b.n	80026c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	3308      	adds	r3, #8
 800267c:	623b      	str	r3, [r7, #32]
          break;
 800267e:	e01f      	b.n	80026c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	330c      	adds	r3, #12
 8002686:	623b      	str	r3, [r7, #32]
          break;
 8002688:	e01a      	b.n	80026c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d102      	bne.n	8002698 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002692:	2304      	movs	r3, #4
 8002694:	623b      	str	r3, [r7, #32]
          break;
 8002696:	e013      	b.n	80026c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d105      	bne.n	80026ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026a0:	2308      	movs	r3, #8
 80026a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	69fa      	ldr	r2, [r7, #28]
 80026a8:	611a      	str	r2, [r3, #16]
          break;
 80026aa:	e009      	b.n	80026c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026ac:	2308      	movs	r3, #8
 80026ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69fa      	ldr	r2, [r7, #28]
 80026b4:	615a      	str	r2, [r3, #20]
          break;
 80026b6:	e003      	b.n	80026c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026b8:	2300      	movs	r3, #0
 80026ba:	623b      	str	r3, [r7, #32]
          break;
 80026bc:	e000      	b.n	80026c0 <HAL_GPIO_Init+0x130>
          break;
 80026be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	2bff      	cmp	r3, #255	; 0xff
 80026c4:	d801      	bhi.n	80026ca <HAL_GPIO_Init+0x13a>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	e001      	b.n	80026ce <HAL_GPIO_Init+0x13e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3304      	adds	r3, #4
 80026ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	2bff      	cmp	r3, #255	; 0xff
 80026d4:	d802      	bhi.n	80026dc <HAL_GPIO_Init+0x14c>
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	e002      	b.n	80026e2 <HAL_GPIO_Init+0x152>
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	3b08      	subs	r3, #8
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	210f      	movs	r1, #15
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	fa01 f303 	lsl.w	r3, r1, r3
 80026f0:	43db      	mvns	r3, r3
 80026f2:	401a      	ands	r2, r3
 80026f4:	6a39      	ldr	r1, [r7, #32]
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	fa01 f303 	lsl.w	r3, r1, r3
 80026fc:	431a      	orrs	r2, r3
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 80b1 	beq.w	8002872 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002710:	4b4d      	ldr	r3, [pc, #308]	; (8002848 <HAL_GPIO_Init+0x2b8>)
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	4a4c      	ldr	r2, [pc, #304]	; (8002848 <HAL_GPIO_Init+0x2b8>)
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	6193      	str	r3, [r2, #24]
 800271c:	4b4a      	ldr	r3, [pc, #296]	; (8002848 <HAL_GPIO_Init+0x2b8>)
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002728:	4a48      	ldr	r2, [pc, #288]	; (800284c <HAL_GPIO_Init+0x2bc>)
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	089b      	lsrs	r3, r3, #2
 800272e:	3302      	adds	r3, #2
 8002730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002734:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	f003 0303 	and.w	r3, r3, #3
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	220f      	movs	r2, #15
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	4013      	ands	r3, r2
 800274a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a40      	ldr	r2, [pc, #256]	; (8002850 <HAL_GPIO_Init+0x2c0>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d013      	beq.n	800277c <HAL_GPIO_Init+0x1ec>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a3f      	ldr	r2, [pc, #252]	; (8002854 <HAL_GPIO_Init+0x2c4>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d00d      	beq.n	8002778 <HAL_GPIO_Init+0x1e8>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a3e      	ldr	r2, [pc, #248]	; (8002858 <HAL_GPIO_Init+0x2c8>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d007      	beq.n	8002774 <HAL_GPIO_Init+0x1e4>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a3d      	ldr	r2, [pc, #244]	; (800285c <HAL_GPIO_Init+0x2cc>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d101      	bne.n	8002770 <HAL_GPIO_Init+0x1e0>
 800276c:	2303      	movs	r3, #3
 800276e:	e006      	b.n	800277e <HAL_GPIO_Init+0x1ee>
 8002770:	2304      	movs	r3, #4
 8002772:	e004      	b.n	800277e <HAL_GPIO_Init+0x1ee>
 8002774:	2302      	movs	r3, #2
 8002776:	e002      	b.n	800277e <HAL_GPIO_Init+0x1ee>
 8002778:	2301      	movs	r3, #1
 800277a:	e000      	b.n	800277e <HAL_GPIO_Init+0x1ee>
 800277c:	2300      	movs	r3, #0
 800277e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002780:	f002 0203 	and.w	r2, r2, #3
 8002784:	0092      	lsls	r2, r2, #2
 8002786:	4093      	lsls	r3, r2
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	4313      	orrs	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800278e:	492f      	ldr	r1, [pc, #188]	; (800284c <HAL_GPIO_Init+0x2bc>)
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	089b      	lsrs	r3, r3, #2
 8002794:	3302      	adds	r3, #2
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d006      	beq.n	80027b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027a8:	4b2d      	ldr	r3, [pc, #180]	; (8002860 <HAL_GPIO_Init+0x2d0>)
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	492c      	ldr	r1, [pc, #176]	; (8002860 <HAL_GPIO_Init+0x2d0>)
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	600b      	str	r3, [r1, #0]
 80027b4:	e006      	b.n	80027c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027b6:	4b2a      	ldr	r3, [pc, #168]	; (8002860 <HAL_GPIO_Init+0x2d0>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	43db      	mvns	r3, r3
 80027be:	4928      	ldr	r1, [pc, #160]	; (8002860 <HAL_GPIO_Init+0x2d0>)
 80027c0:	4013      	ands	r3, r2
 80027c2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d006      	beq.n	80027de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80027d0:	4b23      	ldr	r3, [pc, #140]	; (8002860 <HAL_GPIO_Init+0x2d0>)
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	4922      	ldr	r1, [pc, #136]	; (8002860 <HAL_GPIO_Init+0x2d0>)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	4313      	orrs	r3, r2
 80027da:	604b      	str	r3, [r1, #4]
 80027dc:	e006      	b.n	80027ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027de:	4b20      	ldr	r3, [pc, #128]	; (8002860 <HAL_GPIO_Init+0x2d0>)
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	43db      	mvns	r3, r3
 80027e6:	491e      	ldr	r1, [pc, #120]	; (8002860 <HAL_GPIO_Init+0x2d0>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d006      	beq.n	8002806 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027f8:	4b19      	ldr	r3, [pc, #100]	; (8002860 <HAL_GPIO_Init+0x2d0>)
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	4918      	ldr	r1, [pc, #96]	; (8002860 <HAL_GPIO_Init+0x2d0>)
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	4313      	orrs	r3, r2
 8002802:	608b      	str	r3, [r1, #8]
 8002804:	e006      	b.n	8002814 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002806:	4b16      	ldr	r3, [pc, #88]	; (8002860 <HAL_GPIO_Init+0x2d0>)
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	43db      	mvns	r3, r3
 800280e:	4914      	ldr	r1, [pc, #80]	; (8002860 <HAL_GPIO_Init+0x2d0>)
 8002810:	4013      	ands	r3, r2
 8002812:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d021      	beq.n	8002864 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002820:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <HAL_GPIO_Init+0x2d0>)
 8002822:	68da      	ldr	r2, [r3, #12]
 8002824:	490e      	ldr	r1, [pc, #56]	; (8002860 <HAL_GPIO_Init+0x2d0>)
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	4313      	orrs	r3, r2
 800282a:	60cb      	str	r3, [r1, #12]
 800282c:	e021      	b.n	8002872 <HAL_GPIO_Init+0x2e2>
 800282e:	bf00      	nop
 8002830:	10320000 	.word	0x10320000
 8002834:	10310000 	.word	0x10310000
 8002838:	10220000 	.word	0x10220000
 800283c:	10210000 	.word	0x10210000
 8002840:	10120000 	.word	0x10120000
 8002844:	10110000 	.word	0x10110000
 8002848:	40021000 	.word	0x40021000
 800284c:	40010000 	.word	0x40010000
 8002850:	40010800 	.word	0x40010800
 8002854:	40010c00 	.word	0x40010c00
 8002858:	40011000 	.word	0x40011000
 800285c:	40011400 	.word	0x40011400
 8002860:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002864:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <HAL_GPIO_Init+0x304>)
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	43db      	mvns	r3, r3
 800286c:	4909      	ldr	r1, [pc, #36]	; (8002894 <HAL_GPIO_Init+0x304>)
 800286e:	4013      	ands	r3, r2
 8002870:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	3301      	adds	r3, #1
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	fa22 f303 	lsr.w	r3, r2, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	f47f ae8e 	bne.w	80025a4 <HAL_GPIO_Init+0x14>
  }
}
 8002888:	bf00      	nop
 800288a:	bf00      	nop
 800288c:	372c      	adds	r7, #44	; 0x2c
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr
 8002894:	40010400 	.word	0x40010400

08002898 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	460b      	mov	r3, r1
 80028a2:	807b      	strh	r3, [r7, #2]
 80028a4:	4613      	mov	r3, r2
 80028a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028a8:	787b      	ldrb	r3, [r7, #1]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028ae:	887a      	ldrh	r2, [r7, #2]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028b4:	e003      	b.n	80028be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028b6:	887b      	ldrh	r3, [r7, #2]
 80028b8:	041a      	lsls	r2, r3, #16
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	611a      	str	r2, [r3, #16]
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr

080028c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e12b      	b.n	8002b32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d106      	bne.n	80028f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7fe fbd2 	bl	8001098 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2224      	movs	r2, #36	; 0x24
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0201 	bic.w	r2, r2, #1
 800290a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800291a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800292a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800292c:	f000 fffa 	bl	8003924 <HAL_RCC_GetPCLK1Freq>
 8002930:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	4a81      	ldr	r2, [pc, #516]	; (8002b3c <HAL_I2C_Init+0x274>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d807      	bhi.n	800294c <HAL_I2C_Init+0x84>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4a80      	ldr	r2, [pc, #512]	; (8002b40 <HAL_I2C_Init+0x278>)
 8002940:	4293      	cmp	r3, r2
 8002942:	bf94      	ite	ls
 8002944:	2301      	movls	r3, #1
 8002946:	2300      	movhi	r3, #0
 8002948:	b2db      	uxtb	r3, r3
 800294a:	e006      	b.n	800295a <HAL_I2C_Init+0x92>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4a7d      	ldr	r2, [pc, #500]	; (8002b44 <HAL_I2C_Init+0x27c>)
 8002950:	4293      	cmp	r3, r2
 8002952:	bf94      	ite	ls
 8002954:	2301      	movls	r3, #1
 8002956:	2300      	movhi	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e0e7      	b.n	8002b32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	4a78      	ldr	r2, [pc, #480]	; (8002b48 <HAL_I2C_Init+0x280>)
 8002966:	fba2 2303 	umull	r2, r3, r2, r3
 800296a:	0c9b      	lsrs	r3, r3, #18
 800296c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68ba      	ldr	r2, [r7, #8]
 800297e:	430a      	orrs	r2, r1
 8002980:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	4a6a      	ldr	r2, [pc, #424]	; (8002b3c <HAL_I2C_Init+0x274>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d802      	bhi.n	800299c <HAL_I2C_Init+0xd4>
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	3301      	adds	r3, #1
 800299a:	e009      	b.n	80029b0 <HAL_I2C_Init+0xe8>
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029a2:	fb02 f303 	mul.w	r3, r2, r3
 80029a6:	4a69      	ldr	r2, [pc, #420]	; (8002b4c <HAL_I2C_Init+0x284>)
 80029a8:	fba2 2303 	umull	r2, r3, r2, r3
 80029ac:	099b      	lsrs	r3, r3, #6
 80029ae:	3301      	adds	r3, #1
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6812      	ldr	r2, [r2, #0]
 80029b4:	430b      	orrs	r3, r1
 80029b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	495c      	ldr	r1, [pc, #368]	; (8002b3c <HAL_I2C_Init+0x274>)
 80029cc:	428b      	cmp	r3, r1
 80029ce:	d819      	bhi.n	8002a04 <HAL_I2C_Init+0x13c>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	1e59      	subs	r1, r3, #1
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	fbb1 f3f3 	udiv	r3, r1, r3
 80029de:	1c59      	adds	r1, r3, #1
 80029e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029e4:	400b      	ands	r3, r1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00a      	beq.n	8002a00 <HAL_I2C_Init+0x138>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	1e59      	subs	r1, r3, #1
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80029f8:	3301      	adds	r3, #1
 80029fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029fe:	e051      	b.n	8002aa4 <HAL_I2C_Init+0x1dc>
 8002a00:	2304      	movs	r3, #4
 8002a02:	e04f      	b.n	8002aa4 <HAL_I2C_Init+0x1dc>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d111      	bne.n	8002a30 <HAL_I2C_Init+0x168>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	1e58      	subs	r0, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6859      	ldr	r1, [r3, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	440b      	add	r3, r1
 8002a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a1e:	3301      	adds	r3, #1
 8002a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	bf0c      	ite	eq
 8002a28:	2301      	moveq	r3, #1
 8002a2a:	2300      	movne	r3, #0
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	e012      	b.n	8002a56 <HAL_I2C_Init+0x18e>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	1e58      	subs	r0, r3, #1
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6859      	ldr	r1, [r3, #4]
 8002a38:	460b      	mov	r3, r1
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	0099      	lsls	r1, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a46:	3301      	adds	r3, #1
 8002a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	bf0c      	ite	eq
 8002a50:	2301      	moveq	r3, #1
 8002a52:	2300      	movne	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_I2C_Init+0x196>
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e022      	b.n	8002aa4 <HAL_I2C_Init+0x1dc>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10e      	bne.n	8002a84 <HAL_I2C_Init+0x1bc>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	1e58      	subs	r0, r3, #1
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6859      	ldr	r1, [r3, #4]
 8002a6e:	460b      	mov	r3, r1
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	440b      	add	r3, r1
 8002a74:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a78:	3301      	adds	r3, #1
 8002a7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a82:	e00f      	b.n	8002aa4 <HAL_I2C_Init+0x1dc>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	1e58      	subs	r0, r3, #1
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6859      	ldr	r1, [r3, #4]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	0099      	lsls	r1, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	6809      	ldr	r1, [r1, #0]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69da      	ldr	r2, [r3, #28]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ad2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6911      	ldr	r1, [r2, #16]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	68d2      	ldr	r2, [r2, #12]
 8002ade:	4311      	orrs	r1, r2
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	6812      	ldr	r2, [r2, #0]
 8002ae4:	430b      	orrs	r3, r1
 8002ae6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695a      	ldr	r2, [r3, #20]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0201 	orr.w	r2, r2, #1
 8002b12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	000186a0 	.word	0x000186a0
 8002b40:	001e847f 	.word	0x001e847f
 8002b44:	003d08ff 	.word	0x003d08ff
 8002b48:	431bde83 	.word	0x431bde83
 8002b4c:	10624dd3 	.word	0x10624dd3

08002b50 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b088      	sub	sp, #32
 8002b54:	af02      	add	r7, sp, #8
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	4608      	mov	r0, r1
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4603      	mov	r3, r0
 8002b60:	817b      	strh	r3, [r7, #10]
 8002b62:	460b      	mov	r3, r1
 8002b64:	813b      	strh	r3, [r7, #8]
 8002b66:	4613      	mov	r3, r2
 8002b68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b6a:	f7ff fbff 	bl	800236c <HAL_GetTick>
 8002b6e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b20      	cmp	r3, #32
 8002b7a:	f040 80d9 	bne.w	8002d30 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	2319      	movs	r3, #25
 8002b84:	2201      	movs	r2, #1
 8002b86:	496d      	ldr	r1, [pc, #436]	; (8002d3c <HAL_I2C_Mem_Write+0x1ec>)
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 f971 	bl	8002e70 <I2C_WaitOnFlagUntilTimeout>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002b94:	2302      	movs	r3, #2
 8002b96:	e0cc      	b.n	8002d32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d101      	bne.n	8002ba6 <HAL_I2C_Mem_Write+0x56>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	e0c5      	b.n	8002d32 <HAL_I2C_Mem_Write+0x1e2>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d007      	beq.n	8002bcc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0201 	orr.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bda:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2221      	movs	r2, #33	; 0x21
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2240      	movs	r2, #64	; 0x40
 8002be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6a3a      	ldr	r2, [r7, #32]
 8002bf6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002bfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4a4d      	ldr	r2, [pc, #308]	; (8002d40 <HAL_I2C_Mem_Write+0x1f0>)
 8002c0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c0e:	88f8      	ldrh	r0, [r7, #6]
 8002c10:	893a      	ldrh	r2, [r7, #8]
 8002c12:	8979      	ldrh	r1, [r7, #10]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	9301      	str	r3, [sp, #4]
 8002c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 f890 	bl	8002d44 <I2C_RequestMemoryWrite>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d052      	beq.n	8002cd0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e081      	b.n	8002d32 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 f9f2 	bl	800301c <I2C_WaitOnTXEFlagUntilTimeout>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00d      	beq.n	8002c5a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d107      	bne.n	8002c56 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e06b      	b.n	8002d32 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	781a      	ldrb	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c74:	3b01      	subs	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	3b01      	subs	r3, #1
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d11b      	bne.n	8002cd0 <HAL_I2C_Mem_Write+0x180>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d017      	beq.n	8002cd0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	781a      	ldrb	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1aa      	bne.n	8002c2e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 f9de 	bl	800309e <I2C_WaitOnBTFFlagUntilTimeout>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00d      	beq.n	8002d04 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d107      	bne.n	8002d00 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cfe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e016      	b.n	8002d32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	e000      	b.n	8002d32 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d30:	2302      	movs	r3, #2
  }
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	00100002 	.word	0x00100002
 8002d40:	ffff0000 	.word	0xffff0000

08002d44 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af02      	add	r7, sp, #8
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	4608      	mov	r0, r1
 8002d4e:	4611      	mov	r1, r2
 8002d50:	461a      	mov	r2, r3
 8002d52:	4603      	mov	r3, r0
 8002d54:	817b      	strh	r3, [r7, #10]
 8002d56:	460b      	mov	r3, r1
 8002d58:	813b      	strh	r3, [r7, #8]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	6a3b      	ldr	r3, [r7, #32]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 f878 	bl	8002e70 <I2C_WaitOnFlagUntilTimeout>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00d      	beq.n	8002da2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d94:	d103      	bne.n	8002d9e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e05f      	b.n	8002e62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002da2:	897b      	ldrh	r3, [r7, #10]
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	461a      	mov	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002db0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	6a3a      	ldr	r2, [r7, #32]
 8002db6:	492d      	ldr	r1, [pc, #180]	; (8002e6c <I2C_RequestMemoryWrite+0x128>)
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 f8b0 	bl	8002f1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e04c      	b.n	8002e62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de0:	6a39      	ldr	r1, [r7, #32]
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 f91a 	bl	800301c <I2C_WaitOnTXEFlagUntilTimeout>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00d      	beq.n	8002e0a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d107      	bne.n	8002e06 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e02b      	b.n	8002e62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e0a:	88fb      	ldrh	r3, [r7, #6]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d105      	bne.n	8002e1c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e10:	893b      	ldrh	r3, [r7, #8]
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	611a      	str	r2, [r3, #16]
 8002e1a:	e021      	b.n	8002e60 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e1c:	893b      	ldrh	r3, [r7, #8]
 8002e1e:	0a1b      	lsrs	r3, r3, #8
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e2c:	6a39      	ldr	r1, [r7, #32]
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 f8f4 	bl	800301c <I2C_WaitOnTXEFlagUntilTimeout>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00d      	beq.n	8002e56 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d107      	bne.n	8002e52 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e005      	b.n	8002e62 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e56:	893b      	ldrh	r3, [r7, #8]
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3718      	adds	r7, #24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	00010002 	.word	0x00010002

08002e70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	603b      	str	r3, [r7, #0]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e80:	e025      	b.n	8002ece <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e88:	d021      	beq.n	8002ece <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e8a:	f7ff fa6f 	bl	800236c <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d302      	bcc.n	8002ea0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d116      	bne.n	8002ece <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	f043 0220 	orr.w	r2, r3, #32
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e023      	b.n	8002f16 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	0c1b      	lsrs	r3, r3, #16
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d10d      	bne.n	8002ef4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	43da      	mvns	r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	bf0c      	ite	eq
 8002eea:	2301      	moveq	r3, #1
 8002eec:	2300      	movne	r3, #0
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	e00c      	b.n	8002f0e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	43da      	mvns	r2, r3
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	4013      	ands	r3, r2
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	bf0c      	ite	eq
 8002f06:	2301      	moveq	r3, #1
 8002f08:	2300      	movne	r3, #0
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	79fb      	ldrb	r3, [r7, #7]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d0b6      	beq.n	8002e82 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b084      	sub	sp, #16
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	60f8      	str	r0, [r7, #12]
 8002f26:	60b9      	str	r1, [r7, #8]
 8002f28:	607a      	str	r2, [r7, #4]
 8002f2a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f2c:	e051      	b.n	8002fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f3c:	d123      	bne.n	8002f86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f4c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f56:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2220      	movs	r2, #32
 8002f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	f043 0204 	orr.w	r2, r3, #4
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e046      	b.n	8003014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8c:	d021      	beq.n	8002fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f8e:	f7ff f9ed 	bl	800236c <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d302      	bcc.n	8002fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d116      	bne.n	8002fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2220      	movs	r2, #32
 8002fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	f043 0220 	orr.w	r2, r3, #32
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e020      	b.n	8003014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	0c1b      	lsrs	r3, r3, #16
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d10c      	bne.n	8002ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	43da      	mvns	r2, r3
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	bf14      	ite	ne
 8002fee:	2301      	movne	r3, #1
 8002ff0:	2300      	moveq	r3, #0
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	e00b      	b.n	800300e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	43da      	mvns	r2, r3
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	4013      	ands	r3, r2
 8003002:	b29b      	uxth	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	bf14      	ite	ne
 8003008:	2301      	movne	r3, #1
 800300a:	2300      	moveq	r3, #0
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d18d      	bne.n	8002f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003028:	e02d      	b.n	8003086 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 f878 	bl	8003120 <I2C_IsAcknowledgeFailed>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e02d      	b.n	8003096 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003040:	d021      	beq.n	8003086 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003042:	f7ff f993 	bl	800236c <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	429a      	cmp	r2, r3
 8003050:	d302      	bcc.n	8003058 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d116      	bne.n	8003086 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2220      	movs	r2, #32
 8003062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f043 0220 	orr.w	r2, r3, #32
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e007      	b.n	8003096 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003090:	2b80      	cmp	r3, #128	; 0x80
 8003092:	d1ca      	bne.n	800302a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b084      	sub	sp, #16
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	60f8      	str	r0, [r7, #12]
 80030a6:	60b9      	str	r1, [r7, #8]
 80030a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030aa:	e02d      	b.n	8003108 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 f837 	bl	8003120 <I2C_IsAcknowledgeFailed>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e02d      	b.n	8003118 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c2:	d021      	beq.n	8003108 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c4:	f7ff f952 	bl	800236c <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d302      	bcc.n	80030da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d116      	bne.n	8003108 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f4:	f043 0220 	orr.w	r2, r3, #32
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e007      	b.n	8003118 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	f003 0304 	and.w	r3, r3, #4
 8003112:	2b04      	cmp	r3, #4
 8003114:	d1ca      	bne.n	80030ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003136:	d11b      	bne.n	8003170 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003140:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2220      	movs	r2, #32
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315c:	f043 0204 	orr.w	r2, r3, #4
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e000      	b.n	8003172 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr

0800317c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e272      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 8087 	beq.w	80032aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800319c:	4b92      	ldr	r3, [pc, #584]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f003 030c 	and.w	r3, r3, #12
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d00c      	beq.n	80031c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031a8:	4b8f      	ldr	r3, [pc, #572]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 030c 	and.w	r3, r3, #12
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d112      	bne.n	80031da <HAL_RCC_OscConfig+0x5e>
 80031b4:	4b8c      	ldr	r3, [pc, #560]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c0:	d10b      	bne.n	80031da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c2:	4b89      	ldr	r3, [pc, #548]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d06c      	beq.n	80032a8 <HAL_RCC_OscConfig+0x12c>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d168      	bne.n	80032a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e24c      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e2:	d106      	bne.n	80031f2 <HAL_RCC_OscConfig+0x76>
 80031e4:	4b80      	ldr	r3, [pc, #512]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a7f      	ldr	r2, [pc, #508]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80031ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ee:	6013      	str	r3, [r2, #0]
 80031f0:	e02e      	b.n	8003250 <HAL_RCC_OscConfig+0xd4>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10c      	bne.n	8003214 <HAL_RCC_OscConfig+0x98>
 80031fa:	4b7b      	ldr	r3, [pc, #492]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a7a      	ldr	r2, [pc, #488]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	4b78      	ldr	r3, [pc, #480]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a77      	ldr	r2, [pc, #476]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 800320c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	e01d      	b.n	8003250 <HAL_RCC_OscConfig+0xd4>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800321c:	d10c      	bne.n	8003238 <HAL_RCC_OscConfig+0xbc>
 800321e:	4b72      	ldr	r3, [pc, #456]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a71      	ldr	r2, [pc, #452]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	4b6f      	ldr	r3, [pc, #444]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a6e      	ldr	r2, [pc, #440]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	e00b      	b.n	8003250 <HAL_RCC_OscConfig+0xd4>
 8003238:	4b6b      	ldr	r3, [pc, #428]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a6a      	ldr	r2, [pc, #424]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 800323e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003242:	6013      	str	r3, [r2, #0]
 8003244:	4b68      	ldr	r3, [pc, #416]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a67      	ldr	r2, [pc, #412]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 800324a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800324e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d013      	beq.n	8003280 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003258:	f7ff f888 	bl	800236c <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003260:	f7ff f884 	bl	800236c <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b64      	cmp	r3, #100	; 0x64
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e200      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003272:	4b5d      	ldr	r3, [pc, #372]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0f0      	beq.n	8003260 <HAL_RCC_OscConfig+0xe4>
 800327e:	e014      	b.n	80032aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003280:	f7ff f874 	bl	800236c <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003288:	f7ff f870 	bl	800236c <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b64      	cmp	r3, #100	; 0x64
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e1ec      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800329a:	4b53      	ldr	r3, [pc, #332]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f0      	bne.n	8003288 <HAL_RCC_OscConfig+0x10c>
 80032a6:	e000      	b.n	80032aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d063      	beq.n	800337e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032b6:	4b4c      	ldr	r3, [pc, #304]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f003 030c 	and.w	r3, r3, #12
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00b      	beq.n	80032da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032c2:	4b49      	ldr	r3, [pc, #292]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f003 030c 	and.w	r3, r3, #12
 80032ca:	2b08      	cmp	r3, #8
 80032cc:	d11c      	bne.n	8003308 <HAL_RCC_OscConfig+0x18c>
 80032ce:	4b46      	ldr	r3, [pc, #280]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d116      	bne.n	8003308 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032da:	4b43      	ldr	r3, [pc, #268]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d005      	beq.n	80032f2 <HAL_RCC_OscConfig+0x176>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d001      	beq.n	80032f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e1c0      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f2:	4b3d      	ldr	r3, [pc, #244]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	4939      	ldr	r1, [pc, #228]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003302:	4313      	orrs	r3, r2
 8003304:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003306:	e03a      	b.n	800337e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d020      	beq.n	8003352 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003310:	4b36      	ldr	r3, [pc, #216]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 8003312:	2201      	movs	r2, #1
 8003314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003316:	f7ff f829 	bl	800236c <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800331c:	e008      	b.n	8003330 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800331e:	f7ff f825 	bl	800236c <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e1a1      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003330:	4b2d      	ldr	r3, [pc, #180]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0f0      	beq.n	800331e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800333c:	4b2a      	ldr	r3, [pc, #168]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	4927      	ldr	r1, [pc, #156]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 800334c:	4313      	orrs	r3, r2
 800334e:	600b      	str	r3, [r1, #0]
 8003350:	e015      	b.n	800337e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003352:	4b26      	ldr	r3, [pc, #152]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003358:	f7ff f808 	bl	800236c <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003360:	f7ff f804 	bl	800236c <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e180      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003372:	4b1d      	ldr	r3, [pc, #116]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f0      	bne.n	8003360 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0308 	and.w	r3, r3, #8
 8003386:	2b00      	cmp	r3, #0
 8003388:	d03a      	beq.n	8003400 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d019      	beq.n	80033c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003392:	4b17      	ldr	r3, [pc, #92]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 8003394:	2201      	movs	r2, #1
 8003396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003398:	f7fe ffe8 	bl	800236c <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033a0:	f7fe ffe4 	bl	800236c <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e160      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033b2:	4b0d      	ldr	r3, [pc, #52]	; (80033e8 <HAL_RCC_OscConfig+0x26c>)
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d0f0      	beq.n	80033a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033be:	2001      	movs	r0, #1
 80033c0:	f000 fac4 	bl	800394c <RCC_Delay>
 80033c4:	e01c      	b.n	8003400 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033c6:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033cc:	f7fe ffce 	bl	800236c <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d2:	e00f      	b.n	80033f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d4:	f7fe ffca 	bl	800236c <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d908      	bls.n	80033f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e146      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
 80033e6:	bf00      	nop
 80033e8:	40021000 	.word	0x40021000
 80033ec:	42420000 	.word	0x42420000
 80033f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f4:	4b92      	ldr	r3, [pc, #584]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1e9      	bne.n	80033d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 80a6 	beq.w	800355a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800340e:	2300      	movs	r3, #0
 8003410:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003412:	4b8b      	ldr	r3, [pc, #556]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10d      	bne.n	800343a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800341e:	4b88      	ldr	r3, [pc, #544]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	4a87      	ldr	r2, [pc, #540]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 8003424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003428:	61d3      	str	r3, [r2, #28]
 800342a:	4b85      	ldr	r3, [pc, #532]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003432:	60bb      	str	r3, [r7, #8]
 8003434:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003436:	2301      	movs	r3, #1
 8003438:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343a:	4b82      	ldr	r3, [pc, #520]	; (8003644 <HAL_RCC_OscConfig+0x4c8>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003442:	2b00      	cmp	r3, #0
 8003444:	d118      	bne.n	8003478 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003446:	4b7f      	ldr	r3, [pc, #508]	; (8003644 <HAL_RCC_OscConfig+0x4c8>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a7e      	ldr	r2, [pc, #504]	; (8003644 <HAL_RCC_OscConfig+0x4c8>)
 800344c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003450:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003452:	f7fe ff8b 	bl	800236c <HAL_GetTick>
 8003456:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003458:	e008      	b.n	800346c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800345a:	f7fe ff87 	bl	800236c <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b64      	cmp	r3, #100	; 0x64
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e103      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346c:	4b75      	ldr	r3, [pc, #468]	; (8003644 <HAL_RCC_OscConfig+0x4c8>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0f0      	beq.n	800345a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d106      	bne.n	800348e <HAL_RCC_OscConfig+0x312>
 8003480:	4b6f      	ldr	r3, [pc, #444]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	4a6e      	ldr	r2, [pc, #440]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 8003486:	f043 0301 	orr.w	r3, r3, #1
 800348a:	6213      	str	r3, [r2, #32]
 800348c:	e02d      	b.n	80034ea <HAL_RCC_OscConfig+0x36e>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10c      	bne.n	80034b0 <HAL_RCC_OscConfig+0x334>
 8003496:	4b6a      	ldr	r3, [pc, #424]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	4a69      	ldr	r2, [pc, #420]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 800349c:	f023 0301 	bic.w	r3, r3, #1
 80034a0:	6213      	str	r3, [r2, #32]
 80034a2:	4b67      	ldr	r3, [pc, #412]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	4a66      	ldr	r2, [pc, #408]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80034a8:	f023 0304 	bic.w	r3, r3, #4
 80034ac:	6213      	str	r3, [r2, #32]
 80034ae:	e01c      	b.n	80034ea <HAL_RCC_OscConfig+0x36e>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	2b05      	cmp	r3, #5
 80034b6:	d10c      	bne.n	80034d2 <HAL_RCC_OscConfig+0x356>
 80034b8:	4b61      	ldr	r3, [pc, #388]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	4a60      	ldr	r2, [pc, #384]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80034be:	f043 0304 	orr.w	r3, r3, #4
 80034c2:	6213      	str	r3, [r2, #32]
 80034c4:	4b5e      	ldr	r3, [pc, #376]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	4a5d      	ldr	r2, [pc, #372]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80034ca:	f043 0301 	orr.w	r3, r3, #1
 80034ce:	6213      	str	r3, [r2, #32]
 80034d0:	e00b      	b.n	80034ea <HAL_RCC_OscConfig+0x36e>
 80034d2:	4b5b      	ldr	r3, [pc, #364]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	4a5a      	ldr	r2, [pc, #360]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80034d8:	f023 0301 	bic.w	r3, r3, #1
 80034dc:	6213      	str	r3, [r2, #32]
 80034de:	4b58      	ldr	r3, [pc, #352]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	4a57      	ldr	r2, [pc, #348]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80034e4:	f023 0304 	bic.w	r3, r3, #4
 80034e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d015      	beq.n	800351e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f2:	f7fe ff3b 	bl	800236c <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f8:	e00a      	b.n	8003510 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034fa:	f7fe ff37 	bl	800236c <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	f241 3288 	movw	r2, #5000	; 0x1388
 8003508:	4293      	cmp	r3, r2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e0b1      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003510:	4b4b      	ldr	r3, [pc, #300]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0ee      	beq.n	80034fa <HAL_RCC_OscConfig+0x37e>
 800351c:	e014      	b.n	8003548 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800351e:	f7fe ff25 	bl	800236c <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003524:	e00a      	b.n	800353c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003526:	f7fe ff21 	bl	800236c <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	f241 3288 	movw	r2, #5000	; 0x1388
 8003534:	4293      	cmp	r3, r2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e09b      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800353c:	4b40      	ldr	r3, [pc, #256]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1ee      	bne.n	8003526 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003548:	7dfb      	ldrb	r3, [r7, #23]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d105      	bne.n	800355a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800354e:	4b3c      	ldr	r3, [pc, #240]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	4a3b      	ldr	r2, [pc, #236]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 8003554:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003558:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 8087 	beq.w	8003672 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003564:	4b36      	ldr	r3, [pc, #216]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f003 030c 	and.w	r3, r3, #12
 800356c:	2b08      	cmp	r3, #8
 800356e:	d061      	beq.n	8003634 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	2b02      	cmp	r3, #2
 8003576:	d146      	bne.n	8003606 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003578:	4b33      	ldr	r3, [pc, #204]	; (8003648 <HAL_RCC_OscConfig+0x4cc>)
 800357a:	2200      	movs	r2, #0
 800357c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357e:	f7fe fef5 	bl	800236c <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003584:	e008      	b.n	8003598 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003586:	f7fe fef1 	bl	800236c <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e06d      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003598:	4b29      	ldr	r3, [pc, #164]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1f0      	bne.n	8003586 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ac:	d108      	bne.n	80035c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035ae:	4b24      	ldr	r3, [pc, #144]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	4921      	ldr	r1, [pc, #132]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035c0:	4b1f      	ldr	r3, [pc, #124]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a19      	ldr	r1, [r3, #32]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	430b      	orrs	r3, r1
 80035d2:	491b      	ldr	r1, [pc, #108]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035d8:	4b1b      	ldr	r3, [pc, #108]	; (8003648 <HAL_RCC_OscConfig+0x4cc>)
 80035da:	2201      	movs	r2, #1
 80035dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035de:	f7fe fec5 	bl	800236c <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e6:	f7fe fec1 	bl	800236c <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e03d      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035f8:	4b11      	ldr	r3, [pc, #68]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0f0      	beq.n	80035e6 <HAL_RCC_OscConfig+0x46a>
 8003604:	e035      	b.n	8003672 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003606:	4b10      	ldr	r3, [pc, #64]	; (8003648 <HAL_RCC_OscConfig+0x4cc>)
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360c:	f7fe feae 	bl	800236c <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003614:	f7fe feaa 	bl	800236c <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e026      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003626:	4b06      	ldr	r3, [pc, #24]	; (8003640 <HAL_RCC_OscConfig+0x4c4>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f0      	bne.n	8003614 <HAL_RCC_OscConfig+0x498>
 8003632:	e01e      	b.n	8003672 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d107      	bne.n	800364c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e019      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
 8003640:	40021000 	.word	0x40021000
 8003644:	40007000 	.word	0x40007000
 8003648:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800364c:	4b0b      	ldr	r3, [pc, #44]	; (800367c <HAL_RCC_OscConfig+0x500>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	429a      	cmp	r2, r3
 800365e:	d106      	bne.n	800366e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800366a:	429a      	cmp	r2, r3
 800366c:	d001      	beq.n	8003672 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e000      	b.n	8003674 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3718      	adds	r7, #24
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40021000 	.word	0x40021000

08003680 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e0d0      	b.n	8003836 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003694:	4b6a      	ldr	r3, [pc, #424]	; (8003840 <HAL_RCC_ClockConfig+0x1c0>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0307 	and.w	r3, r3, #7
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d910      	bls.n	80036c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a2:	4b67      	ldr	r3, [pc, #412]	; (8003840 <HAL_RCC_ClockConfig+0x1c0>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f023 0207 	bic.w	r2, r3, #7
 80036aa:	4965      	ldr	r1, [pc, #404]	; (8003840 <HAL_RCC_ClockConfig+0x1c0>)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b2:	4b63      	ldr	r3, [pc, #396]	; (8003840 <HAL_RCC_ClockConfig+0x1c0>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0307 	and.w	r3, r3, #7
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d001      	beq.n	80036c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e0b8      	b.n	8003836 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d020      	beq.n	8003712 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d005      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036dc:	4b59      	ldr	r3, [pc, #356]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	4a58      	ldr	r2, [pc, #352]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 80036e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0308 	and.w	r3, r3, #8
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d005      	beq.n	8003700 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036f4:	4b53      	ldr	r3, [pc, #332]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	4a52      	ldr	r2, [pc, #328]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 80036fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80036fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003700:	4b50      	ldr	r3, [pc, #320]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	494d      	ldr	r1, [pc, #308]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 800370e:	4313      	orrs	r3, r2
 8003710:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d040      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d107      	bne.n	8003736 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003726:	4b47      	ldr	r3, [pc, #284]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d115      	bne.n	800375e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e07f      	b.n	8003836 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d107      	bne.n	800374e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800373e:	4b41      	ldr	r3, [pc, #260]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d109      	bne.n	800375e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e073      	b.n	8003836 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800374e:	4b3d      	ldr	r3, [pc, #244]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e06b      	b.n	8003836 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800375e:	4b39      	ldr	r3, [pc, #228]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f023 0203 	bic.w	r2, r3, #3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	4936      	ldr	r1, [pc, #216]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 800376c:	4313      	orrs	r3, r2
 800376e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003770:	f7fe fdfc 	bl	800236c <HAL_GetTick>
 8003774:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003776:	e00a      	b.n	800378e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003778:	f7fe fdf8 	bl	800236c <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	f241 3288 	movw	r2, #5000	; 0x1388
 8003786:	4293      	cmp	r3, r2
 8003788:	d901      	bls.n	800378e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e053      	b.n	8003836 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378e:	4b2d      	ldr	r3, [pc, #180]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f003 020c 	and.w	r2, r3, #12
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	429a      	cmp	r2, r3
 800379e:	d1eb      	bne.n	8003778 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037a0:	4b27      	ldr	r3, [pc, #156]	; (8003840 <HAL_RCC_ClockConfig+0x1c0>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d210      	bcs.n	80037d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ae:	4b24      	ldr	r3, [pc, #144]	; (8003840 <HAL_RCC_ClockConfig+0x1c0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f023 0207 	bic.w	r2, r3, #7
 80037b6:	4922      	ldr	r1, [pc, #136]	; (8003840 <HAL_RCC_ClockConfig+0x1c0>)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037be:	4b20      	ldr	r3, [pc, #128]	; (8003840 <HAL_RCC_ClockConfig+0x1c0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0307 	and.w	r3, r3, #7
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d001      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e032      	b.n	8003836 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d008      	beq.n	80037ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037dc:	4b19      	ldr	r3, [pc, #100]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	4916      	ldr	r1, [pc, #88]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0308 	and.w	r3, r3, #8
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d009      	beq.n	800380e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037fa:	4b12      	ldr	r3, [pc, #72]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	490e      	ldr	r1, [pc, #56]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 800380a:	4313      	orrs	r3, r2
 800380c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800380e:	f000 f821 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 8003812:	4602      	mov	r2, r0
 8003814:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <HAL_RCC_ClockConfig+0x1c4>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	091b      	lsrs	r3, r3, #4
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	490a      	ldr	r1, [pc, #40]	; (8003848 <HAL_RCC_ClockConfig+0x1c8>)
 8003820:	5ccb      	ldrb	r3, [r1, r3]
 8003822:	fa22 f303 	lsr.w	r3, r2, r3
 8003826:	4a09      	ldr	r2, [pc, #36]	; (800384c <HAL_RCC_ClockConfig+0x1cc>)
 8003828:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800382a:	4b09      	ldr	r3, [pc, #36]	; (8003850 <HAL_RCC_ClockConfig+0x1d0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f7fe fd5a 	bl	80022e8 <HAL_InitTick>

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40022000 	.word	0x40022000
 8003844:	40021000 	.word	0x40021000
 8003848:	08008820 	.word	0x08008820
 800384c:	20000020 	.word	0x20000020
 8003850:	20000024 	.word	0x20000024

08003854 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003854:	b490      	push	{r4, r7}
 8003856:	b08a      	sub	sp, #40	; 0x28
 8003858:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800385a:	4b29      	ldr	r3, [pc, #164]	; (8003900 <HAL_RCC_GetSysClockFreq+0xac>)
 800385c:	1d3c      	adds	r4, r7, #4
 800385e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003860:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003864:	f240 2301 	movw	r3, #513	; 0x201
 8003868:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800386a:	2300      	movs	r3, #0
 800386c:	61fb      	str	r3, [r7, #28]
 800386e:	2300      	movs	r3, #0
 8003870:	61bb      	str	r3, [r7, #24]
 8003872:	2300      	movs	r3, #0
 8003874:	627b      	str	r3, [r7, #36]	; 0x24
 8003876:	2300      	movs	r3, #0
 8003878:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800387a:	2300      	movs	r3, #0
 800387c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800387e:	4b21      	ldr	r3, [pc, #132]	; (8003904 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	f003 030c 	and.w	r3, r3, #12
 800388a:	2b04      	cmp	r3, #4
 800388c:	d002      	beq.n	8003894 <HAL_RCC_GetSysClockFreq+0x40>
 800388e:	2b08      	cmp	r3, #8
 8003890:	d003      	beq.n	800389a <HAL_RCC_GetSysClockFreq+0x46>
 8003892:	e02b      	b.n	80038ec <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003894:	4b1c      	ldr	r3, [pc, #112]	; (8003908 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003896:	623b      	str	r3, [r7, #32]
      break;
 8003898:	e02b      	b.n	80038f2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	0c9b      	lsrs	r3, r3, #18
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	3328      	adds	r3, #40	; 0x28
 80038a4:	443b      	add	r3, r7
 80038a6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80038aa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d012      	beq.n	80038dc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038b6:	4b13      	ldr	r3, [pc, #76]	; (8003904 <HAL_RCC_GetSysClockFreq+0xb0>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	0c5b      	lsrs	r3, r3, #17
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	3328      	adds	r3, #40	; 0x28
 80038c2:	443b      	add	r3, r7
 80038c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80038c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	4a0e      	ldr	r2, [pc, #56]	; (8003908 <HAL_RCC_GetSysClockFreq+0xb4>)
 80038ce:	fb03 f202 	mul.w	r2, r3, r2
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d8:	627b      	str	r3, [r7, #36]	; 0x24
 80038da:	e004      	b.n	80038e6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	4a0b      	ldr	r2, [pc, #44]	; (800390c <HAL_RCC_GetSysClockFreq+0xb8>)
 80038e0:	fb02 f303 	mul.w	r3, r2, r3
 80038e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	623b      	str	r3, [r7, #32]
      break;
 80038ea:	e002      	b.n	80038f2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038ec:	4b06      	ldr	r3, [pc, #24]	; (8003908 <HAL_RCC_GetSysClockFreq+0xb4>)
 80038ee:	623b      	str	r3, [r7, #32]
      break;
 80038f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038f2:	6a3b      	ldr	r3, [r7, #32]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3728      	adds	r7, #40	; 0x28
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bc90      	pop	{r4, r7}
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	0800540c 	.word	0x0800540c
 8003904:	40021000 	.word	0x40021000
 8003908:	007a1200 	.word	0x007a1200
 800390c:	003d0900 	.word	0x003d0900

08003910 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003914:	4b02      	ldr	r3, [pc, #8]	; (8003920 <HAL_RCC_GetHCLKFreq+0x10>)
 8003916:	681b      	ldr	r3, [r3, #0]
}
 8003918:	4618      	mov	r0, r3
 800391a:	46bd      	mov	sp, r7
 800391c:	bc80      	pop	{r7}
 800391e:	4770      	bx	lr
 8003920:	20000020 	.word	0x20000020

08003924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003928:	f7ff fff2 	bl	8003910 <HAL_RCC_GetHCLKFreq>
 800392c:	4602      	mov	r2, r0
 800392e:	4b05      	ldr	r3, [pc, #20]	; (8003944 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	0a1b      	lsrs	r3, r3, #8
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	4903      	ldr	r1, [pc, #12]	; (8003948 <HAL_RCC_GetPCLK1Freq+0x24>)
 800393a:	5ccb      	ldrb	r3, [r1, r3]
 800393c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003940:	4618      	mov	r0, r3
 8003942:	bd80      	pop	{r7, pc}
 8003944:	40021000 	.word	0x40021000
 8003948:	08008830 	.word	0x08008830

0800394c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003954:	4b0a      	ldr	r3, [pc, #40]	; (8003980 <RCC_Delay+0x34>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a0a      	ldr	r2, [pc, #40]	; (8003984 <RCC_Delay+0x38>)
 800395a:	fba2 2303 	umull	r2, r3, r2, r3
 800395e:	0a5b      	lsrs	r3, r3, #9
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	fb02 f303 	mul.w	r3, r2, r3
 8003966:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003968:	bf00      	nop
  }
  while (Delay --);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	1e5a      	subs	r2, r3, #1
 800396e:	60fa      	str	r2, [r7, #12]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1f9      	bne.n	8003968 <RCC_Delay+0x1c>
}
 8003974:	bf00      	nop
 8003976:	bf00      	nop
 8003978:	3714      	adds	r7, #20
 800397a:	46bd      	mov	sp, r7
 800397c:	bc80      	pop	{r7}
 800397e:	4770      	bx	lr
 8003980:	20000020 	.word	0x20000020
 8003984:	10624dd3 	.word	0x10624dd3

08003988 <__errno>:
 8003988:	4b01      	ldr	r3, [pc, #4]	; (8003990 <__errno+0x8>)
 800398a:	6818      	ldr	r0, [r3, #0]
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	2000002c 	.word	0x2000002c

08003994 <__libc_init_array>:
 8003994:	b570      	push	{r4, r5, r6, lr}
 8003996:	2600      	movs	r6, #0
 8003998:	4d0c      	ldr	r5, [pc, #48]	; (80039cc <__libc_init_array+0x38>)
 800399a:	4c0d      	ldr	r4, [pc, #52]	; (80039d0 <__libc_init_array+0x3c>)
 800399c:	1b64      	subs	r4, r4, r5
 800399e:	10a4      	asrs	r4, r4, #2
 80039a0:	42a6      	cmp	r6, r4
 80039a2:	d109      	bne.n	80039b8 <__libc_init_array+0x24>
 80039a4:	f001 fcee 	bl	8005384 <_init>
 80039a8:	2600      	movs	r6, #0
 80039aa:	4d0a      	ldr	r5, [pc, #40]	; (80039d4 <__libc_init_array+0x40>)
 80039ac:	4c0a      	ldr	r4, [pc, #40]	; (80039d8 <__libc_init_array+0x44>)
 80039ae:	1b64      	subs	r4, r4, r5
 80039b0:	10a4      	asrs	r4, r4, #2
 80039b2:	42a6      	cmp	r6, r4
 80039b4:	d105      	bne.n	80039c2 <__libc_init_array+0x2e>
 80039b6:	bd70      	pop	{r4, r5, r6, pc}
 80039b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80039bc:	4798      	blx	r3
 80039be:	3601      	adds	r6, #1
 80039c0:	e7ee      	b.n	80039a0 <__libc_init_array+0xc>
 80039c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80039c6:	4798      	blx	r3
 80039c8:	3601      	adds	r6, #1
 80039ca:	e7f2      	b.n	80039b2 <__libc_init_array+0x1e>
 80039cc:	08008a48 	.word	0x08008a48
 80039d0:	08008a48 	.word	0x08008a48
 80039d4:	08008a48 	.word	0x08008a48
 80039d8:	08008a4c 	.word	0x08008a4c

080039dc <memcpy>:
 80039dc:	440a      	add	r2, r1
 80039de:	4291      	cmp	r1, r2
 80039e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80039e4:	d100      	bne.n	80039e8 <memcpy+0xc>
 80039e6:	4770      	bx	lr
 80039e8:	b510      	push	{r4, lr}
 80039ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039ee:	4291      	cmp	r1, r2
 80039f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039f4:	d1f9      	bne.n	80039ea <memcpy+0xe>
 80039f6:	bd10      	pop	{r4, pc}

080039f8 <memmove>:
 80039f8:	4288      	cmp	r0, r1
 80039fa:	b510      	push	{r4, lr}
 80039fc:	eb01 0402 	add.w	r4, r1, r2
 8003a00:	d902      	bls.n	8003a08 <memmove+0x10>
 8003a02:	4284      	cmp	r4, r0
 8003a04:	4623      	mov	r3, r4
 8003a06:	d807      	bhi.n	8003a18 <memmove+0x20>
 8003a08:	1e43      	subs	r3, r0, #1
 8003a0a:	42a1      	cmp	r1, r4
 8003a0c:	d008      	beq.n	8003a20 <memmove+0x28>
 8003a0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a16:	e7f8      	b.n	8003a0a <memmove+0x12>
 8003a18:	4601      	mov	r1, r0
 8003a1a:	4402      	add	r2, r0
 8003a1c:	428a      	cmp	r2, r1
 8003a1e:	d100      	bne.n	8003a22 <memmove+0x2a>
 8003a20:	bd10      	pop	{r4, pc}
 8003a22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a2a:	e7f7      	b.n	8003a1c <memmove+0x24>

08003a2c <memset>:
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	4402      	add	r2, r0
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d100      	bne.n	8003a36 <memset+0xa>
 8003a34:	4770      	bx	lr
 8003a36:	f803 1b01 	strb.w	r1, [r3], #1
 8003a3a:	e7f9      	b.n	8003a30 <memset+0x4>

08003a3c <sniprintf>:
 8003a3c:	b40c      	push	{r2, r3}
 8003a3e:	b530      	push	{r4, r5, lr}
 8003a40:	4b17      	ldr	r3, [pc, #92]	; (8003aa0 <sniprintf+0x64>)
 8003a42:	1e0c      	subs	r4, r1, #0
 8003a44:	681d      	ldr	r5, [r3, #0]
 8003a46:	b09d      	sub	sp, #116	; 0x74
 8003a48:	da08      	bge.n	8003a5c <sniprintf+0x20>
 8003a4a:	238b      	movs	r3, #139	; 0x8b
 8003a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a50:	602b      	str	r3, [r5, #0]
 8003a52:	b01d      	add	sp, #116	; 0x74
 8003a54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a58:	b002      	add	sp, #8
 8003a5a:	4770      	bx	lr
 8003a5c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003a60:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003a64:	bf0c      	ite	eq
 8003a66:	4623      	moveq	r3, r4
 8003a68:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003a6c:	9304      	str	r3, [sp, #16]
 8003a6e:	9307      	str	r3, [sp, #28]
 8003a70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a74:	9002      	str	r0, [sp, #8]
 8003a76:	9006      	str	r0, [sp, #24]
 8003a78:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003a7c:	4628      	mov	r0, r5
 8003a7e:	ab21      	add	r3, sp, #132	; 0x84
 8003a80:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003a82:	a902      	add	r1, sp, #8
 8003a84:	9301      	str	r3, [sp, #4]
 8003a86:	f000 f869 	bl	8003b5c <_svfiprintf_r>
 8003a8a:	1c43      	adds	r3, r0, #1
 8003a8c:	bfbc      	itt	lt
 8003a8e:	238b      	movlt	r3, #139	; 0x8b
 8003a90:	602b      	strlt	r3, [r5, #0]
 8003a92:	2c00      	cmp	r4, #0
 8003a94:	d0dd      	beq.n	8003a52 <sniprintf+0x16>
 8003a96:	2200      	movs	r2, #0
 8003a98:	9b02      	ldr	r3, [sp, #8]
 8003a9a:	701a      	strb	r2, [r3, #0]
 8003a9c:	e7d9      	b.n	8003a52 <sniprintf+0x16>
 8003a9e:	bf00      	nop
 8003aa0:	2000002c 	.word	0x2000002c

08003aa4 <__ssputs_r>:
 8003aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aa8:	688e      	ldr	r6, [r1, #8]
 8003aaa:	4682      	mov	sl, r0
 8003aac:	429e      	cmp	r6, r3
 8003aae:	460c      	mov	r4, r1
 8003ab0:	4690      	mov	r8, r2
 8003ab2:	461f      	mov	r7, r3
 8003ab4:	d838      	bhi.n	8003b28 <__ssputs_r+0x84>
 8003ab6:	898a      	ldrh	r2, [r1, #12]
 8003ab8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003abc:	d032      	beq.n	8003b24 <__ssputs_r+0x80>
 8003abe:	6825      	ldr	r5, [r4, #0]
 8003ac0:	6909      	ldr	r1, [r1, #16]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	eba5 0901 	sub.w	r9, r5, r1
 8003ac8:	6965      	ldr	r5, [r4, #20]
 8003aca:	444b      	add	r3, r9
 8003acc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ad0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ad4:	106d      	asrs	r5, r5, #1
 8003ad6:	429d      	cmp	r5, r3
 8003ad8:	bf38      	it	cc
 8003ada:	461d      	movcc	r5, r3
 8003adc:	0553      	lsls	r3, r2, #21
 8003ade:	d531      	bpl.n	8003b44 <__ssputs_r+0xa0>
 8003ae0:	4629      	mov	r1, r5
 8003ae2:	f000 fb47 	bl	8004174 <_malloc_r>
 8003ae6:	4606      	mov	r6, r0
 8003ae8:	b950      	cbnz	r0, 8003b00 <__ssputs_r+0x5c>
 8003aea:	230c      	movs	r3, #12
 8003aec:	f04f 30ff 	mov.w	r0, #4294967295
 8003af0:	f8ca 3000 	str.w	r3, [sl]
 8003af4:	89a3      	ldrh	r3, [r4, #12]
 8003af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003afa:	81a3      	strh	r3, [r4, #12]
 8003afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b00:	464a      	mov	r2, r9
 8003b02:	6921      	ldr	r1, [r4, #16]
 8003b04:	f7ff ff6a 	bl	80039dc <memcpy>
 8003b08:	89a3      	ldrh	r3, [r4, #12]
 8003b0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b12:	81a3      	strh	r3, [r4, #12]
 8003b14:	6126      	str	r6, [r4, #16]
 8003b16:	444e      	add	r6, r9
 8003b18:	6026      	str	r6, [r4, #0]
 8003b1a:	463e      	mov	r6, r7
 8003b1c:	6165      	str	r5, [r4, #20]
 8003b1e:	eba5 0509 	sub.w	r5, r5, r9
 8003b22:	60a5      	str	r5, [r4, #8]
 8003b24:	42be      	cmp	r6, r7
 8003b26:	d900      	bls.n	8003b2a <__ssputs_r+0x86>
 8003b28:	463e      	mov	r6, r7
 8003b2a:	4632      	mov	r2, r6
 8003b2c:	4641      	mov	r1, r8
 8003b2e:	6820      	ldr	r0, [r4, #0]
 8003b30:	f7ff ff62 	bl	80039f8 <memmove>
 8003b34:	68a3      	ldr	r3, [r4, #8]
 8003b36:	2000      	movs	r0, #0
 8003b38:	1b9b      	subs	r3, r3, r6
 8003b3a:	60a3      	str	r3, [r4, #8]
 8003b3c:	6823      	ldr	r3, [r4, #0]
 8003b3e:	4433      	add	r3, r6
 8003b40:	6023      	str	r3, [r4, #0]
 8003b42:	e7db      	b.n	8003afc <__ssputs_r+0x58>
 8003b44:	462a      	mov	r2, r5
 8003b46:	f000 fb89 	bl	800425c <_realloc_r>
 8003b4a:	4606      	mov	r6, r0
 8003b4c:	2800      	cmp	r0, #0
 8003b4e:	d1e1      	bne.n	8003b14 <__ssputs_r+0x70>
 8003b50:	4650      	mov	r0, sl
 8003b52:	6921      	ldr	r1, [r4, #16]
 8003b54:	f000 faa6 	bl	80040a4 <_free_r>
 8003b58:	e7c7      	b.n	8003aea <__ssputs_r+0x46>
	...

08003b5c <_svfiprintf_r>:
 8003b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b60:	4698      	mov	r8, r3
 8003b62:	898b      	ldrh	r3, [r1, #12]
 8003b64:	4607      	mov	r7, r0
 8003b66:	061b      	lsls	r3, r3, #24
 8003b68:	460d      	mov	r5, r1
 8003b6a:	4614      	mov	r4, r2
 8003b6c:	b09d      	sub	sp, #116	; 0x74
 8003b6e:	d50e      	bpl.n	8003b8e <_svfiprintf_r+0x32>
 8003b70:	690b      	ldr	r3, [r1, #16]
 8003b72:	b963      	cbnz	r3, 8003b8e <_svfiprintf_r+0x32>
 8003b74:	2140      	movs	r1, #64	; 0x40
 8003b76:	f000 fafd 	bl	8004174 <_malloc_r>
 8003b7a:	6028      	str	r0, [r5, #0]
 8003b7c:	6128      	str	r0, [r5, #16]
 8003b7e:	b920      	cbnz	r0, 8003b8a <_svfiprintf_r+0x2e>
 8003b80:	230c      	movs	r3, #12
 8003b82:	603b      	str	r3, [r7, #0]
 8003b84:	f04f 30ff 	mov.w	r0, #4294967295
 8003b88:	e0d1      	b.n	8003d2e <_svfiprintf_r+0x1d2>
 8003b8a:	2340      	movs	r3, #64	; 0x40
 8003b8c:	616b      	str	r3, [r5, #20]
 8003b8e:	2300      	movs	r3, #0
 8003b90:	9309      	str	r3, [sp, #36]	; 0x24
 8003b92:	2320      	movs	r3, #32
 8003b94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b98:	2330      	movs	r3, #48	; 0x30
 8003b9a:	f04f 0901 	mov.w	r9, #1
 8003b9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ba2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003d48 <_svfiprintf_r+0x1ec>
 8003ba6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003baa:	4623      	mov	r3, r4
 8003bac:	469a      	mov	sl, r3
 8003bae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bb2:	b10a      	cbz	r2, 8003bb8 <_svfiprintf_r+0x5c>
 8003bb4:	2a25      	cmp	r2, #37	; 0x25
 8003bb6:	d1f9      	bne.n	8003bac <_svfiprintf_r+0x50>
 8003bb8:	ebba 0b04 	subs.w	fp, sl, r4
 8003bbc:	d00b      	beq.n	8003bd6 <_svfiprintf_r+0x7a>
 8003bbe:	465b      	mov	r3, fp
 8003bc0:	4622      	mov	r2, r4
 8003bc2:	4629      	mov	r1, r5
 8003bc4:	4638      	mov	r0, r7
 8003bc6:	f7ff ff6d 	bl	8003aa4 <__ssputs_r>
 8003bca:	3001      	adds	r0, #1
 8003bcc:	f000 80aa 	beq.w	8003d24 <_svfiprintf_r+0x1c8>
 8003bd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003bd2:	445a      	add	r2, fp
 8003bd4:	9209      	str	r2, [sp, #36]	; 0x24
 8003bd6:	f89a 3000 	ldrb.w	r3, [sl]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 80a2 	beq.w	8003d24 <_svfiprintf_r+0x1c8>
 8003be0:	2300      	movs	r3, #0
 8003be2:	f04f 32ff 	mov.w	r2, #4294967295
 8003be6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bea:	f10a 0a01 	add.w	sl, sl, #1
 8003bee:	9304      	str	r3, [sp, #16]
 8003bf0:	9307      	str	r3, [sp, #28]
 8003bf2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003bf6:	931a      	str	r3, [sp, #104]	; 0x68
 8003bf8:	4654      	mov	r4, sl
 8003bfa:	2205      	movs	r2, #5
 8003bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c00:	4851      	ldr	r0, [pc, #324]	; (8003d48 <_svfiprintf_r+0x1ec>)
 8003c02:	f000 fa41 	bl	8004088 <memchr>
 8003c06:	9a04      	ldr	r2, [sp, #16]
 8003c08:	b9d8      	cbnz	r0, 8003c42 <_svfiprintf_r+0xe6>
 8003c0a:	06d0      	lsls	r0, r2, #27
 8003c0c:	bf44      	itt	mi
 8003c0e:	2320      	movmi	r3, #32
 8003c10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c14:	0711      	lsls	r1, r2, #28
 8003c16:	bf44      	itt	mi
 8003c18:	232b      	movmi	r3, #43	; 0x2b
 8003c1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c1e:	f89a 3000 	ldrb.w	r3, [sl]
 8003c22:	2b2a      	cmp	r3, #42	; 0x2a
 8003c24:	d015      	beq.n	8003c52 <_svfiprintf_r+0xf6>
 8003c26:	4654      	mov	r4, sl
 8003c28:	2000      	movs	r0, #0
 8003c2a:	f04f 0c0a 	mov.w	ip, #10
 8003c2e:	9a07      	ldr	r2, [sp, #28]
 8003c30:	4621      	mov	r1, r4
 8003c32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c36:	3b30      	subs	r3, #48	; 0x30
 8003c38:	2b09      	cmp	r3, #9
 8003c3a:	d94e      	bls.n	8003cda <_svfiprintf_r+0x17e>
 8003c3c:	b1b0      	cbz	r0, 8003c6c <_svfiprintf_r+0x110>
 8003c3e:	9207      	str	r2, [sp, #28]
 8003c40:	e014      	b.n	8003c6c <_svfiprintf_r+0x110>
 8003c42:	eba0 0308 	sub.w	r3, r0, r8
 8003c46:	fa09 f303 	lsl.w	r3, r9, r3
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	46a2      	mov	sl, r4
 8003c4e:	9304      	str	r3, [sp, #16]
 8003c50:	e7d2      	b.n	8003bf8 <_svfiprintf_r+0x9c>
 8003c52:	9b03      	ldr	r3, [sp, #12]
 8003c54:	1d19      	adds	r1, r3, #4
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	9103      	str	r1, [sp, #12]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	bfbb      	ittet	lt
 8003c5e:	425b      	neglt	r3, r3
 8003c60:	f042 0202 	orrlt.w	r2, r2, #2
 8003c64:	9307      	strge	r3, [sp, #28]
 8003c66:	9307      	strlt	r3, [sp, #28]
 8003c68:	bfb8      	it	lt
 8003c6a:	9204      	strlt	r2, [sp, #16]
 8003c6c:	7823      	ldrb	r3, [r4, #0]
 8003c6e:	2b2e      	cmp	r3, #46	; 0x2e
 8003c70:	d10c      	bne.n	8003c8c <_svfiprintf_r+0x130>
 8003c72:	7863      	ldrb	r3, [r4, #1]
 8003c74:	2b2a      	cmp	r3, #42	; 0x2a
 8003c76:	d135      	bne.n	8003ce4 <_svfiprintf_r+0x188>
 8003c78:	9b03      	ldr	r3, [sp, #12]
 8003c7a:	3402      	adds	r4, #2
 8003c7c:	1d1a      	adds	r2, r3, #4
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	9203      	str	r2, [sp, #12]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	bfb8      	it	lt
 8003c86:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c8a:	9305      	str	r3, [sp, #20]
 8003c8c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003d4c <_svfiprintf_r+0x1f0>
 8003c90:	2203      	movs	r2, #3
 8003c92:	4650      	mov	r0, sl
 8003c94:	7821      	ldrb	r1, [r4, #0]
 8003c96:	f000 f9f7 	bl	8004088 <memchr>
 8003c9a:	b140      	cbz	r0, 8003cae <_svfiprintf_r+0x152>
 8003c9c:	2340      	movs	r3, #64	; 0x40
 8003c9e:	eba0 000a 	sub.w	r0, r0, sl
 8003ca2:	fa03 f000 	lsl.w	r0, r3, r0
 8003ca6:	9b04      	ldr	r3, [sp, #16]
 8003ca8:	3401      	adds	r4, #1
 8003caa:	4303      	orrs	r3, r0
 8003cac:	9304      	str	r3, [sp, #16]
 8003cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cb2:	2206      	movs	r2, #6
 8003cb4:	4826      	ldr	r0, [pc, #152]	; (8003d50 <_svfiprintf_r+0x1f4>)
 8003cb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003cba:	f000 f9e5 	bl	8004088 <memchr>
 8003cbe:	2800      	cmp	r0, #0
 8003cc0:	d038      	beq.n	8003d34 <_svfiprintf_r+0x1d8>
 8003cc2:	4b24      	ldr	r3, [pc, #144]	; (8003d54 <_svfiprintf_r+0x1f8>)
 8003cc4:	bb1b      	cbnz	r3, 8003d0e <_svfiprintf_r+0x1b2>
 8003cc6:	9b03      	ldr	r3, [sp, #12]
 8003cc8:	3307      	adds	r3, #7
 8003cca:	f023 0307 	bic.w	r3, r3, #7
 8003cce:	3308      	adds	r3, #8
 8003cd0:	9303      	str	r3, [sp, #12]
 8003cd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cd4:	4433      	add	r3, r6
 8003cd6:	9309      	str	r3, [sp, #36]	; 0x24
 8003cd8:	e767      	b.n	8003baa <_svfiprintf_r+0x4e>
 8003cda:	460c      	mov	r4, r1
 8003cdc:	2001      	movs	r0, #1
 8003cde:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ce2:	e7a5      	b.n	8003c30 <_svfiprintf_r+0xd4>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f04f 0c0a 	mov.w	ip, #10
 8003cea:	4619      	mov	r1, r3
 8003cec:	3401      	adds	r4, #1
 8003cee:	9305      	str	r3, [sp, #20]
 8003cf0:	4620      	mov	r0, r4
 8003cf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cf6:	3a30      	subs	r2, #48	; 0x30
 8003cf8:	2a09      	cmp	r2, #9
 8003cfa:	d903      	bls.n	8003d04 <_svfiprintf_r+0x1a8>
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0c5      	beq.n	8003c8c <_svfiprintf_r+0x130>
 8003d00:	9105      	str	r1, [sp, #20]
 8003d02:	e7c3      	b.n	8003c8c <_svfiprintf_r+0x130>
 8003d04:	4604      	mov	r4, r0
 8003d06:	2301      	movs	r3, #1
 8003d08:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d0c:	e7f0      	b.n	8003cf0 <_svfiprintf_r+0x194>
 8003d0e:	ab03      	add	r3, sp, #12
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	462a      	mov	r2, r5
 8003d14:	4638      	mov	r0, r7
 8003d16:	4b10      	ldr	r3, [pc, #64]	; (8003d58 <_svfiprintf_r+0x1fc>)
 8003d18:	a904      	add	r1, sp, #16
 8003d1a:	f3af 8000 	nop.w
 8003d1e:	1c42      	adds	r2, r0, #1
 8003d20:	4606      	mov	r6, r0
 8003d22:	d1d6      	bne.n	8003cd2 <_svfiprintf_r+0x176>
 8003d24:	89ab      	ldrh	r3, [r5, #12]
 8003d26:	065b      	lsls	r3, r3, #25
 8003d28:	f53f af2c 	bmi.w	8003b84 <_svfiprintf_r+0x28>
 8003d2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d2e:	b01d      	add	sp, #116	; 0x74
 8003d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d34:	ab03      	add	r3, sp, #12
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	462a      	mov	r2, r5
 8003d3a:	4638      	mov	r0, r7
 8003d3c:	4b06      	ldr	r3, [pc, #24]	; (8003d58 <_svfiprintf_r+0x1fc>)
 8003d3e:	a904      	add	r1, sp, #16
 8003d40:	f000 f87c 	bl	8003e3c <_printf_i>
 8003d44:	e7eb      	b.n	8003d1e <_svfiprintf_r+0x1c2>
 8003d46:	bf00      	nop
 8003d48:	08008838 	.word	0x08008838
 8003d4c:	0800883e 	.word	0x0800883e
 8003d50:	08008842 	.word	0x08008842
 8003d54:	00000000 	.word	0x00000000
 8003d58:	08003aa5 	.word	0x08003aa5

08003d5c <_printf_common>:
 8003d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d60:	4616      	mov	r6, r2
 8003d62:	4699      	mov	r9, r3
 8003d64:	688a      	ldr	r2, [r1, #8]
 8003d66:	690b      	ldr	r3, [r1, #16]
 8003d68:	4607      	mov	r7, r0
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	bfb8      	it	lt
 8003d6e:	4613      	movlt	r3, r2
 8003d70:	6033      	str	r3, [r6, #0]
 8003d72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d76:	460c      	mov	r4, r1
 8003d78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d7c:	b10a      	cbz	r2, 8003d82 <_printf_common+0x26>
 8003d7e:	3301      	adds	r3, #1
 8003d80:	6033      	str	r3, [r6, #0]
 8003d82:	6823      	ldr	r3, [r4, #0]
 8003d84:	0699      	lsls	r1, r3, #26
 8003d86:	bf42      	ittt	mi
 8003d88:	6833      	ldrmi	r3, [r6, #0]
 8003d8a:	3302      	addmi	r3, #2
 8003d8c:	6033      	strmi	r3, [r6, #0]
 8003d8e:	6825      	ldr	r5, [r4, #0]
 8003d90:	f015 0506 	ands.w	r5, r5, #6
 8003d94:	d106      	bne.n	8003da4 <_printf_common+0x48>
 8003d96:	f104 0a19 	add.w	sl, r4, #25
 8003d9a:	68e3      	ldr	r3, [r4, #12]
 8003d9c:	6832      	ldr	r2, [r6, #0]
 8003d9e:	1a9b      	subs	r3, r3, r2
 8003da0:	42ab      	cmp	r3, r5
 8003da2:	dc28      	bgt.n	8003df6 <_printf_common+0x9a>
 8003da4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003da8:	1e13      	subs	r3, r2, #0
 8003daa:	6822      	ldr	r2, [r4, #0]
 8003dac:	bf18      	it	ne
 8003dae:	2301      	movne	r3, #1
 8003db0:	0692      	lsls	r2, r2, #26
 8003db2:	d42d      	bmi.n	8003e10 <_printf_common+0xb4>
 8003db4:	4649      	mov	r1, r9
 8003db6:	4638      	mov	r0, r7
 8003db8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003dbc:	47c0      	blx	r8
 8003dbe:	3001      	adds	r0, #1
 8003dc0:	d020      	beq.n	8003e04 <_printf_common+0xa8>
 8003dc2:	6823      	ldr	r3, [r4, #0]
 8003dc4:	68e5      	ldr	r5, [r4, #12]
 8003dc6:	f003 0306 	and.w	r3, r3, #6
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	bf18      	it	ne
 8003dce:	2500      	movne	r5, #0
 8003dd0:	6832      	ldr	r2, [r6, #0]
 8003dd2:	f04f 0600 	mov.w	r6, #0
 8003dd6:	68a3      	ldr	r3, [r4, #8]
 8003dd8:	bf08      	it	eq
 8003dda:	1aad      	subeq	r5, r5, r2
 8003ddc:	6922      	ldr	r2, [r4, #16]
 8003dde:	bf08      	it	eq
 8003de0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003de4:	4293      	cmp	r3, r2
 8003de6:	bfc4      	itt	gt
 8003de8:	1a9b      	subgt	r3, r3, r2
 8003dea:	18ed      	addgt	r5, r5, r3
 8003dec:	341a      	adds	r4, #26
 8003dee:	42b5      	cmp	r5, r6
 8003df0:	d11a      	bne.n	8003e28 <_printf_common+0xcc>
 8003df2:	2000      	movs	r0, #0
 8003df4:	e008      	b.n	8003e08 <_printf_common+0xac>
 8003df6:	2301      	movs	r3, #1
 8003df8:	4652      	mov	r2, sl
 8003dfa:	4649      	mov	r1, r9
 8003dfc:	4638      	mov	r0, r7
 8003dfe:	47c0      	blx	r8
 8003e00:	3001      	adds	r0, #1
 8003e02:	d103      	bne.n	8003e0c <_printf_common+0xb0>
 8003e04:	f04f 30ff 	mov.w	r0, #4294967295
 8003e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e0c:	3501      	adds	r5, #1
 8003e0e:	e7c4      	b.n	8003d9a <_printf_common+0x3e>
 8003e10:	2030      	movs	r0, #48	; 0x30
 8003e12:	18e1      	adds	r1, r4, r3
 8003e14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e1e:	4422      	add	r2, r4
 8003e20:	3302      	adds	r3, #2
 8003e22:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e26:	e7c5      	b.n	8003db4 <_printf_common+0x58>
 8003e28:	2301      	movs	r3, #1
 8003e2a:	4622      	mov	r2, r4
 8003e2c:	4649      	mov	r1, r9
 8003e2e:	4638      	mov	r0, r7
 8003e30:	47c0      	blx	r8
 8003e32:	3001      	adds	r0, #1
 8003e34:	d0e6      	beq.n	8003e04 <_printf_common+0xa8>
 8003e36:	3601      	adds	r6, #1
 8003e38:	e7d9      	b.n	8003dee <_printf_common+0x92>
	...

08003e3c <_printf_i>:
 8003e3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e40:	7e0f      	ldrb	r7, [r1, #24]
 8003e42:	4691      	mov	r9, r2
 8003e44:	2f78      	cmp	r7, #120	; 0x78
 8003e46:	4680      	mov	r8, r0
 8003e48:	460c      	mov	r4, r1
 8003e4a:	469a      	mov	sl, r3
 8003e4c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e52:	d807      	bhi.n	8003e64 <_printf_i+0x28>
 8003e54:	2f62      	cmp	r7, #98	; 0x62
 8003e56:	d80a      	bhi.n	8003e6e <_printf_i+0x32>
 8003e58:	2f00      	cmp	r7, #0
 8003e5a:	f000 80d9 	beq.w	8004010 <_printf_i+0x1d4>
 8003e5e:	2f58      	cmp	r7, #88	; 0x58
 8003e60:	f000 80a4 	beq.w	8003fac <_printf_i+0x170>
 8003e64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e6c:	e03a      	b.n	8003ee4 <_printf_i+0xa8>
 8003e6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e72:	2b15      	cmp	r3, #21
 8003e74:	d8f6      	bhi.n	8003e64 <_printf_i+0x28>
 8003e76:	a101      	add	r1, pc, #4	; (adr r1, 8003e7c <_printf_i+0x40>)
 8003e78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e7c:	08003ed5 	.word	0x08003ed5
 8003e80:	08003ee9 	.word	0x08003ee9
 8003e84:	08003e65 	.word	0x08003e65
 8003e88:	08003e65 	.word	0x08003e65
 8003e8c:	08003e65 	.word	0x08003e65
 8003e90:	08003e65 	.word	0x08003e65
 8003e94:	08003ee9 	.word	0x08003ee9
 8003e98:	08003e65 	.word	0x08003e65
 8003e9c:	08003e65 	.word	0x08003e65
 8003ea0:	08003e65 	.word	0x08003e65
 8003ea4:	08003e65 	.word	0x08003e65
 8003ea8:	08003ff7 	.word	0x08003ff7
 8003eac:	08003f19 	.word	0x08003f19
 8003eb0:	08003fd9 	.word	0x08003fd9
 8003eb4:	08003e65 	.word	0x08003e65
 8003eb8:	08003e65 	.word	0x08003e65
 8003ebc:	08004019 	.word	0x08004019
 8003ec0:	08003e65 	.word	0x08003e65
 8003ec4:	08003f19 	.word	0x08003f19
 8003ec8:	08003e65 	.word	0x08003e65
 8003ecc:	08003e65 	.word	0x08003e65
 8003ed0:	08003fe1 	.word	0x08003fe1
 8003ed4:	682b      	ldr	r3, [r5, #0]
 8003ed6:	1d1a      	adds	r2, r3, #4
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	602a      	str	r2, [r5, #0]
 8003edc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ee0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e0a4      	b.n	8004032 <_printf_i+0x1f6>
 8003ee8:	6820      	ldr	r0, [r4, #0]
 8003eea:	6829      	ldr	r1, [r5, #0]
 8003eec:	0606      	lsls	r6, r0, #24
 8003eee:	f101 0304 	add.w	r3, r1, #4
 8003ef2:	d50a      	bpl.n	8003f0a <_printf_i+0xce>
 8003ef4:	680e      	ldr	r6, [r1, #0]
 8003ef6:	602b      	str	r3, [r5, #0]
 8003ef8:	2e00      	cmp	r6, #0
 8003efa:	da03      	bge.n	8003f04 <_printf_i+0xc8>
 8003efc:	232d      	movs	r3, #45	; 0x2d
 8003efe:	4276      	negs	r6, r6
 8003f00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f04:	230a      	movs	r3, #10
 8003f06:	485e      	ldr	r0, [pc, #376]	; (8004080 <_printf_i+0x244>)
 8003f08:	e019      	b.n	8003f3e <_printf_i+0x102>
 8003f0a:	680e      	ldr	r6, [r1, #0]
 8003f0c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f10:	602b      	str	r3, [r5, #0]
 8003f12:	bf18      	it	ne
 8003f14:	b236      	sxthne	r6, r6
 8003f16:	e7ef      	b.n	8003ef8 <_printf_i+0xbc>
 8003f18:	682b      	ldr	r3, [r5, #0]
 8003f1a:	6820      	ldr	r0, [r4, #0]
 8003f1c:	1d19      	adds	r1, r3, #4
 8003f1e:	6029      	str	r1, [r5, #0]
 8003f20:	0601      	lsls	r1, r0, #24
 8003f22:	d501      	bpl.n	8003f28 <_printf_i+0xec>
 8003f24:	681e      	ldr	r6, [r3, #0]
 8003f26:	e002      	b.n	8003f2e <_printf_i+0xf2>
 8003f28:	0646      	lsls	r6, r0, #25
 8003f2a:	d5fb      	bpl.n	8003f24 <_printf_i+0xe8>
 8003f2c:	881e      	ldrh	r6, [r3, #0]
 8003f2e:	2f6f      	cmp	r7, #111	; 0x6f
 8003f30:	bf0c      	ite	eq
 8003f32:	2308      	moveq	r3, #8
 8003f34:	230a      	movne	r3, #10
 8003f36:	4852      	ldr	r0, [pc, #328]	; (8004080 <_printf_i+0x244>)
 8003f38:	2100      	movs	r1, #0
 8003f3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f3e:	6865      	ldr	r5, [r4, #4]
 8003f40:	2d00      	cmp	r5, #0
 8003f42:	bfa8      	it	ge
 8003f44:	6821      	ldrge	r1, [r4, #0]
 8003f46:	60a5      	str	r5, [r4, #8]
 8003f48:	bfa4      	itt	ge
 8003f4a:	f021 0104 	bicge.w	r1, r1, #4
 8003f4e:	6021      	strge	r1, [r4, #0]
 8003f50:	b90e      	cbnz	r6, 8003f56 <_printf_i+0x11a>
 8003f52:	2d00      	cmp	r5, #0
 8003f54:	d04d      	beq.n	8003ff2 <_printf_i+0x1b6>
 8003f56:	4615      	mov	r5, r2
 8003f58:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f5c:	fb03 6711 	mls	r7, r3, r1, r6
 8003f60:	5dc7      	ldrb	r7, [r0, r7]
 8003f62:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f66:	4637      	mov	r7, r6
 8003f68:	42bb      	cmp	r3, r7
 8003f6a:	460e      	mov	r6, r1
 8003f6c:	d9f4      	bls.n	8003f58 <_printf_i+0x11c>
 8003f6e:	2b08      	cmp	r3, #8
 8003f70:	d10b      	bne.n	8003f8a <_printf_i+0x14e>
 8003f72:	6823      	ldr	r3, [r4, #0]
 8003f74:	07de      	lsls	r6, r3, #31
 8003f76:	d508      	bpl.n	8003f8a <_printf_i+0x14e>
 8003f78:	6923      	ldr	r3, [r4, #16]
 8003f7a:	6861      	ldr	r1, [r4, #4]
 8003f7c:	4299      	cmp	r1, r3
 8003f7e:	bfde      	ittt	le
 8003f80:	2330      	movle	r3, #48	; 0x30
 8003f82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f86:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f8a:	1b52      	subs	r2, r2, r5
 8003f8c:	6122      	str	r2, [r4, #16]
 8003f8e:	464b      	mov	r3, r9
 8003f90:	4621      	mov	r1, r4
 8003f92:	4640      	mov	r0, r8
 8003f94:	f8cd a000 	str.w	sl, [sp]
 8003f98:	aa03      	add	r2, sp, #12
 8003f9a:	f7ff fedf 	bl	8003d5c <_printf_common>
 8003f9e:	3001      	adds	r0, #1
 8003fa0:	d14c      	bne.n	800403c <_printf_i+0x200>
 8003fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa6:	b004      	add	sp, #16
 8003fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fac:	4834      	ldr	r0, [pc, #208]	; (8004080 <_printf_i+0x244>)
 8003fae:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003fb2:	6829      	ldr	r1, [r5, #0]
 8003fb4:	6823      	ldr	r3, [r4, #0]
 8003fb6:	f851 6b04 	ldr.w	r6, [r1], #4
 8003fba:	6029      	str	r1, [r5, #0]
 8003fbc:	061d      	lsls	r5, r3, #24
 8003fbe:	d514      	bpl.n	8003fea <_printf_i+0x1ae>
 8003fc0:	07df      	lsls	r7, r3, #31
 8003fc2:	bf44      	itt	mi
 8003fc4:	f043 0320 	orrmi.w	r3, r3, #32
 8003fc8:	6023      	strmi	r3, [r4, #0]
 8003fca:	b91e      	cbnz	r6, 8003fd4 <_printf_i+0x198>
 8003fcc:	6823      	ldr	r3, [r4, #0]
 8003fce:	f023 0320 	bic.w	r3, r3, #32
 8003fd2:	6023      	str	r3, [r4, #0]
 8003fd4:	2310      	movs	r3, #16
 8003fd6:	e7af      	b.n	8003f38 <_printf_i+0xfc>
 8003fd8:	6823      	ldr	r3, [r4, #0]
 8003fda:	f043 0320 	orr.w	r3, r3, #32
 8003fde:	6023      	str	r3, [r4, #0]
 8003fe0:	2378      	movs	r3, #120	; 0x78
 8003fe2:	4828      	ldr	r0, [pc, #160]	; (8004084 <_printf_i+0x248>)
 8003fe4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003fe8:	e7e3      	b.n	8003fb2 <_printf_i+0x176>
 8003fea:	0659      	lsls	r1, r3, #25
 8003fec:	bf48      	it	mi
 8003fee:	b2b6      	uxthmi	r6, r6
 8003ff0:	e7e6      	b.n	8003fc0 <_printf_i+0x184>
 8003ff2:	4615      	mov	r5, r2
 8003ff4:	e7bb      	b.n	8003f6e <_printf_i+0x132>
 8003ff6:	682b      	ldr	r3, [r5, #0]
 8003ff8:	6826      	ldr	r6, [r4, #0]
 8003ffa:	1d18      	adds	r0, r3, #4
 8003ffc:	6961      	ldr	r1, [r4, #20]
 8003ffe:	6028      	str	r0, [r5, #0]
 8004000:	0635      	lsls	r5, r6, #24
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	d501      	bpl.n	800400a <_printf_i+0x1ce>
 8004006:	6019      	str	r1, [r3, #0]
 8004008:	e002      	b.n	8004010 <_printf_i+0x1d4>
 800400a:	0670      	lsls	r0, r6, #25
 800400c:	d5fb      	bpl.n	8004006 <_printf_i+0x1ca>
 800400e:	8019      	strh	r1, [r3, #0]
 8004010:	2300      	movs	r3, #0
 8004012:	4615      	mov	r5, r2
 8004014:	6123      	str	r3, [r4, #16]
 8004016:	e7ba      	b.n	8003f8e <_printf_i+0x152>
 8004018:	682b      	ldr	r3, [r5, #0]
 800401a:	2100      	movs	r1, #0
 800401c:	1d1a      	adds	r2, r3, #4
 800401e:	602a      	str	r2, [r5, #0]
 8004020:	681d      	ldr	r5, [r3, #0]
 8004022:	6862      	ldr	r2, [r4, #4]
 8004024:	4628      	mov	r0, r5
 8004026:	f000 f82f 	bl	8004088 <memchr>
 800402a:	b108      	cbz	r0, 8004030 <_printf_i+0x1f4>
 800402c:	1b40      	subs	r0, r0, r5
 800402e:	6060      	str	r0, [r4, #4]
 8004030:	6863      	ldr	r3, [r4, #4]
 8004032:	6123      	str	r3, [r4, #16]
 8004034:	2300      	movs	r3, #0
 8004036:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800403a:	e7a8      	b.n	8003f8e <_printf_i+0x152>
 800403c:	462a      	mov	r2, r5
 800403e:	4649      	mov	r1, r9
 8004040:	4640      	mov	r0, r8
 8004042:	6923      	ldr	r3, [r4, #16]
 8004044:	47d0      	blx	sl
 8004046:	3001      	adds	r0, #1
 8004048:	d0ab      	beq.n	8003fa2 <_printf_i+0x166>
 800404a:	6823      	ldr	r3, [r4, #0]
 800404c:	079b      	lsls	r3, r3, #30
 800404e:	d413      	bmi.n	8004078 <_printf_i+0x23c>
 8004050:	68e0      	ldr	r0, [r4, #12]
 8004052:	9b03      	ldr	r3, [sp, #12]
 8004054:	4298      	cmp	r0, r3
 8004056:	bfb8      	it	lt
 8004058:	4618      	movlt	r0, r3
 800405a:	e7a4      	b.n	8003fa6 <_printf_i+0x16a>
 800405c:	2301      	movs	r3, #1
 800405e:	4632      	mov	r2, r6
 8004060:	4649      	mov	r1, r9
 8004062:	4640      	mov	r0, r8
 8004064:	47d0      	blx	sl
 8004066:	3001      	adds	r0, #1
 8004068:	d09b      	beq.n	8003fa2 <_printf_i+0x166>
 800406a:	3501      	adds	r5, #1
 800406c:	68e3      	ldr	r3, [r4, #12]
 800406e:	9903      	ldr	r1, [sp, #12]
 8004070:	1a5b      	subs	r3, r3, r1
 8004072:	42ab      	cmp	r3, r5
 8004074:	dcf2      	bgt.n	800405c <_printf_i+0x220>
 8004076:	e7eb      	b.n	8004050 <_printf_i+0x214>
 8004078:	2500      	movs	r5, #0
 800407a:	f104 0619 	add.w	r6, r4, #25
 800407e:	e7f5      	b.n	800406c <_printf_i+0x230>
 8004080:	08008849 	.word	0x08008849
 8004084:	0800885a 	.word	0x0800885a

08004088 <memchr>:
 8004088:	4603      	mov	r3, r0
 800408a:	b510      	push	{r4, lr}
 800408c:	b2c9      	uxtb	r1, r1
 800408e:	4402      	add	r2, r0
 8004090:	4293      	cmp	r3, r2
 8004092:	4618      	mov	r0, r3
 8004094:	d101      	bne.n	800409a <memchr+0x12>
 8004096:	2000      	movs	r0, #0
 8004098:	e003      	b.n	80040a2 <memchr+0x1a>
 800409a:	7804      	ldrb	r4, [r0, #0]
 800409c:	3301      	adds	r3, #1
 800409e:	428c      	cmp	r4, r1
 80040a0:	d1f6      	bne.n	8004090 <memchr+0x8>
 80040a2:	bd10      	pop	{r4, pc}

080040a4 <_free_r>:
 80040a4:	b538      	push	{r3, r4, r5, lr}
 80040a6:	4605      	mov	r5, r0
 80040a8:	2900      	cmp	r1, #0
 80040aa:	d040      	beq.n	800412e <_free_r+0x8a>
 80040ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040b0:	1f0c      	subs	r4, r1, #4
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	bfb8      	it	lt
 80040b6:	18e4      	addlt	r4, r4, r3
 80040b8:	f000 f910 	bl	80042dc <__malloc_lock>
 80040bc:	4a1c      	ldr	r2, [pc, #112]	; (8004130 <_free_r+0x8c>)
 80040be:	6813      	ldr	r3, [r2, #0]
 80040c0:	b933      	cbnz	r3, 80040d0 <_free_r+0x2c>
 80040c2:	6063      	str	r3, [r4, #4]
 80040c4:	6014      	str	r4, [r2, #0]
 80040c6:	4628      	mov	r0, r5
 80040c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040cc:	f000 b90c 	b.w	80042e8 <__malloc_unlock>
 80040d0:	42a3      	cmp	r3, r4
 80040d2:	d908      	bls.n	80040e6 <_free_r+0x42>
 80040d4:	6820      	ldr	r0, [r4, #0]
 80040d6:	1821      	adds	r1, r4, r0
 80040d8:	428b      	cmp	r3, r1
 80040da:	bf01      	itttt	eq
 80040dc:	6819      	ldreq	r1, [r3, #0]
 80040de:	685b      	ldreq	r3, [r3, #4]
 80040e0:	1809      	addeq	r1, r1, r0
 80040e2:	6021      	streq	r1, [r4, #0]
 80040e4:	e7ed      	b.n	80040c2 <_free_r+0x1e>
 80040e6:	461a      	mov	r2, r3
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	b10b      	cbz	r3, 80040f0 <_free_r+0x4c>
 80040ec:	42a3      	cmp	r3, r4
 80040ee:	d9fa      	bls.n	80040e6 <_free_r+0x42>
 80040f0:	6811      	ldr	r1, [r2, #0]
 80040f2:	1850      	adds	r0, r2, r1
 80040f4:	42a0      	cmp	r0, r4
 80040f6:	d10b      	bne.n	8004110 <_free_r+0x6c>
 80040f8:	6820      	ldr	r0, [r4, #0]
 80040fa:	4401      	add	r1, r0
 80040fc:	1850      	adds	r0, r2, r1
 80040fe:	4283      	cmp	r3, r0
 8004100:	6011      	str	r1, [r2, #0]
 8004102:	d1e0      	bne.n	80040c6 <_free_r+0x22>
 8004104:	6818      	ldr	r0, [r3, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	4401      	add	r1, r0
 800410a:	6011      	str	r1, [r2, #0]
 800410c:	6053      	str	r3, [r2, #4]
 800410e:	e7da      	b.n	80040c6 <_free_r+0x22>
 8004110:	d902      	bls.n	8004118 <_free_r+0x74>
 8004112:	230c      	movs	r3, #12
 8004114:	602b      	str	r3, [r5, #0]
 8004116:	e7d6      	b.n	80040c6 <_free_r+0x22>
 8004118:	6820      	ldr	r0, [r4, #0]
 800411a:	1821      	adds	r1, r4, r0
 800411c:	428b      	cmp	r3, r1
 800411e:	bf01      	itttt	eq
 8004120:	6819      	ldreq	r1, [r3, #0]
 8004122:	685b      	ldreq	r3, [r3, #4]
 8004124:	1809      	addeq	r1, r1, r0
 8004126:	6021      	streq	r1, [r4, #0]
 8004128:	6063      	str	r3, [r4, #4]
 800412a:	6054      	str	r4, [r2, #4]
 800412c:	e7cb      	b.n	80040c6 <_free_r+0x22>
 800412e:	bd38      	pop	{r3, r4, r5, pc}
 8004130:	20000510 	.word	0x20000510

08004134 <sbrk_aligned>:
 8004134:	b570      	push	{r4, r5, r6, lr}
 8004136:	4e0e      	ldr	r6, [pc, #56]	; (8004170 <sbrk_aligned+0x3c>)
 8004138:	460c      	mov	r4, r1
 800413a:	6831      	ldr	r1, [r6, #0]
 800413c:	4605      	mov	r5, r0
 800413e:	b911      	cbnz	r1, 8004146 <sbrk_aligned+0x12>
 8004140:	f000 f8bc 	bl	80042bc <_sbrk_r>
 8004144:	6030      	str	r0, [r6, #0]
 8004146:	4621      	mov	r1, r4
 8004148:	4628      	mov	r0, r5
 800414a:	f000 f8b7 	bl	80042bc <_sbrk_r>
 800414e:	1c43      	adds	r3, r0, #1
 8004150:	d00a      	beq.n	8004168 <sbrk_aligned+0x34>
 8004152:	1cc4      	adds	r4, r0, #3
 8004154:	f024 0403 	bic.w	r4, r4, #3
 8004158:	42a0      	cmp	r0, r4
 800415a:	d007      	beq.n	800416c <sbrk_aligned+0x38>
 800415c:	1a21      	subs	r1, r4, r0
 800415e:	4628      	mov	r0, r5
 8004160:	f000 f8ac 	bl	80042bc <_sbrk_r>
 8004164:	3001      	adds	r0, #1
 8004166:	d101      	bne.n	800416c <sbrk_aligned+0x38>
 8004168:	f04f 34ff 	mov.w	r4, #4294967295
 800416c:	4620      	mov	r0, r4
 800416e:	bd70      	pop	{r4, r5, r6, pc}
 8004170:	20000514 	.word	0x20000514

08004174 <_malloc_r>:
 8004174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004178:	1ccd      	adds	r5, r1, #3
 800417a:	f025 0503 	bic.w	r5, r5, #3
 800417e:	3508      	adds	r5, #8
 8004180:	2d0c      	cmp	r5, #12
 8004182:	bf38      	it	cc
 8004184:	250c      	movcc	r5, #12
 8004186:	2d00      	cmp	r5, #0
 8004188:	4607      	mov	r7, r0
 800418a:	db01      	blt.n	8004190 <_malloc_r+0x1c>
 800418c:	42a9      	cmp	r1, r5
 800418e:	d905      	bls.n	800419c <_malloc_r+0x28>
 8004190:	230c      	movs	r3, #12
 8004192:	2600      	movs	r6, #0
 8004194:	603b      	str	r3, [r7, #0]
 8004196:	4630      	mov	r0, r6
 8004198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800419c:	4e2e      	ldr	r6, [pc, #184]	; (8004258 <_malloc_r+0xe4>)
 800419e:	f000 f89d 	bl	80042dc <__malloc_lock>
 80041a2:	6833      	ldr	r3, [r6, #0]
 80041a4:	461c      	mov	r4, r3
 80041a6:	bb34      	cbnz	r4, 80041f6 <_malloc_r+0x82>
 80041a8:	4629      	mov	r1, r5
 80041aa:	4638      	mov	r0, r7
 80041ac:	f7ff ffc2 	bl	8004134 <sbrk_aligned>
 80041b0:	1c43      	adds	r3, r0, #1
 80041b2:	4604      	mov	r4, r0
 80041b4:	d14d      	bne.n	8004252 <_malloc_r+0xde>
 80041b6:	6834      	ldr	r4, [r6, #0]
 80041b8:	4626      	mov	r6, r4
 80041ba:	2e00      	cmp	r6, #0
 80041bc:	d140      	bne.n	8004240 <_malloc_r+0xcc>
 80041be:	6823      	ldr	r3, [r4, #0]
 80041c0:	4631      	mov	r1, r6
 80041c2:	4638      	mov	r0, r7
 80041c4:	eb04 0803 	add.w	r8, r4, r3
 80041c8:	f000 f878 	bl	80042bc <_sbrk_r>
 80041cc:	4580      	cmp	r8, r0
 80041ce:	d13a      	bne.n	8004246 <_malloc_r+0xd2>
 80041d0:	6821      	ldr	r1, [r4, #0]
 80041d2:	3503      	adds	r5, #3
 80041d4:	1a6d      	subs	r5, r5, r1
 80041d6:	f025 0503 	bic.w	r5, r5, #3
 80041da:	3508      	adds	r5, #8
 80041dc:	2d0c      	cmp	r5, #12
 80041de:	bf38      	it	cc
 80041e0:	250c      	movcc	r5, #12
 80041e2:	4638      	mov	r0, r7
 80041e4:	4629      	mov	r1, r5
 80041e6:	f7ff ffa5 	bl	8004134 <sbrk_aligned>
 80041ea:	3001      	adds	r0, #1
 80041ec:	d02b      	beq.n	8004246 <_malloc_r+0xd2>
 80041ee:	6823      	ldr	r3, [r4, #0]
 80041f0:	442b      	add	r3, r5
 80041f2:	6023      	str	r3, [r4, #0]
 80041f4:	e00e      	b.n	8004214 <_malloc_r+0xa0>
 80041f6:	6822      	ldr	r2, [r4, #0]
 80041f8:	1b52      	subs	r2, r2, r5
 80041fa:	d41e      	bmi.n	800423a <_malloc_r+0xc6>
 80041fc:	2a0b      	cmp	r2, #11
 80041fe:	d916      	bls.n	800422e <_malloc_r+0xba>
 8004200:	1961      	adds	r1, r4, r5
 8004202:	42a3      	cmp	r3, r4
 8004204:	6025      	str	r5, [r4, #0]
 8004206:	bf18      	it	ne
 8004208:	6059      	strne	r1, [r3, #4]
 800420a:	6863      	ldr	r3, [r4, #4]
 800420c:	bf08      	it	eq
 800420e:	6031      	streq	r1, [r6, #0]
 8004210:	5162      	str	r2, [r4, r5]
 8004212:	604b      	str	r3, [r1, #4]
 8004214:	4638      	mov	r0, r7
 8004216:	f104 060b 	add.w	r6, r4, #11
 800421a:	f000 f865 	bl	80042e8 <__malloc_unlock>
 800421e:	f026 0607 	bic.w	r6, r6, #7
 8004222:	1d23      	adds	r3, r4, #4
 8004224:	1af2      	subs	r2, r6, r3
 8004226:	d0b6      	beq.n	8004196 <_malloc_r+0x22>
 8004228:	1b9b      	subs	r3, r3, r6
 800422a:	50a3      	str	r3, [r4, r2]
 800422c:	e7b3      	b.n	8004196 <_malloc_r+0x22>
 800422e:	6862      	ldr	r2, [r4, #4]
 8004230:	42a3      	cmp	r3, r4
 8004232:	bf0c      	ite	eq
 8004234:	6032      	streq	r2, [r6, #0]
 8004236:	605a      	strne	r2, [r3, #4]
 8004238:	e7ec      	b.n	8004214 <_malloc_r+0xa0>
 800423a:	4623      	mov	r3, r4
 800423c:	6864      	ldr	r4, [r4, #4]
 800423e:	e7b2      	b.n	80041a6 <_malloc_r+0x32>
 8004240:	4634      	mov	r4, r6
 8004242:	6876      	ldr	r6, [r6, #4]
 8004244:	e7b9      	b.n	80041ba <_malloc_r+0x46>
 8004246:	230c      	movs	r3, #12
 8004248:	4638      	mov	r0, r7
 800424a:	603b      	str	r3, [r7, #0]
 800424c:	f000 f84c 	bl	80042e8 <__malloc_unlock>
 8004250:	e7a1      	b.n	8004196 <_malloc_r+0x22>
 8004252:	6025      	str	r5, [r4, #0]
 8004254:	e7de      	b.n	8004214 <_malloc_r+0xa0>
 8004256:	bf00      	nop
 8004258:	20000510 	.word	0x20000510

0800425c <_realloc_r>:
 800425c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004260:	4680      	mov	r8, r0
 8004262:	4614      	mov	r4, r2
 8004264:	460e      	mov	r6, r1
 8004266:	b921      	cbnz	r1, 8004272 <_realloc_r+0x16>
 8004268:	4611      	mov	r1, r2
 800426a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800426e:	f7ff bf81 	b.w	8004174 <_malloc_r>
 8004272:	b92a      	cbnz	r2, 8004280 <_realloc_r+0x24>
 8004274:	f7ff ff16 	bl	80040a4 <_free_r>
 8004278:	4625      	mov	r5, r4
 800427a:	4628      	mov	r0, r5
 800427c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004280:	f000 f838 	bl	80042f4 <_malloc_usable_size_r>
 8004284:	4284      	cmp	r4, r0
 8004286:	4607      	mov	r7, r0
 8004288:	d802      	bhi.n	8004290 <_realloc_r+0x34>
 800428a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800428e:	d812      	bhi.n	80042b6 <_realloc_r+0x5a>
 8004290:	4621      	mov	r1, r4
 8004292:	4640      	mov	r0, r8
 8004294:	f7ff ff6e 	bl	8004174 <_malloc_r>
 8004298:	4605      	mov	r5, r0
 800429a:	2800      	cmp	r0, #0
 800429c:	d0ed      	beq.n	800427a <_realloc_r+0x1e>
 800429e:	42bc      	cmp	r4, r7
 80042a0:	4622      	mov	r2, r4
 80042a2:	4631      	mov	r1, r6
 80042a4:	bf28      	it	cs
 80042a6:	463a      	movcs	r2, r7
 80042a8:	f7ff fb98 	bl	80039dc <memcpy>
 80042ac:	4631      	mov	r1, r6
 80042ae:	4640      	mov	r0, r8
 80042b0:	f7ff fef8 	bl	80040a4 <_free_r>
 80042b4:	e7e1      	b.n	800427a <_realloc_r+0x1e>
 80042b6:	4635      	mov	r5, r6
 80042b8:	e7df      	b.n	800427a <_realloc_r+0x1e>
	...

080042bc <_sbrk_r>:
 80042bc:	b538      	push	{r3, r4, r5, lr}
 80042be:	2300      	movs	r3, #0
 80042c0:	4d05      	ldr	r5, [pc, #20]	; (80042d8 <_sbrk_r+0x1c>)
 80042c2:	4604      	mov	r4, r0
 80042c4:	4608      	mov	r0, r1
 80042c6:	602b      	str	r3, [r5, #0]
 80042c8:	f7fd ff96 	bl	80021f8 <_sbrk>
 80042cc:	1c43      	adds	r3, r0, #1
 80042ce:	d102      	bne.n	80042d6 <_sbrk_r+0x1a>
 80042d0:	682b      	ldr	r3, [r5, #0]
 80042d2:	b103      	cbz	r3, 80042d6 <_sbrk_r+0x1a>
 80042d4:	6023      	str	r3, [r4, #0]
 80042d6:	bd38      	pop	{r3, r4, r5, pc}
 80042d8:	20000518 	.word	0x20000518

080042dc <__malloc_lock>:
 80042dc:	4801      	ldr	r0, [pc, #4]	; (80042e4 <__malloc_lock+0x8>)
 80042de:	f000 b811 	b.w	8004304 <__retarget_lock_acquire_recursive>
 80042e2:	bf00      	nop
 80042e4:	2000051c 	.word	0x2000051c

080042e8 <__malloc_unlock>:
 80042e8:	4801      	ldr	r0, [pc, #4]	; (80042f0 <__malloc_unlock+0x8>)
 80042ea:	f000 b80c 	b.w	8004306 <__retarget_lock_release_recursive>
 80042ee:	bf00      	nop
 80042f0:	2000051c 	.word	0x2000051c

080042f4 <_malloc_usable_size_r>:
 80042f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042f8:	1f18      	subs	r0, r3, #4
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	bfbc      	itt	lt
 80042fe:	580b      	ldrlt	r3, [r1, r0]
 8004300:	18c0      	addlt	r0, r0, r3
 8004302:	4770      	bx	lr

08004304 <__retarget_lock_acquire_recursive>:
 8004304:	4770      	bx	lr

08004306 <__retarget_lock_release_recursive>:
 8004306:	4770      	bx	lr

08004308 <cos>:
 8004308:	b530      	push	{r4, r5, lr}
 800430a:	4a20      	ldr	r2, [pc, #128]	; (800438c <cos+0x84>)
 800430c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004310:	4293      	cmp	r3, r2
 8004312:	b087      	sub	sp, #28
 8004314:	dc06      	bgt.n	8004324 <cos+0x1c>
 8004316:	2200      	movs	r2, #0
 8004318:	2300      	movs	r3, #0
 800431a:	b007      	add	sp, #28
 800431c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004320:	f000 ba76 	b.w	8004810 <__kernel_cos>
 8004324:	4a1a      	ldr	r2, [pc, #104]	; (8004390 <cos+0x88>)
 8004326:	4293      	cmp	r3, r2
 8004328:	dd05      	ble.n	8004336 <cos+0x2e>
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	f7fb ff13 	bl	8000158 <__aeabi_dsub>
 8004332:	b007      	add	sp, #28
 8004334:	bd30      	pop	{r4, r5, pc}
 8004336:	aa02      	add	r2, sp, #8
 8004338:	f000 f872 	bl	8004420 <__ieee754_rem_pio2>
 800433c:	f000 0003 	and.w	r0, r0, #3
 8004340:	2801      	cmp	r0, #1
 8004342:	d009      	beq.n	8004358 <cos+0x50>
 8004344:	2802      	cmp	r0, #2
 8004346:	d011      	beq.n	800436c <cos+0x64>
 8004348:	b9b8      	cbnz	r0, 800437a <cos+0x72>
 800434a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800434e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004352:	f000 fa5d 	bl	8004810 <__kernel_cos>
 8004356:	e7ec      	b.n	8004332 <cos+0x2a>
 8004358:	9000      	str	r0, [sp, #0]
 800435a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800435e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004362:	f000 fe55 	bl	8005010 <__kernel_sin>
 8004366:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800436a:	e7e2      	b.n	8004332 <cos+0x2a>
 800436c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004370:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004374:	f000 fa4c 	bl	8004810 <__kernel_cos>
 8004378:	e7f5      	b.n	8004366 <cos+0x5e>
 800437a:	2301      	movs	r3, #1
 800437c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004386:	f000 fe43 	bl	8005010 <__kernel_sin>
 800438a:	e7d2      	b.n	8004332 <cos+0x2a>
 800438c:	3fe921fb 	.word	0x3fe921fb
 8004390:	7fefffff 	.word	0x7fefffff

08004394 <sin>:
 8004394:	b530      	push	{r4, r5, lr}
 8004396:	4a20      	ldr	r2, [pc, #128]	; (8004418 <sin+0x84>)
 8004398:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800439c:	4293      	cmp	r3, r2
 800439e:	b087      	sub	sp, #28
 80043a0:	dc06      	bgt.n	80043b0 <sin+0x1c>
 80043a2:	2300      	movs	r3, #0
 80043a4:	2200      	movs	r2, #0
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	2300      	movs	r3, #0
 80043aa:	f000 fe31 	bl	8005010 <__kernel_sin>
 80043ae:	e006      	b.n	80043be <sin+0x2a>
 80043b0:	4a1a      	ldr	r2, [pc, #104]	; (800441c <sin+0x88>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	dd05      	ble.n	80043c2 <sin+0x2e>
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	f7fb fecd 	bl	8000158 <__aeabi_dsub>
 80043be:	b007      	add	sp, #28
 80043c0:	bd30      	pop	{r4, r5, pc}
 80043c2:	aa02      	add	r2, sp, #8
 80043c4:	f000 f82c 	bl	8004420 <__ieee754_rem_pio2>
 80043c8:	f000 0003 	and.w	r0, r0, #3
 80043cc:	2801      	cmp	r0, #1
 80043ce:	d009      	beq.n	80043e4 <sin+0x50>
 80043d0:	2802      	cmp	r0, #2
 80043d2:	d00e      	beq.n	80043f2 <sin+0x5e>
 80043d4:	b9c0      	cbnz	r0, 8004408 <sin+0x74>
 80043d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043da:	2301      	movs	r3, #1
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043e2:	e7e2      	b.n	80043aa <sin+0x16>
 80043e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043ec:	f000 fa10 	bl	8004810 <__kernel_cos>
 80043f0:	e7e5      	b.n	80043be <sin+0x2a>
 80043f2:	2301      	movs	r3, #1
 80043f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043fe:	f000 fe07 	bl	8005010 <__kernel_sin>
 8004402:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004406:	e7da      	b.n	80043be <sin+0x2a>
 8004408:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800440c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004410:	f000 f9fe 	bl	8004810 <__kernel_cos>
 8004414:	e7f5      	b.n	8004402 <sin+0x6e>
 8004416:	bf00      	nop
 8004418:	3fe921fb 	.word	0x3fe921fb
 800441c:	7fefffff 	.word	0x7fefffff

08004420 <__ieee754_rem_pio2>:
 8004420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004424:	4614      	mov	r4, r2
 8004426:	4ac4      	ldr	r2, [pc, #784]	; (8004738 <__ieee754_rem_pio2+0x318>)
 8004428:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800442c:	b08d      	sub	sp, #52	; 0x34
 800442e:	4592      	cmp	sl, r2
 8004430:	9104      	str	r1, [sp, #16]
 8004432:	dc07      	bgt.n	8004444 <__ieee754_rem_pio2+0x24>
 8004434:	2200      	movs	r2, #0
 8004436:	2300      	movs	r3, #0
 8004438:	e9c4 0100 	strd	r0, r1, [r4]
 800443c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004440:	2500      	movs	r5, #0
 8004442:	e024      	b.n	800448e <__ieee754_rem_pio2+0x6e>
 8004444:	4abd      	ldr	r2, [pc, #756]	; (800473c <__ieee754_rem_pio2+0x31c>)
 8004446:	4592      	cmp	sl, r2
 8004448:	dc72      	bgt.n	8004530 <__ieee754_rem_pio2+0x110>
 800444a:	9b04      	ldr	r3, [sp, #16]
 800444c:	4dbc      	ldr	r5, [pc, #752]	; (8004740 <__ieee754_rem_pio2+0x320>)
 800444e:	2b00      	cmp	r3, #0
 8004450:	a3ab      	add	r3, pc, #684	; (adr r3, 8004700 <__ieee754_rem_pio2+0x2e0>)
 8004452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004456:	dd36      	ble.n	80044c6 <__ieee754_rem_pio2+0xa6>
 8004458:	f7fb fe7e 	bl	8000158 <__aeabi_dsub>
 800445c:	45aa      	cmp	sl, r5
 800445e:	4606      	mov	r6, r0
 8004460:	460f      	mov	r7, r1
 8004462:	d018      	beq.n	8004496 <__ieee754_rem_pio2+0x76>
 8004464:	a3a8      	add	r3, pc, #672	; (adr r3, 8004708 <__ieee754_rem_pio2+0x2e8>)
 8004466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446a:	f7fb fe75 	bl	8000158 <__aeabi_dsub>
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	4630      	mov	r0, r6
 8004474:	e9c4 2300 	strd	r2, r3, [r4]
 8004478:	4639      	mov	r1, r7
 800447a:	f7fb fe6d 	bl	8000158 <__aeabi_dsub>
 800447e:	a3a2      	add	r3, pc, #648	; (adr r3, 8004708 <__ieee754_rem_pio2+0x2e8>)
 8004480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004484:	f7fb fe68 	bl	8000158 <__aeabi_dsub>
 8004488:	2501      	movs	r5, #1
 800448a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800448e:	4628      	mov	r0, r5
 8004490:	b00d      	add	sp, #52	; 0x34
 8004492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004496:	a39e      	add	r3, pc, #632	; (adr r3, 8004710 <__ieee754_rem_pio2+0x2f0>)
 8004498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449c:	f7fb fe5c 	bl	8000158 <__aeabi_dsub>
 80044a0:	a39d      	add	r3, pc, #628	; (adr r3, 8004718 <__ieee754_rem_pio2+0x2f8>)
 80044a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a6:	4606      	mov	r6, r0
 80044a8:	460f      	mov	r7, r1
 80044aa:	f7fb fe55 	bl	8000158 <__aeabi_dsub>
 80044ae:	4602      	mov	r2, r0
 80044b0:	460b      	mov	r3, r1
 80044b2:	4630      	mov	r0, r6
 80044b4:	e9c4 2300 	strd	r2, r3, [r4]
 80044b8:	4639      	mov	r1, r7
 80044ba:	f7fb fe4d 	bl	8000158 <__aeabi_dsub>
 80044be:	a396      	add	r3, pc, #600	; (adr r3, 8004718 <__ieee754_rem_pio2+0x2f8>)
 80044c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c4:	e7de      	b.n	8004484 <__ieee754_rem_pio2+0x64>
 80044c6:	f7fb fe49 	bl	800015c <__adddf3>
 80044ca:	45aa      	cmp	sl, r5
 80044cc:	4606      	mov	r6, r0
 80044ce:	460f      	mov	r7, r1
 80044d0:	d016      	beq.n	8004500 <__ieee754_rem_pio2+0xe0>
 80044d2:	a38d      	add	r3, pc, #564	; (adr r3, 8004708 <__ieee754_rem_pio2+0x2e8>)
 80044d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d8:	f7fb fe40 	bl	800015c <__adddf3>
 80044dc:	4602      	mov	r2, r0
 80044de:	460b      	mov	r3, r1
 80044e0:	4630      	mov	r0, r6
 80044e2:	e9c4 2300 	strd	r2, r3, [r4]
 80044e6:	4639      	mov	r1, r7
 80044e8:	f7fb fe36 	bl	8000158 <__aeabi_dsub>
 80044ec:	a386      	add	r3, pc, #536	; (adr r3, 8004708 <__ieee754_rem_pio2+0x2e8>)
 80044ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f2:	f7fb fe33 	bl	800015c <__adddf3>
 80044f6:	f04f 35ff 	mov.w	r5, #4294967295
 80044fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80044fe:	e7c6      	b.n	800448e <__ieee754_rem_pio2+0x6e>
 8004500:	a383      	add	r3, pc, #524	; (adr r3, 8004710 <__ieee754_rem_pio2+0x2f0>)
 8004502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004506:	f7fb fe29 	bl	800015c <__adddf3>
 800450a:	a383      	add	r3, pc, #524	; (adr r3, 8004718 <__ieee754_rem_pio2+0x2f8>)
 800450c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004510:	4606      	mov	r6, r0
 8004512:	460f      	mov	r7, r1
 8004514:	f7fb fe22 	bl	800015c <__adddf3>
 8004518:	4602      	mov	r2, r0
 800451a:	460b      	mov	r3, r1
 800451c:	4630      	mov	r0, r6
 800451e:	e9c4 2300 	strd	r2, r3, [r4]
 8004522:	4639      	mov	r1, r7
 8004524:	f7fb fe18 	bl	8000158 <__aeabi_dsub>
 8004528:	a37b      	add	r3, pc, #492	; (adr r3, 8004718 <__ieee754_rem_pio2+0x2f8>)
 800452a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452e:	e7e0      	b.n	80044f2 <__ieee754_rem_pio2+0xd2>
 8004530:	4a84      	ldr	r2, [pc, #528]	; (8004744 <__ieee754_rem_pio2+0x324>)
 8004532:	4592      	cmp	sl, r2
 8004534:	f300 80d5 	bgt.w	80046e2 <__ieee754_rem_pio2+0x2c2>
 8004538:	f000 fe20 	bl	800517c <fabs>
 800453c:	a378      	add	r3, pc, #480	; (adr r3, 8004720 <__ieee754_rem_pio2+0x300>)
 800453e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004542:	4606      	mov	r6, r0
 8004544:	460f      	mov	r7, r1
 8004546:	f7fb ffbf 	bl	80004c8 <__aeabi_dmul>
 800454a:	2200      	movs	r2, #0
 800454c:	4b7e      	ldr	r3, [pc, #504]	; (8004748 <__ieee754_rem_pio2+0x328>)
 800454e:	f7fb fe05 	bl	800015c <__adddf3>
 8004552:	f7fc fa53 	bl	80009fc <__aeabi_d2iz>
 8004556:	4605      	mov	r5, r0
 8004558:	f7fb ff4c 	bl	80003f4 <__aeabi_i2d>
 800455c:	4602      	mov	r2, r0
 800455e:	460b      	mov	r3, r1
 8004560:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004564:	a366      	add	r3, pc, #408	; (adr r3, 8004700 <__ieee754_rem_pio2+0x2e0>)
 8004566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456a:	f7fb ffad 	bl	80004c8 <__aeabi_dmul>
 800456e:	4602      	mov	r2, r0
 8004570:	460b      	mov	r3, r1
 8004572:	4630      	mov	r0, r6
 8004574:	4639      	mov	r1, r7
 8004576:	f7fb fdef 	bl	8000158 <__aeabi_dsub>
 800457a:	a363      	add	r3, pc, #396	; (adr r3, 8004708 <__ieee754_rem_pio2+0x2e8>)
 800457c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004580:	4680      	mov	r8, r0
 8004582:	4689      	mov	r9, r1
 8004584:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004588:	f7fb ff9e 	bl	80004c8 <__aeabi_dmul>
 800458c:	2d1f      	cmp	r5, #31
 800458e:	4606      	mov	r6, r0
 8004590:	460f      	mov	r7, r1
 8004592:	dc0e      	bgt.n	80045b2 <__ieee754_rem_pio2+0x192>
 8004594:	4b6d      	ldr	r3, [pc, #436]	; (800474c <__ieee754_rem_pio2+0x32c>)
 8004596:	1e6a      	subs	r2, r5, #1
 8004598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800459c:	4553      	cmp	r3, sl
 800459e:	d008      	beq.n	80045b2 <__ieee754_rem_pio2+0x192>
 80045a0:	4632      	mov	r2, r6
 80045a2:	463b      	mov	r3, r7
 80045a4:	4640      	mov	r0, r8
 80045a6:	4649      	mov	r1, r9
 80045a8:	f7fb fdd6 	bl	8000158 <__aeabi_dsub>
 80045ac:	e9c4 0100 	strd	r0, r1, [r4]
 80045b0:	e013      	b.n	80045da <__ieee754_rem_pio2+0x1ba>
 80045b2:	463b      	mov	r3, r7
 80045b4:	4632      	mov	r2, r6
 80045b6:	4640      	mov	r0, r8
 80045b8:	4649      	mov	r1, r9
 80045ba:	f7fb fdcd 	bl	8000158 <__aeabi_dsub>
 80045be:	ea4f 532a 	mov.w	r3, sl, asr #20
 80045c2:	9305      	str	r3, [sp, #20]
 80045c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80045c8:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 80045cc:	f1ba 0f10 	cmp.w	sl, #16
 80045d0:	dc1f      	bgt.n	8004612 <__ieee754_rem_pio2+0x1f2>
 80045d2:	4602      	mov	r2, r0
 80045d4:	460b      	mov	r3, r1
 80045d6:	e9c4 2300 	strd	r2, r3, [r4]
 80045da:	e9d4 2a00 	ldrd	r2, sl, [r4]
 80045de:	4640      	mov	r0, r8
 80045e0:	4653      	mov	r3, sl
 80045e2:	4649      	mov	r1, r9
 80045e4:	f7fb fdb8 	bl	8000158 <__aeabi_dsub>
 80045e8:	4632      	mov	r2, r6
 80045ea:	463b      	mov	r3, r7
 80045ec:	f7fb fdb4 	bl	8000158 <__aeabi_dsub>
 80045f0:	460b      	mov	r3, r1
 80045f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80045f6:	9904      	ldr	r1, [sp, #16]
 80045f8:	4602      	mov	r2, r0
 80045fa:	2900      	cmp	r1, #0
 80045fc:	f6bf af47 	bge.w	800448e <__ieee754_rem_pio2+0x6e>
 8004600:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8004604:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8004608:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800460c:	60e3      	str	r3, [r4, #12]
 800460e:	426d      	negs	r5, r5
 8004610:	e73d      	b.n	800448e <__ieee754_rem_pio2+0x6e>
 8004612:	a33f      	add	r3, pc, #252	; (adr r3, 8004710 <__ieee754_rem_pio2+0x2f0>)
 8004614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004618:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800461c:	f7fb ff54 	bl	80004c8 <__aeabi_dmul>
 8004620:	4606      	mov	r6, r0
 8004622:	460f      	mov	r7, r1
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
 8004628:	4640      	mov	r0, r8
 800462a:	4649      	mov	r1, r9
 800462c:	f7fb fd94 	bl	8000158 <__aeabi_dsub>
 8004630:	4602      	mov	r2, r0
 8004632:	460b      	mov	r3, r1
 8004634:	4682      	mov	sl, r0
 8004636:	468b      	mov	fp, r1
 8004638:	4640      	mov	r0, r8
 800463a:	4649      	mov	r1, r9
 800463c:	f7fb fd8c 	bl	8000158 <__aeabi_dsub>
 8004640:	4632      	mov	r2, r6
 8004642:	463b      	mov	r3, r7
 8004644:	f7fb fd88 	bl	8000158 <__aeabi_dsub>
 8004648:	a333      	add	r3, pc, #204	; (adr r3, 8004718 <__ieee754_rem_pio2+0x2f8>)
 800464a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464e:	4606      	mov	r6, r0
 8004650:	460f      	mov	r7, r1
 8004652:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004656:	f7fb ff37 	bl	80004c8 <__aeabi_dmul>
 800465a:	4632      	mov	r2, r6
 800465c:	463b      	mov	r3, r7
 800465e:	f7fb fd7b 	bl	8000158 <__aeabi_dsub>
 8004662:	4602      	mov	r2, r0
 8004664:	460b      	mov	r3, r1
 8004666:	4606      	mov	r6, r0
 8004668:	460f      	mov	r7, r1
 800466a:	4650      	mov	r0, sl
 800466c:	4659      	mov	r1, fp
 800466e:	f7fb fd73 	bl	8000158 <__aeabi_dsub>
 8004672:	9a05      	ldr	r2, [sp, #20]
 8004674:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b31      	cmp	r3, #49	; 0x31
 800467c:	dc06      	bgt.n	800468c <__ieee754_rem_pio2+0x26c>
 800467e:	4602      	mov	r2, r0
 8004680:	460b      	mov	r3, r1
 8004682:	46d0      	mov	r8, sl
 8004684:	46d9      	mov	r9, fp
 8004686:	e9c4 2300 	strd	r2, r3, [r4]
 800468a:	e7a6      	b.n	80045da <__ieee754_rem_pio2+0x1ba>
 800468c:	a326      	add	r3, pc, #152	; (adr r3, 8004728 <__ieee754_rem_pio2+0x308>)
 800468e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004692:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004696:	f7fb ff17 	bl	80004c8 <__aeabi_dmul>
 800469a:	4606      	mov	r6, r0
 800469c:	460f      	mov	r7, r1
 800469e:	4602      	mov	r2, r0
 80046a0:	460b      	mov	r3, r1
 80046a2:	4650      	mov	r0, sl
 80046a4:	4659      	mov	r1, fp
 80046a6:	f7fb fd57 	bl	8000158 <__aeabi_dsub>
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	4680      	mov	r8, r0
 80046b0:	4689      	mov	r9, r1
 80046b2:	4650      	mov	r0, sl
 80046b4:	4659      	mov	r1, fp
 80046b6:	f7fb fd4f 	bl	8000158 <__aeabi_dsub>
 80046ba:	4632      	mov	r2, r6
 80046bc:	463b      	mov	r3, r7
 80046be:	f7fb fd4b 	bl	8000158 <__aeabi_dsub>
 80046c2:	a31b      	add	r3, pc, #108	; (adr r3, 8004730 <__ieee754_rem_pio2+0x310>)
 80046c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c8:	4606      	mov	r6, r0
 80046ca:	460f      	mov	r7, r1
 80046cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046d0:	f7fb fefa 	bl	80004c8 <__aeabi_dmul>
 80046d4:	4632      	mov	r2, r6
 80046d6:	463b      	mov	r3, r7
 80046d8:	f7fb fd3e 	bl	8000158 <__aeabi_dsub>
 80046dc:	4606      	mov	r6, r0
 80046de:	460f      	mov	r7, r1
 80046e0:	e75e      	b.n	80045a0 <__ieee754_rem_pio2+0x180>
 80046e2:	4a1b      	ldr	r2, [pc, #108]	; (8004750 <__ieee754_rem_pio2+0x330>)
 80046e4:	4592      	cmp	sl, r2
 80046e6:	dd35      	ble.n	8004754 <__ieee754_rem_pio2+0x334>
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	f7fb fd34 	bl	8000158 <__aeabi_dsub>
 80046f0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80046f4:	e9c4 0100 	strd	r0, r1, [r4]
 80046f8:	e6a2      	b.n	8004440 <__ieee754_rem_pio2+0x20>
 80046fa:	bf00      	nop
 80046fc:	f3af 8000 	nop.w
 8004700:	54400000 	.word	0x54400000
 8004704:	3ff921fb 	.word	0x3ff921fb
 8004708:	1a626331 	.word	0x1a626331
 800470c:	3dd0b461 	.word	0x3dd0b461
 8004710:	1a600000 	.word	0x1a600000
 8004714:	3dd0b461 	.word	0x3dd0b461
 8004718:	2e037073 	.word	0x2e037073
 800471c:	3ba3198a 	.word	0x3ba3198a
 8004720:	6dc9c883 	.word	0x6dc9c883
 8004724:	3fe45f30 	.word	0x3fe45f30
 8004728:	2e000000 	.word	0x2e000000
 800472c:	3ba3198a 	.word	0x3ba3198a
 8004730:	252049c1 	.word	0x252049c1
 8004734:	397b839a 	.word	0x397b839a
 8004738:	3fe921fb 	.word	0x3fe921fb
 800473c:	4002d97b 	.word	0x4002d97b
 8004740:	3ff921fb 	.word	0x3ff921fb
 8004744:	413921fb 	.word	0x413921fb
 8004748:	3fe00000 	.word	0x3fe00000
 800474c:	0800886c 	.word	0x0800886c
 8004750:	7fefffff 	.word	0x7fefffff
 8004754:	ea4f 552a 	mov.w	r5, sl, asr #20
 8004758:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800475c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8004760:	460f      	mov	r7, r1
 8004762:	4606      	mov	r6, r0
 8004764:	f7fc f94a 	bl	80009fc <__aeabi_d2iz>
 8004768:	f7fb fe44 	bl	80003f4 <__aeabi_i2d>
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	4630      	mov	r0, r6
 8004772:	4639      	mov	r1, r7
 8004774:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004778:	f7fb fcee 	bl	8000158 <__aeabi_dsub>
 800477c:	2200      	movs	r2, #0
 800477e:	4b22      	ldr	r3, [pc, #136]	; (8004808 <__ieee754_rem_pio2+0x3e8>)
 8004780:	f7fb fea2 	bl	80004c8 <__aeabi_dmul>
 8004784:	460f      	mov	r7, r1
 8004786:	4606      	mov	r6, r0
 8004788:	f7fc f938 	bl	80009fc <__aeabi_d2iz>
 800478c:	f7fb fe32 	bl	80003f4 <__aeabi_i2d>
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	4630      	mov	r0, r6
 8004796:	4639      	mov	r1, r7
 8004798:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800479c:	f7fb fcdc 	bl	8000158 <__aeabi_dsub>
 80047a0:	2200      	movs	r2, #0
 80047a2:	4b19      	ldr	r3, [pc, #100]	; (8004808 <__ieee754_rem_pio2+0x3e8>)
 80047a4:	f7fb fe90 	bl	80004c8 <__aeabi_dmul>
 80047a8:	f04f 0803 	mov.w	r8, #3
 80047ac:	2600      	movs	r6, #0
 80047ae:	2700      	movs	r7, #0
 80047b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80047b4:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 80047b8:	4632      	mov	r2, r6
 80047ba:	e879 0102 	ldrd	r0, r1, [r9], #-8
 80047be:	463b      	mov	r3, r7
 80047c0:	46c2      	mov	sl, r8
 80047c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80047c6:	f7fc f8e7 	bl	8000998 <__aeabi_dcmpeq>
 80047ca:	2800      	cmp	r0, #0
 80047cc:	d1f4      	bne.n	80047b8 <__ieee754_rem_pio2+0x398>
 80047ce:	4b0f      	ldr	r3, [pc, #60]	; (800480c <__ieee754_rem_pio2+0x3ec>)
 80047d0:	462a      	mov	r2, r5
 80047d2:	9301      	str	r3, [sp, #4]
 80047d4:	2302      	movs	r3, #2
 80047d6:	4621      	mov	r1, r4
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	a806      	add	r0, sp, #24
 80047dc:	4653      	mov	r3, sl
 80047de:	f000 f8d5 	bl	800498c <__kernel_rem_pio2>
 80047e2:	9b04      	ldr	r3, [sp, #16]
 80047e4:	4605      	mov	r5, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f6bf ae51 	bge.w	800448e <__ieee754_rem_pio2+0x6e>
 80047ec:	e9d4 2100 	ldrd	r2, r1, [r4]
 80047f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80047f4:	e9c4 2300 	strd	r2, r3, [r4]
 80047f8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80047fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004800:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004804:	e703      	b.n	800460e <__ieee754_rem_pio2+0x1ee>
 8004806:	bf00      	nop
 8004808:	41700000 	.word	0x41700000
 800480c:	080088ec 	.word	0x080088ec

08004810 <__kernel_cos>:
 8004810:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004814:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004818:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800481c:	4680      	mov	r8, r0
 800481e:	460f      	mov	r7, r1
 8004820:	e9cd 2300 	strd	r2, r3, [sp]
 8004824:	da04      	bge.n	8004830 <__kernel_cos+0x20>
 8004826:	f7fc f8e9 	bl	80009fc <__aeabi_d2iz>
 800482a:	2800      	cmp	r0, #0
 800482c:	f000 8086 	beq.w	800493c <__kernel_cos+0x12c>
 8004830:	4642      	mov	r2, r8
 8004832:	463b      	mov	r3, r7
 8004834:	4640      	mov	r0, r8
 8004836:	4639      	mov	r1, r7
 8004838:	f7fb fe46 	bl	80004c8 <__aeabi_dmul>
 800483c:	2200      	movs	r2, #0
 800483e:	4b4e      	ldr	r3, [pc, #312]	; (8004978 <__kernel_cos+0x168>)
 8004840:	4604      	mov	r4, r0
 8004842:	460d      	mov	r5, r1
 8004844:	f7fb fe40 	bl	80004c8 <__aeabi_dmul>
 8004848:	a33f      	add	r3, pc, #252	; (adr r3, 8004948 <__kernel_cos+0x138>)
 800484a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484e:	4682      	mov	sl, r0
 8004850:	468b      	mov	fp, r1
 8004852:	4620      	mov	r0, r4
 8004854:	4629      	mov	r1, r5
 8004856:	f7fb fe37 	bl	80004c8 <__aeabi_dmul>
 800485a:	a33d      	add	r3, pc, #244	; (adr r3, 8004950 <__kernel_cos+0x140>)
 800485c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004860:	f7fb fc7c 	bl	800015c <__adddf3>
 8004864:	4622      	mov	r2, r4
 8004866:	462b      	mov	r3, r5
 8004868:	f7fb fe2e 	bl	80004c8 <__aeabi_dmul>
 800486c:	a33a      	add	r3, pc, #232	; (adr r3, 8004958 <__kernel_cos+0x148>)
 800486e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004872:	f7fb fc71 	bl	8000158 <__aeabi_dsub>
 8004876:	4622      	mov	r2, r4
 8004878:	462b      	mov	r3, r5
 800487a:	f7fb fe25 	bl	80004c8 <__aeabi_dmul>
 800487e:	a338      	add	r3, pc, #224	; (adr r3, 8004960 <__kernel_cos+0x150>)
 8004880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004884:	f7fb fc6a 	bl	800015c <__adddf3>
 8004888:	4622      	mov	r2, r4
 800488a:	462b      	mov	r3, r5
 800488c:	f7fb fe1c 	bl	80004c8 <__aeabi_dmul>
 8004890:	a335      	add	r3, pc, #212	; (adr r3, 8004968 <__kernel_cos+0x158>)
 8004892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004896:	f7fb fc5f 	bl	8000158 <__aeabi_dsub>
 800489a:	4622      	mov	r2, r4
 800489c:	462b      	mov	r3, r5
 800489e:	f7fb fe13 	bl	80004c8 <__aeabi_dmul>
 80048a2:	a333      	add	r3, pc, #204	; (adr r3, 8004970 <__kernel_cos+0x160>)
 80048a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a8:	f7fb fc58 	bl	800015c <__adddf3>
 80048ac:	4622      	mov	r2, r4
 80048ae:	462b      	mov	r3, r5
 80048b0:	f7fb fe0a 	bl	80004c8 <__aeabi_dmul>
 80048b4:	4622      	mov	r2, r4
 80048b6:	462b      	mov	r3, r5
 80048b8:	f7fb fe06 	bl	80004c8 <__aeabi_dmul>
 80048bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80048c0:	4604      	mov	r4, r0
 80048c2:	460d      	mov	r5, r1
 80048c4:	4640      	mov	r0, r8
 80048c6:	4639      	mov	r1, r7
 80048c8:	f7fb fdfe 	bl	80004c8 <__aeabi_dmul>
 80048cc:	460b      	mov	r3, r1
 80048ce:	4602      	mov	r2, r0
 80048d0:	4629      	mov	r1, r5
 80048d2:	4620      	mov	r0, r4
 80048d4:	f7fb fc40 	bl	8000158 <__aeabi_dsub>
 80048d8:	4b28      	ldr	r3, [pc, #160]	; (800497c <__kernel_cos+0x16c>)
 80048da:	4680      	mov	r8, r0
 80048dc:	429e      	cmp	r6, r3
 80048de:	4689      	mov	r9, r1
 80048e0:	dc0e      	bgt.n	8004900 <__kernel_cos+0xf0>
 80048e2:	4602      	mov	r2, r0
 80048e4:	460b      	mov	r3, r1
 80048e6:	4650      	mov	r0, sl
 80048e8:	4659      	mov	r1, fp
 80048ea:	f7fb fc35 	bl	8000158 <__aeabi_dsub>
 80048ee:	4602      	mov	r2, r0
 80048f0:	2000      	movs	r0, #0
 80048f2:	460b      	mov	r3, r1
 80048f4:	4922      	ldr	r1, [pc, #136]	; (8004980 <__kernel_cos+0x170>)
 80048f6:	f7fb fc2f 	bl	8000158 <__aeabi_dsub>
 80048fa:	b003      	add	sp, #12
 80048fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004900:	2400      	movs	r4, #0
 8004902:	4b20      	ldr	r3, [pc, #128]	; (8004984 <__kernel_cos+0x174>)
 8004904:	4622      	mov	r2, r4
 8004906:	429e      	cmp	r6, r3
 8004908:	bfcc      	ite	gt
 800490a:	4d1f      	ldrgt	r5, [pc, #124]	; (8004988 <__kernel_cos+0x178>)
 800490c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8004910:	462b      	mov	r3, r5
 8004912:	2000      	movs	r0, #0
 8004914:	491a      	ldr	r1, [pc, #104]	; (8004980 <__kernel_cos+0x170>)
 8004916:	f7fb fc1f 	bl	8000158 <__aeabi_dsub>
 800491a:	4622      	mov	r2, r4
 800491c:	4606      	mov	r6, r0
 800491e:	460f      	mov	r7, r1
 8004920:	462b      	mov	r3, r5
 8004922:	4650      	mov	r0, sl
 8004924:	4659      	mov	r1, fp
 8004926:	f7fb fc17 	bl	8000158 <__aeabi_dsub>
 800492a:	4642      	mov	r2, r8
 800492c:	464b      	mov	r3, r9
 800492e:	f7fb fc13 	bl	8000158 <__aeabi_dsub>
 8004932:	4602      	mov	r2, r0
 8004934:	460b      	mov	r3, r1
 8004936:	4630      	mov	r0, r6
 8004938:	4639      	mov	r1, r7
 800493a:	e7dc      	b.n	80048f6 <__kernel_cos+0xe6>
 800493c:	2000      	movs	r0, #0
 800493e:	4910      	ldr	r1, [pc, #64]	; (8004980 <__kernel_cos+0x170>)
 8004940:	e7db      	b.n	80048fa <__kernel_cos+0xea>
 8004942:	bf00      	nop
 8004944:	f3af 8000 	nop.w
 8004948:	be8838d4 	.word	0xbe8838d4
 800494c:	bda8fae9 	.word	0xbda8fae9
 8004950:	bdb4b1c4 	.word	0xbdb4b1c4
 8004954:	3e21ee9e 	.word	0x3e21ee9e
 8004958:	809c52ad 	.word	0x809c52ad
 800495c:	3e927e4f 	.word	0x3e927e4f
 8004960:	19cb1590 	.word	0x19cb1590
 8004964:	3efa01a0 	.word	0x3efa01a0
 8004968:	16c15177 	.word	0x16c15177
 800496c:	3f56c16c 	.word	0x3f56c16c
 8004970:	5555554c 	.word	0x5555554c
 8004974:	3fa55555 	.word	0x3fa55555
 8004978:	3fe00000 	.word	0x3fe00000
 800497c:	3fd33332 	.word	0x3fd33332
 8004980:	3ff00000 	.word	0x3ff00000
 8004984:	3fe90000 	.word	0x3fe90000
 8004988:	3fd20000 	.word	0x3fd20000

0800498c <__kernel_rem_pio2>:
 800498c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004990:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8004994:	9308      	str	r3, [sp, #32]
 8004996:	9106      	str	r1, [sp, #24]
 8004998:	4bb6      	ldr	r3, [pc, #728]	; (8004c74 <__kernel_rem_pio2+0x2e8>)
 800499a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800499c:	f112 0f14 	cmn.w	r2, #20
 80049a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80049a4:	bfa8      	it	ge
 80049a6:	1ed4      	subge	r4, r2, #3
 80049a8:	9302      	str	r3, [sp, #8]
 80049aa:	9b08      	ldr	r3, [sp, #32]
 80049ac:	bfb8      	it	lt
 80049ae:	2400      	movlt	r4, #0
 80049b0:	f103 33ff 	add.w	r3, r3, #4294967295
 80049b4:	9307      	str	r3, [sp, #28]
 80049b6:	bfa4      	itt	ge
 80049b8:	2318      	movge	r3, #24
 80049ba:	fb94 f4f3 	sdivge	r4, r4, r3
 80049be:	f06f 0317 	mvn.w	r3, #23
 80049c2:	fb04 3303 	mla	r3, r4, r3, r3
 80049c6:	eb03 0b02 	add.w	fp, r3, r2
 80049ca:	9a07      	ldr	r2, [sp, #28]
 80049cc:	9b02      	ldr	r3, [sp, #8]
 80049ce:	1aa7      	subs	r7, r4, r2
 80049d0:	eb03 0802 	add.w	r8, r3, r2
 80049d4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80049d6:	2500      	movs	r5, #0
 80049d8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80049dc:	2200      	movs	r2, #0
 80049de:	2300      	movs	r3, #0
 80049e0:	9009      	str	r0, [sp, #36]	; 0x24
 80049e2:	ae20      	add	r6, sp, #128	; 0x80
 80049e4:	4545      	cmp	r5, r8
 80049e6:	dd14      	ble.n	8004a12 <__kernel_rem_pio2+0x86>
 80049e8:	f04f 0800 	mov.w	r8, #0
 80049ec:	9a08      	ldr	r2, [sp, #32]
 80049ee:	ab20      	add	r3, sp, #128	; 0x80
 80049f0:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 80049f4:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 80049f8:	9b02      	ldr	r3, [sp, #8]
 80049fa:	4598      	cmp	r8, r3
 80049fc:	dc35      	bgt.n	8004a6a <__kernel_rem_pio2+0xde>
 80049fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a00:	2200      	movs	r2, #0
 8004a02:	f1a3 0908 	sub.w	r9, r3, #8
 8004a06:	2300      	movs	r3, #0
 8004a08:	462f      	mov	r7, r5
 8004a0a:	2600      	movs	r6, #0
 8004a0c:	e9cd 2300 	strd	r2, r3, [sp]
 8004a10:	e01f      	b.n	8004a52 <__kernel_rem_pio2+0xc6>
 8004a12:	42ef      	cmn	r7, r5
 8004a14:	d40b      	bmi.n	8004a2e <__kernel_rem_pio2+0xa2>
 8004a16:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004a1a:	e9cd 2300 	strd	r2, r3, [sp]
 8004a1e:	f7fb fce9 	bl	80003f4 <__aeabi_i2d>
 8004a22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a26:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004a2a:	3501      	adds	r5, #1
 8004a2c:	e7da      	b.n	80049e4 <__kernel_rem_pio2+0x58>
 8004a2e:	4610      	mov	r0, r2
 8004a30:	4619      	mov	r1, r3
 8004a32:	e7f8      	b.n	8004a26 <__kernel_rem_pio2+0x9a>
 8004a34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a38:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8004a3c:	f7fb fd44 	bl	80004c8 <__aeabi_dmul>
 8004a40:	4602      	mov	r2, r0
 8004a42:	460b      	mov	r3, r1
 8004a44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a48:	f7fb fb88 	bl	800015c <__adddf3>
 8004a4c:	e9cd 0100 	strd	r0, r1, [sp]
 8004a50:	3601      	adds	r6, #1
 8004a52:	9b07      	ldr	r3, [sp, #28]
 8004a54:	3f08      	subs	r7, #8
 8004a56:	429e      	cmp	r6, r3
 8004a58:	ddec      	ble.n	8004a34 <__kernel_rem_pio2+0xa8>
 8004a5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a5e:	f108 0801 	add.w	r8, r8, #1
 8004a62:	e8ea 2302 	strd	r2, r3, [sl], #8
 8004a66:	3508      	adds	r5, #8
 8004a68:	e7c6      	b.n	80049f8 <__kernel_rem_pio2+0x6c>
 8004a6a:	9b02      	ldr	r3, [sp, #8]
 8004a6c:	aa0c      	add	r2, sp, #48	; 0x30
 8004a6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004a72:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a74:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004a76:	9e02      	ldr	r6, [sp, #8]
 8004a78:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004a7c:	930a      	str	r3, [sp, #40]	; 0x28
 8004a7e:	ab98      	add	r3, sp, #608	; 0x260
 8004a80:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004a84:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8004a88:	ab70      	add	r3, sp, #448	; 0x1c0
 8004a8a:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8004a8e:	46d0      	mov	r8, sl
 8004a90:	46b1      	mov	r9, r6
 8004a92:	af0c      	add	r7, sp, #48	; 0x30
 8004a94:	9700      	str	r7, [sp, #0]
 8004a96:	f1b9 0f00 	cmp.w	r9, #0
 8004a9a:	f1a8 0808 	sub.w	r8, r8, #8
 8004a9e:	dc71      	bgt.n	8004b84 <__kernel_rem_pio2+0x1f8>
 8004aa0:	465a      	mov	r2, fp
 8004aa2:	4620      	mov	r0, r4
 8004aa4:	4629      	mov	r1, r5
 8004aa6:	f000 fbef 	bl	8005288 <scalbn>
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004ab0:	4604      	mov	r4, r0
 8004ab2:	460d      	mov	r5, r1
 8004ab4:	f7fb fd08 	bl	80004c8 <__aeabi_dmul>
 8004ab8:	f000 fb66 	bl	8005188 <floor>
 8004abc:	2200      	movs	r2, #0
 8004abe:	4b6e      	ldr	r3, [pc, #440]	; (8004c78 <__kernel_rem_pio2+0x2ec>)
 8004ac0:	f7fb fd02 	bl	80004c8 <__aeabi_dmul>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4620      	mov	r0, r4
 8004aca:	4629      	mov	r1, r5
 8004acc:	f7fb fb44 	bl	8000158 <__aeabi_dsub>
 8004ad0:	460d      	mov	r5, r1
 8004ad2:	4604      	mov	r4, r0
 8004ad4:	f7fb ff92 	bl	80009fc <__aeabi_d2iz>
 8004ad8:	9004      	str	r0, [sp, #16]
 8004ada:	f7fb fc8b 	bl	80003f4 <__aeabi_i2d>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	4629      	mov	r1, r5
 8004ae6:	f7fb fb37 	bl	8000158 <__aeabi_dsub>
 8004aea:	f1bb 0f00 	cmp.w	fp, #0
 8004aee:	4680      	mov	r8, r0
 8004af0:	4689      	mov	r9, r1
 8004af2:	dd70      	ble.n	8004bd6 <__kernel_rem_pio2+0x24a>
 8004af4:	1e72      	subs	r2, r6, #1
 8004af6:	ab0c      	add	r3, sp, #48	; 0x30
 8004af8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004afc:	9c04      	ldr	r4, [sp, #16]
 8004afe:	f1cb 0118 	rsb	r1, fp, #24
 8004b02:	fa40 f301 	asr.w	r3, r0, r1
 8004b06:	441c      	add	r4, r3
 8004b08:	408b      	lsls	r3, r1
 8004b0a:	1ac0      	subs	r0, r0, r3
 8004b0c:	ab0c      	add	r3, sp, #48	; 0x30
 8004b0e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004b12:	f1cb 0317 	rsb	r3, fp, #23
 8004b16:	9404      	str	r4, [sp, #16]
 8004b18:	fa40 f303 	asr.w	r3, r0, r3
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	9b00      	ldr	r3, [sp, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	dd66      	ble.n	8004bf2 <__kernel_rem_pio2+0x266>
 8004b24:	2200      	movs	r2, #0
 8004b26:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004b2a:	4614      	mov	r4, r2
 8004b2c:	9b04      	ldr	r3, [sp, #16]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	9304      	str	r3, [sp, #16]
 8004b32:	4296      	cmp	r6, r2
 8004b34:	f300 80ac 	bgt.w	8004c90 <__kernel_rem_pio2+0x304>
 8004b38:	f1bb 0f00 	cmp.w	fp, #0
 8004b3c:	dd07      	ble.n	8004b4e <__kernel_rem_pio2+0x1c2>
 8004b3e:	f1bb 0f01 	cmp.w	fp, #1
 8004b42:	f000 80b4 	beq.w	8004cae <__kernel_rem_pio2+0x322>
 8004b46:	f1bb 0f02 	cmp.w	fp, #2
 8004b4a:	f000 80ba 	beq.w	8004cc2 <__kernel_rem_pio2+0x336>
 8004b4e:	9b00      	ldr	r3, [sp, #0]
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d14e      	bne.n	8004bf2 <__kernel_rem_pio2+0x266>
 8004b54:	4642      	mov	r2, r8
 8004b56:	464b      	mov	r3, r9
 8004b58:	2000      	movs	r0, #0
 8004b5a:	4948      	ldr	r1, [pc, #288]	; (8004c7c <__kernel_rem_pio2+0x2f0>)
 8004b5c:	f7fb fafc 	bl	8000158 <__aeabi_dsub>
 8004b60:	4680      	mov	r8, r0
 8004b62:	4689      	mov	r9, r1
 8004b64:	2c00      	cmp	r4, #0
 8004b66:	d044      	beq.n	8004bf2 <__kernel_rem_pio2+0x266>
 8004b68:	465a      	mov	r2, fp
 8004b6a:	2000      	movs	r0, #0
 8004b6c:	4943      	ldr	r1, [pc, #268]	; (8004c7c <__kernel_rem_pio2+0x2f0>)
 8004b6e:	f000 fb8b 	bl	8005288 <scalbn>
 8004b72:	4602      	mov	r2, r0
 8004b74:	460b      	mov	r3, r1
 8004b76:	4640      	mov	r0, r8
 8004b78:	4649      	mov	r1, r9
 8004b7a:	f7fb faed 	bl	8000158 <__aeabi_dsub>
 8004b7e:	4680      	mov	r8, r0
 8004b80:	4689      	mov	r9, r1
 8004b82:	e036      	b.n	8004bf2 <__kernel_rem_pio2+0x266>
 8004b84:	2200      	movs	r2, #0
 8004b86:	4b3e      	ldr	r3, [pc, #248]	; (8004c80 <__kernel_rem_pio2+0x2f4>)
 8004b88:	4620      	mov	r0, r4
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	f7fb fc9c 	bl	80004c8 <__aeabi_dmul>
 8004b90:	f7fb ff34 	bl	80009fc <__aeabi_d2iz>
 8004b94:	f7fb fc2e 	bl	80003f4 <__aeabi_i2d>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	4b38      	ldr	r3, [pc, #224]	; (8004c84 <__kernel_rem_pio2+0x2f8>)
 8004ba4:	f7fb fc90 	bl	80004c8 <__aeabi_dmul>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	460b      	mov	r3, r1
 8004bac:	4620      	mov	r0, r4
 8004bae:	4629      	mov	r1, r5
 8004bb0:	f7fb fad2 	bl	8000158 <__aeabi_dsub>
 8004bb4:	f7fb ff22 	bl	80009fc <__aeabi_d2iz>
 8004bb8:	9b00      	ldr	r3, [sp, #0]
 8004bba:	f109 39ff 	add.w	r9, r9, #4294967295
 8004bbe:	f843 0b04 	str.w	r0, [r3], #4
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004bc8:	e9d8 2300 	ldrd	r2, r3, [r8]
 8004bcc:	f7fb fac6 	bl	800015c <__adddf3>
 8004bd0:	4604      	mov	r4, r0
 8004bd2:	460d      	mov	r5, r1
 8004bd4:	e75f      	b.n	8004a96 <__kernel_rem_pio2+0x10a>
 8004bd6:	d105      	bne.n	8004be4 <__kernel_rem_pio2+0x258>
 8004bd8:	1e73      	subs	r3, r6, #1
 8004bda:	aa0c      	add	r2, sp, #48	; 0x30
 8004bdc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004be0:	15c3      	asrs	r3, r0, #23
 8004be2:	e79b      	b.n	8004b1c <__kernel_rem_pio2+0x190>
 8004be4:	2200      	movs	r2, #0
 8004be6:	4b28      	ldr	r3, [pc, #160]	; (8004c88 <__kernel_rem_pio2+0x2fc>)
 8004be8:	f7fb fef4 	bl	80009d4 <__aeabi_dcmpge>
 8004bec:	2800      	cmp	r0, #0
 8004bee:	d13e      	bne.n	8004c6e <__kernel_rem_pio2+0x2e2>
 8004bf0:	9000      	str	r0, [sp, #0]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	4640      	mov	r0, r8
 8004bf8:	4649      	mov	r1, r9
 8004bfa:	f7fb fecd 	bl	8000998 <__aeabi_dcmpeq>
 8004bfe:	2800      	cmp	r0, #0
 8004c00:	f000 80b1 	beq.w	8004d66 <__kernel_rem_pio2+0x3da>
 8004c04:	1e74      	subs	r4, r6, #1
 8004c06:	4623      	mov	r3, r4
 8004c08:	2200      	movs	r2, #0
 8004c0a:	9902      	ldr	r1, [sp, #8]
 8004c0c:	428b      	cmp	r3, r1
 8004c0e:	da5f      	bge.n	8004cd0 <__kernel_rem_pio2+0x344>
 8004c10:	2a00      	cmp	r2, #0
 8004c12:	d074      	beq.n	8004cfe <__kernel_rem_pio2+0x372>
 8004c14:	ab0c      	add	r3, sp, #48	; 0x30
 8004c16:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004c1a:	f1ab 0b18 	sub.w	fp, fp, #24
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f000 809f 	beq.w	8004d62 <__kernel_rem_pio2+0x3d6>
 8004c24:	465a      	mov	r2, fp
 8004c26:	2000      	movs	r0, #0
 8004c28:	4914      	ldr	r1, [pc, #80]	; (8004c7c <__kernel_rem_pio2+0x2f0>)
 8004c2a:	f000 fb2d 	bl	8005288 <scalbn>
 8004c2e:	46a2      	mov	sl, r4
 8004c30:	4606      	mov	r6, r0
 8004c32:	460f      	mov	r7, r1
 8004c34:	f04f 0800 	mov.w	r8, #0
 8004c38:	ab70      	add	r3, sp, #448	; 0x1c0
 8004c3a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8004c80 <__kernel_rem_pio2+0x2f4>
 8004c3e:	00e5      	lsls	r5, r4, #3
 8004c40:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8004c44:	f1ba 0f00 	cmp.w	sl, #0
 8004c48:	f280 80c3 	bge.w	8004dd2 <__kernel_rem_pio2+0x446>
 8004c4c:	4626      	mov	r6, r4
 8004c4e:	2e00      	cmp	r6, #0
 8004c50:	f2c0 80f5 	blt.w	8004e3e <__kernel_rem_pio2+0x4b2>
 8004c54:	4b0d      	ldr	r3, [pc, #52]	; (8004c8c <__kernel_rem_pio2+0x300>)
 8004c56:	f04f 0a00 	mov.w	sl, #0
 8004c5a:	9307      	str	r3, [sp, #28]
 8004c5c:	ab70      	add	r3, sp, #448	; 0x1c0
 8004c5e:	f04f 0b00 	mov.w	fp, #0
 8004c62:	f04f 0800 	mov.w	r8, #0
 8004c66:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8004c6a:	1ba7      	subs	r7, r4, r6
 8004c6c:	e0db      	b.n	8004e26 <__kernel_rem_pio2+0x49a>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	9300      	str	r3, [sp, #0]
 8004c72:	e757      	b.n	8004b24 <__kernel_rem_pio2+0x198>
 8004c74:	08008a38 	.word	0x08008a38
 8004c78:	40200000 	.word	0x40200000
 8004c7c:	3ff00000 	.word	0x3ff00000
 8004c80:	3e700000 	.word	0x3e700000
 8004c84:	41700000 	.word	0x41700000
 8004c88:	3fe00000 	.word	0x3fe00000
 8004c8c:	080089f8 	.word	0x080089f8
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	b944      	cbnz	r4, 8004ca6 <__kernel_rem_pio2+0x31a>
 8004c94:	b11b      	cbz	r3, 8004c9e <__kernel_rem_pio2+0x312>
 8004c96:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004c9a:	603b      	str	r3, [r7, #0]
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	461c      	mov	r4, r3
 8004ca0:	3201      	adds	r2, #1
 8004ca2:	3704      	adds	r7, #4
 8004ca4:	e745      	b.n	8004b32 <__kernel_rem_pio2+0x1a6>
 8004ca6:	1acb      	subs	r3, r1, r3
 8004ca8:	603b      	str	r3, [r7, #0]
 8004caa:	4623      	mov	r3, r4
 8004cac:	e7f7      	b.n	8004c9e <__kernel_rem_pio2+0x312>
 8004cae:	1e72      	subs	r2, r6, #1
 8004cb0:	ab0c      	add	r3, sp, #48	; 0x30
 8004cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cb6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004cba:	a90c      	add	r1, sp, #48	; 0x30
 8004cbc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004cc0:	e745      	b.n	8004b4e <__kernel_rem_pio2+0x1c2>
 8004cc2:	1e72      	subs	r2, r6, #1
 8004cc4:	ab0c      	add	r3, sp, #48	; 0x30
 8004cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cca:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004cce:	e7f4      	b.n	8004cba <__kernel_rem_pio2+0x32e>
 8004cd0:	a90c      	add	r1, sp, #48	; 0x30
 8004cd2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	e796      	b.n	8004c0a <__kernel_rem_pio2+0x27e>
 8004cdc:	3401      	adds	r4, #1
 8004cde:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004ce2:	2a00      	cmp	r2, #0
 8004ce4:	d0fa      	beq.n	8004cdc <__kernel_rem_pio2+0x350>
 8004ce6:	9b08      	ldr	r3, [sp, #32]
 8004ce8:	f106 0801 	add.w	r8, r6, #1
 8004cec:	18f5      	adds	r5, r6, r3
 8004cee:	ab20      	add	r3, sp, #128	; 0x80
 8004cf0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004cf4:	4434      	add	r4, r6
 8004cf6:	4544      	cmp	r4, r8
 8004cf8:	da04      	bge.n	8004d04 <__kernel_rem_pio2+0x378>
 8004cfa:	4626      	mov	r6, r4
 8004cfc:	e6bf      	b.n	8004a7e <__kernel_rem_pio2+0xf2>
 8004cfe:	2401      	movs	r4, #1
 8004d00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d02:	e7ec      	b.n	8004cde <__kernel_rem_pio2+0x352>
 8004d04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d06:	f04f 0900 	mov.w	r9, #0
 8004d0a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004d0e:	f7fb fb71 	bl	80003f4 <__aeabi_i2d>
 8004d12:	2600      	movs	r6, #0
 8004d14:	2700      	movs	r7, #0
 8004d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d18:	e9c5 0100 	strd	r0, r1, [r5]
 8004d1c:	3b08      	subs	r3, #8
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	9504      	str	r5, [sp, #16]
 8004d22:	9b07      	ldr	r3, [sp, #28]
 8004d24:	4599      	cmp	r9, r3
 8004d26:	dd05      	ble.n	8004d34 <__kernel_rem_pio2+0x3a8>
 8004d28:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8004d2c:	f108 0801 	add.w	r8, r8, #1
 8004d30:	3508      	adds	r5, #8
 8004d32:	e7e0      	b.n	8004cf6 <__kernel_rem_pio2+0x36a>
 8004d34:	f8dd c010 	ldr.w	ip, [sp, #16]
 8004d38:	9900      	ldr	r1, [sp, #0]
 8004d3a:	f109 0901 	add.w	r9, r9, #1
 8004d3e:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8004d42:	9100      	str	r1, [sp, #0]
 8004d44:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8004d48:	f8cd c010 	str.w	ip, [sp, #16]
 8004d4c:	f7fb fbbc 	bl	80004c8 <__aeabi_dmul>
 8004d50:	4602      	mov	r2, r0
 8004d52:	460b      	mov	r3, r1
 8004d54:	4630      	mov	r0, r6
 8004d56:	4639      	mov	r1, r7
 8004d58:	f7fb fa00 	bl	800015c <__adddf3>
 8004d5c:	4606      	mov	r6, r0
 8004d5e:	460f      	mov	r7, r1
 8004d60:	e7df      	b.n	8004d22 <__kernel_rem_pio2+0x396>
 8004d62:	3c01      	subs	r4, #1
 8004d64:	e756      	b.n	8004c14 <__kernel_rem_pio2+0x288>
 8004d66:	f1cb 0200 	rsb	r2, fp, #0
 8004d6a:	4640      	mov	r0, r8
 8004d6c:	4649      	mov	r1, r9
 8004d6e:	f000 fa8b 	bl	8005288 <scalbn>
 8004d72:	2200      	movs	r2, #0
 8004d74:	4ba4      	ldr	r3, [pc, #656]	; (8005008 <__kernel_rem_pio2+0x67c>)
 8004d76:	4604      	mov	r4, r0
 8004d78:	460d      	mov	r5, r1
 8004d7a:	f7fb fe2b 	bl	80009d4 <__aeabi_dcmpge>
 8004d7e:	b1f8      	cbz	r0, 8004dc0 <__kernel_rem_pio2+0x434>
 8004d80:	2200      	movs	r2, #0
 8004d82:	4ba2      	ldr	r3, [pc, #648]	; (800500c <__kernel_rem_pio2+0x680>)
 8004d84:	4620      	mov	r0, r4
 8004d86:	4629      	mov	r1, r5
 8004d88:	f7fb fb9e 	bl	80004c8 <__aeabi_dmul>
 8004d8c:	f7fb fe36 	bl	80009fc <__aeabi_d2iz>
 8004d90:	4607      	mov	r7, r0
 8004d92:	f7fb fb2f 	bl	80003f4 <__aeabi_i2d>
 8004d96:	2200      	movs	r2, #0
 8004d98:	4b9b      	ldr	r3, [pc, #620]	; (8005008 <__kernel_rem_pio2+0x67c>)
 8004d9a:	f7fb fb95 	bl	80004c8 <__aeabi_dmul>
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4602      	mov	r2, r0
 8004da2:	4629      	mov	r1, r5
 8004da4:	4620      	mov	r0, r4
 8004da6:	f7fb f9d7 	bl	8000158 <__aeabi_dsub>
 8004daa:	f7fb fe27 	bl	80009fc <__aeabi_d2iz>
 8004dae:	1c74      	adds	r4, r6, #1
 8004db0:	ab0c      	add	r3, sp, #48	; 0x30
 8004db2:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8004db6:	f10b 0b18 	add.w	fp, fp, #24
 8004dba:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8004dbe:	e731      	b.n	8004c24 <__kernel_rem_pio2+0x298>
 8004dc0:	4620      	mov	r0, r4
 8004dc2:	4629      	mov	r1, r5
 8004dc4:	f7fb fe1a 	bl	80009fc <__aeabi_d2iz>
 8004dc8:	ab0c      	add	r3, sp, #48	; 0x30
 8004dca:	4634      	mov	r4, r6
 8004dcc:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8004dd0:	e728      	b.n	8004c24 <__kernel_rem_pio2+0x298>
 8004dd2:	ab0c      	add	r3, sp, #48	; 0x30
 8004dd4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8004dd8:	f7fb fb0c 	bl	80003f4 <__aeabi_i2d>
 8004ddc:	4632      	mov	r2, r6
 8004dde:	463b      	mov	r3, r7
 8004de0:	f7fb fb72 	bl	80004c8 <__aeabi_dmul>
 8004de4:	4642      	mov	r2, r8
 8004de6:	e86b 0102 	strd	r0, r1, [fp], #-8
 8004dea:	464b      	mov	r3, r9
 8004dec:	4630      	mov	r0, r6
 8004dee:	4639      	mov	r1, r7
 8004df0:	f7fb fb6a 	bl	80004c8 <__aeabi_dmul>
 8004df4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004df8:	4606      	mov	r6, r0
 8004dfa:	460f      	mov	r7, r1
 8004dfc:	e722      	b.n	8004c44 <__kernel_rem_pio2+0x2b8>
 8004dfe:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8004e02:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8004e06:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8004e0a:	f8cd c01c 	str.w	ip, [sp, #28]
 8004e0e:	f7fb fb5b 	bl	80004c8 <__aeabi_dmul>
 8004e12:	4602      	mov	r2, r0
 8004e14:	460b      	mov	r3, r1
 8004e16:	4650      	mov	r0, sl
 8004e18:	4659      	mov	r1, fp
 8004e1a:	f7fb f99f 	bl	800015c <__adddf3>
 8004e1e:	4682      	mov	sl, r0
 8004e20:	468b      	mov	fp, r1
 8004e22:	f108 0801 	add.w	r8, r8, #1
 8004e26:	9b02      	ldr	r3, [sp, #8]
 8004e28:	4598      	cmp	r8, r3
 8004e2a:	dc01      	bgt.n	8004e30 <__kernel_rem_pio2+0x4a4>
 8004e2c:	45b8      	cmp	r8, r7
 8004e2e:	dde6      	ble.n	8004dfe <__kernel_rem_pio2+0x472>
 8004e30:	ab48      	add	r3, sp, #288	; 0x120
 8004e32:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004e36:	e9c7 ab00 	strd	sl, fp, [r7]
 8004e3a:	3e01      	subs	r6, #1
 8004e3c:	e707      	b.n	8004c4e <__kernel_rem_pio2+0x2c2>
 8004e3e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	dc09      	bgt.n	8004e58 <__kernel_rem_pio2+0x4cc>
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	dc32      	bgt.n	8004eae <__kernel_rem_pio2+0x522>
 8004e48:	d05a      	beq.n	8004f00 <__kernel_rem_pio2+0x574>
 8004e4a:	9b04      	ldr	r3, [sp, #16]
 8004e4c:	f003 0007 	and.w	r0, r3, #7
 8004e50:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8004e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e58:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8004e5a:	2b03      	cmp	r3, #3
 8004e5c:	d1f5      	bne.n	8004e4a <__kernel_rem_pio2+0x4be>
 8004e5e:	ab48      	add	r3, sp, #288	; 0x120
 8004e60:	441d      	add	r5, r3
 8004e62:	46aa      	mov	sl, r5
 8004e64:	46a3      	mov	fp, r4
 8004e66:	f1bb 0f00 	cmp.w	fp, #0
 8004e6a:	dc76      	bgt.n	8004f5a <__kernel_rem_pio2+0x5ce>
 8004e6c:	46aa      	mov	sl, r5
 8004e6e:	46a3      	mov	fp, r4
 8004e70:	f1bb 0f01 	cmp.w	fp, #1
 8004e74:	f300 8090 	bgt.w	8004f98 <__kernel_rem_pio2+0x60c>
 8004e78:	2700      	movs	r7, #0
 8004e7a:	463e      	mov	r6, r7
 8004e7c:	2c01      	cmp	r4, #1
 8004e7e:	f300 80aa 	bgt.w	8004fd6 <__kernel_rem_pio2+0x64a>
 8004e82:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8004e86:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8004e8a:	9b00      	ldr	r3, [sp, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f040 80ac 	bne.w	8004fea <__kernel_rem_pio2+0x65e>
 8004e92:	4603      	mov	r3, r0
 8004e94:	462a      	mov	r2, r5
 8004e96:	9806      	ldr	r0, [sp, #24]
 8004e98:	e9c0 2300 	strd	r2, r3, [r0]
 8004e9c:	4622      	mov	r2, r4
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004ea4:	463a      	mov	r2, r7
 8004ea6:	4633      	mov	r3, r6
 8004ea8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004eac:	e7cd      	b.n	8004e4a <__kernel_rem_pio2+0x4be>
 8004eae:	2000      	movs	r0, #0
 8004eb0:	46a0      	mov	r8, r4
 8004eb2:	4601      	mov	r1, r0
 8004eb4:	ab48      	add	r3, sp, #288	; 0x120
 8004eb6:	441d      	add	r5, r3
 8004eb8:	f1b8 0f00 	cmp.w	r8, #0
 8004ebc:	da3a      	bge.n	8004f34 <__kernel_rem_pio2+0x5a8>
 8004ebe:	9b00      	ldr	r3, [sp, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d03e      	beq.n	8004f42 <__kernel_rem_pio2+0x5b6>
 8004ec4:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8004ec8:	4602      	mov	r2, r0
 8004eca:	462b      	mov	r3, r5
 8004ecc:	9d06      	ldr	r5, [sp, #24]
 8004ece:	2601      	movs	r6, #1
 8004ed0:	e9c5 2300 	strd	r2, r3, [r5]
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8004eda:	f7fb f93d 	bl	8000158 <__aeabi_dsub>
 8004ede:	4684      	mov	ip, r0
 8004ee0:	460f      	mov	r7, r1
 8004ee2:	ad48      	add	r5, sp, #288	; 0x120
 8004ee4:	42b4      	cmp	r4, r6
 8004ee6:	f105 0508 	add.w	r5, r5, #8
 8004eea:	da2c      	bge.n	8004f46 <__kernel_rem_pio2+0x5ba>
 8004eec:	9b00      	ldr	r3, [sp, #0]
 8004eee:	b10b      	cbz	r3, 8004ef4 <__kernel_rem_pio2+0x568>
 8004ef0:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8004ef4:	4662      	mov	r2, ip
 8004ef6:	463b      	mov	r3, r7
 8004ef8:	9906      	ldr	r1, [sp, #24]
 8004efa:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004efe:	e7a4      	b.n	8004e4a <__kernel_rem_pio2+0x4be>
 8004f00:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8004f02:	ab48      	add	r3, sp, #288	; 0x120
 8004f04:	4637      	mov	r7, r6
 8004f06:	441d      	add	r5, r3
 8004f08:	2c00      	cmp	r4, #0
 8004f0a:	da09      	bge.n	8004f20 <__kernel_rem_pio2+0x594>
 8004f0c:	9b00      	ldr	r3, [sp, #0]
 8004f0e:	b10b      	cbz	r3, 8004f14 <__kernel_rem_pio2+0x588>
 8004f10:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8004f14:	4632      	mov	r2, r6
 8004f16:	463b      	mov	r3, r7
 8004f18:	9906      	ldr	r1, [sp, #24]
 8004f1a:	e9c1 2300 	strd	r2, r3, [r1]
 8004f1e:	e794      	b.n	8004e4a <__kernel_rem_pio2+0x4be>
 8004f20:	4630      	mov	r0, r6
 8004f22:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8004f26:	4639      	mov	r1, r7
 8004f28:	f7fb f918 	bl	800015c <__adddf3>
 8004f2c:	3c01      	subs	r4, #1
 8004f2e:	4606      	mov	r6, r0
 8004f30:	460f      	mov	r7, r1
 8004f32:	e7e9      	b.n	8004f08 <__kernel_rem_pio2+0x57c>
 8004f34:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8004f38:	f7fb f910 	bl	800015c <__adddf3>
 8004f3c:	f108 38ff 	add.w	r8, r8, #4294967295
 8004f40:	e7ba      	b.n	8004eb8 <__kernel_rem_pio2+0x52c>
 8004f42:	460d      	mov	r5, r1
 8004f44:	e7c0      	b.n	8004ec8 <__kernel_rem_pio2+0x53c>
 8004f46:	4660      	mov	r0, ip
 8004f48:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004f4c:	4639      	mov	r1, r7
 8004f4e:	f7fb f905 	bl	800015c <__adddf3>
 8004f52:	3601      	adds	r6, #1
 8004f54:	4684      	mov	ip, r0
 8004f56:	460f      	mov	r7, r1
 8004f58:	e7c4      	b.n	8004ee4 <__kernel_rem_pio2+0x558>
 8004f5a:	e9da 6700 	ldrd	r6, r7, [sl]
 8004f5e:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8004f62:	4632      	mov	r2, r6
 8004f64:	463b      	mov	r3, r7
 8004f66:	4640      	mov	r0, r8
 8004f68:	4649      	mov	r1, r9
 8004f6a:	f7fb f8f7 	bl	800015c <__adddf3>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	460b      	mov	r3, r1
 8004f72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f76:	4640      	mov	r0, r8
 8004f78:	4649      	mov	r1, r9
 8004f7a:	f7fb f8ed 	bl	8000158 <__aeabi_dsub>
 8004f7e:	4632      	mov	r2, r6
 8004f80:	463b      	mov	r3, r7
 8004f82:	f7fb f8eb 	bl	800015c <__adddf3>
 8004f86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f8a:	e86a 0102 	strd	r0, r1, [sl], #-8
 8004f8e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004f92:	e9ca 2300 	strd	r2, r3, [sl]
 8004f96:	e766      	b.n	8004e66 <__kernel_rem_pio2+0x4da>
 8004f98:	e9da 8900 	ldrd	r8, r9, [sl]
 8004f9c:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8004fa0:	4642      	mov	r2, r8
 8004fa2:	464b      	mov	r3, r9
 8004fa4:	4630      	mov	r0, r6
 8004fa6:	4639      	mov	r1, r7
 8004fa8:	f7fb f8d8 	bl	800015c <__adddf3>
 8004fac:	4602      	mov	r2, r0
 8004fae:	460b      	mov	r3, r1
 8004fb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fb4:	4630      	mov	r0, r6
 8004fb6:	4639      	mov	r1, r7
 8004fb8:	f7fb f8ce 	bl	8000158 <__aeabi_dsub>
 8004fbc:	4642      	mov	r2, r8
 8004fbe:	464b      	mov	r3, r9
 8004fc0:	f7fb f8cc 	bl	800015c <__adddf3>
 8004fc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fc8:	e86a 0102 	strd	r0, r1, [sl], #-8
 8004fcc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004fd0:	e9ca 2300 	strd	r2, r3, [sl]
 8004fd4:	e74c      	b.n	8004e70 <__kernel_rem_pio2+0x4e4>
 8004fd6:	4638      	mov	r0, r7
 8004fd8:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8004fdc:	4631      	mov	r1, r6
 8004fde:	f7fb f8bd 	bl	800015c <__adddf3>
 8004fe2:	3c01      	subs	r4, #1
 8004fe4:	4607      	mov	r7, r0
 8004fe6:	460e      	mov	r6, r1
 8004fe8:	e748      	b.n	8004e7c <__kernel_rem_pio2+0x4f0>
 8004fea:	9b06      	ldr	r3, [sp, #24]
 8004fec:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8004ff0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004ff4:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8004ff8:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8004ffc:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8005000:	601d      	str	r5, [r3, #0]
 8005002:	615e      	str	r6, [r3, #20]
 8005004:	e721      	b.n	8004e4a <__kernel_rem_pio2+0x4be>
 8005006:	bf00      	nop
 8005008:	41700000 	.word	0x41700000
 800500c:	3e700000 	.word	0x3e700000

08005010 <__kernel_sin>:
 8005010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005014:	b086      	sub	sp, #24
 8005016:	e9cd 2300 	strd	r2, r3, [sp]
 800501a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800501e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005022:	4682      	mov	sl, r0
 8005024:	460c      	mov	r4, r1
 8005026:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005028:	da03      	bge.n	8005032 <__kernel_sin+0x22>
 800502a:	f7fb fce7 	bl	80009fc <__aeabi_d2iz>
 800502e:	2800      	cmp	r0, #0
 8005030:	d050      	beq.n	80050d4 <__kernel_sin+0xc4>
 8005032:	4652      	mov	r2, sl
 8005034:	4623      	mov	r3, r4
 8005036:	4650      	mov	r0, sl
 8005038:	4621      	mov	r1, r4
 800503a:	f7fb fa45 	bl	80004c8 <__aeabi_dmul>
 800503e:	4606      	mov	r6, r0
 8005040:	460f      	mov	r7, r1
 8005042:	4602      	mov	r2, r0
 8005044:	460b      	mov	r3, r1
 8005046:	4650      	mov	r0, sl
 8005048:	4621      	mov	r1, r4
 800504a:	f7fb fa3d 	bl	80004c8 <__aeabi_dmul>
 800504e:	a33e      	add	r3, pc, #248	; (adr r3, 8005148 <__kernel_sin+0x138>)
 8005050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005054:	4680      	mov	r8, r0
 8005056:	4689      	mov	r9, r1
 8005058:	4630      	mov	r0, r6
 800505a:	4639      	mov	r1, r7
 800505c:	f7fb fa34 	bl	80004c8 <__aeabi_dmul>
 8005060:	a33b      	add	r3, pc, #236	; (adr r3, 8005150 <__kernel_sin+0x140>)
 8005062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005066:	f7fb f877 	bl	8000158 <__aeabi_dsub>
 800506a:	4632      	mov	r2, r6
 800506c:	463b      	mov	r3, r7
 800506e:	f7fb fa2b 	bl	80004c8 <__aeabi_dmul>
 8005072:	a339      	add	r3, pc, #228	; (adr r3, 8005158 <__kernel_sin+0x148>)
 8005074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005078:	f7fb f870 	bl	800015c <__adddf3>
 800507c:	4632      	mov	r2, r6
 800507e:	463b      	mov	r3, r7
 8005080:	f7fb fa22 	bl	80004c8 <__aeabi_dmul>
 8005084:	a336      	add	r3, pc, #216	; (adr r3, 8005160 <__kernel_sin+0x150>)
 8005086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508a:	f7fb f865 	bl	8000158 <__aeabi_dsub>
 800508e:	4632      	mov	r2, r6
 8005090:	463b      	mov	r3, r7
 8005092:	f7fb fa19 	bl	80004c8 <__aeabi_dmul>
 8005096:	a334      	add	r3, pc, #208	; (adr r3, 8005168 <__kernel_sin+0x158>)
 8005098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509c:	f7fb f85e 	bl	800015c <__adddf3>
 80050a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050a4:	b9dd      	cbnz	r5, 80050de <__kernel_sin+0xce>
 80050a6:	4602      	mov	r2, r0
 80050a8:	460b      	mov	r3, r1
 80050aa:	4630      	mov	r0, r6
 80050ac:	4639      	mov	r1, r7
 80050ae:	f7fb fa0b 	bl	80004c8 <__aeabi_dmul>
 80050b2:	a32f      	add	r3, pc, #188	; (adr r3, 8005170 <__kernel_sin+0x160>)
 80050b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b8:	f7fb f84e 	bl	8000158 <__aeabi_dsub>
 80050bc:	4642      	mov	r2, r8
 80050be:	464b      	mov	r3, r9
 80050c0:	f7fb fa02 	bl	80004c8 <__aeabi_dmul>
 80050c4:	4602      	mov	r2, r0
 80050c6:	460b      	mov	r3, r1
 80050c8:	4650      	mov	r0, sl
 80050ca:	4621      	mov	r1, r4
 80050cc:	f7fb f846 	bl	800015c <__adddf3>
 80050d0:	4682      	mov	sl, r0
 80050d2:	460c      	mov	r4, r1
 80050d4:	4650      	mov	r0, sl
 80050d6:	4621      	mov	r1, r4
 80050d8:	b006      	add	sp, #24
 80050da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050de:	2200      	movs	r2, #0
 80050e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050e4:	4b24      	ldr	r3, [pc, #144]	; (8005178 <__kernel_sin+0x168>)
 80050e6:	f7fb f9ef 	bl	80004c8 <__aeabi_dmul>
 80050ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050f2:	4640      	mov	r0, r8
 80050f4:	4649      	mov	r1, r9
 80050f6:	f7fb f9e7 	bl	80004c8 <__aeabi_dmul>
 80050fa:	4602      	mov	r2, r0
 80050fc:	460b      	mov	r3, r1
 80050fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005102:	f7fb f829 	bl	8000158 <__aeabi_dsub>
 8005106:	4632      	mov	r2, r6
 8005108:	463b      	mov	r3, r7
 800510a:	f7fb f9dd 	bl	80004c8 <__aeabi_dmul>
 800510e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005112:	f7fb f821 	bl	8000158 <__aeabi_dsub>
 8005116:	a316      	add	r3, pc, #88	; (adr r3, 8005170 <__kernel_sin+0x160>)
 8005118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511c:	4606      	mov	r6, r0
 800511e:	460f      	mov	r7, r1
 8005120:	4640      	mov	r0, r8
 8005122:	4649      	mov	r1, r9
 8005124:	f7fb f9d0 	bl	80004c8 <__aeabi_dmul>
 8005128:	4602      	mov	r2, r0
 800512a:	460b      	mov	r3, r1
 800512c:	4630      	mov	r0, r6
 800512e:	4639      	mov	r1, r7
 8005130:	f7fb f814 	bl	800015c <__adddf3>
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	4650      	mov	r0, sl
 800513a:	4621      	mov	r1, r4
 800513c:	f7fb f80c 	bl	8000158 <__aeabi_dsub>
 8005140:	e7c6      	b.n	80050d0 <__kernel_sin+0xc0>
 8005142:	bf00      	nop
 8005144:	f3af 8000 	nop.w
 8005148:	5acfd57c 	.word	0x5acfd57c
 800514c:	3de5d93a 	.word	0x3de5d93a
 8005150:	8a2b9ceb 	.word	0x8a2b9ceb
 8005154:	3e5ae5e6 	.word	0x3e5ae5e6
 8005158:	57b1fe7d 	.word	0x57b1fe7d
 800515c:	3ec71de3 	.word	0x3ec71de3
 8005160:	19c161d5 	.word	0x19c161d5
 8005164:	3f2a01a0 	.word	0x3f2a01a0
 8005168:	1110f8a6 	.word	0x1110f8a6
 800516c:	3f811111 	.word	0x3f811111
 8005170:	55555549 	.word	0x55555549
 8005174:	3fc55555 	.word	0x3fc55555
 8005178:	3fe00000 	.word	0x3fe00000

0800517c <fabs>:
 800517c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005180:	4770      	bx	lr
 8005182:	0000      	movs	r0, r0
 8005184:	0000      	movs	r0, r0
	...

08005188 <floor>:
 8005188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800518c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8005190:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8005194:	2e13      	cmp	r6, #19
 8005196:	4602      	mov	r2, r0
 8005198:	460b      	mov	r3, r1
 800519a:	4607      	mov	r7, r0
 800519c:	460c      	mov	r4, r1
 800519e:	4605      	mov	r5, r0
 80051a0:	dc33      	bgt.n	800520a <floor+0x82>
 80051a2:	2e00      	cmp	r6, #0
 80051a4:	da14      	bge.n	80051d0 <floor+0x48>
 80051a6:	a334      	add	r3, pc, #208	; (adr r3, 8005278 <floor+0xf0>)
 80051a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ac:	f7fa ffd6 	bl	800015c <__adddf3>
 80051b0:	2200      	movs	r2, #0
 80051b2:	2300      	movs	r3, #0
 80051b4:	f7fb fc18 	bl	80009e8 <__aeabi_dcmpgt>
 80051b8:	b138      	cbz	r0, 80051ca <floor+0x42>
 80051ba:	2c00      	cmp	r4, #0
 80051bc:	da58      	bge.n	8005270 <floor+0xe8>
 80051be:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80051c2:	431d      	orrs	r5, r3
 80051c4:	d001      	beq.n	80051ca <floor+0x42>
 80051c6:	2500      	movs	r5, #0
 80051c8:	4c2d      	ldr	r4, [pc, #180]	; (8005280 <floor+0xf8>)
 80051ca:	4623      	mov	r3, r4
 80051cc:	462f      	mov	r7, r5
 80051ce:	e025      	b.n	800521c <floor+0x94>
 80051d0:	4a2c      	ldr	r2, [pc, #176]	; (8005284 <floor+0xfc>)
 80051d2:	fa42 f806 	asr.w	r8, r2, r6
 80051d6:	ea01 0208 	and.w	r2, r1, r8
 80051da:	4302      	orrs	r2, r0
 80051dc:	d01e      	beq.n	800521c <floor+0x94>
 80051de:	a326      	add	r3, pc, #152	; (adr r3, 8005278 <floor+0xf0>)
 80051e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e4:	f7fa ffba 	bl	800015c <__adddf3>
 80051e8:	2200      	movs	r2, #0
 80051ea:	2300      	movs	r3, #0
 80051ec:	f7fb fbfc 	bl	80009e8 <__aeabi_dcmpgt>
 80051f0:	2800      	cmp	r0, #0
 80051f2:	d0ea      	beq.n	80051ca <floor+0x42>
 80051f4:	2c00      	cmp	r4, #0
 80051f6:	bfbe      	ittt	lt
 80051f8:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80051fc:	fa43 f606 	asrlt.w	r6, r3, r6
 8005200:	19a4      	addlt	r4, r4, r6
 8005202:	2500      	movs	r5, #0
 8005204:	ea24 0408 	bic.w	r4, r4, r8
 8005208:	e7df      	b.n	80051ca <floor+0x42>
 800520a:	2e33      	cmp	r6, #51	; 0x33
 800520c:	dd0a      	ble.n	8005224 <floor+0x9c>
 800520e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005212:	d103      	bne.n	800521c <floor+0x94>
 8005214:	f7fa ffa2 	bl	800015c <__adddf3>
 8005218:	4607      	mov	r7, r0
 800521a:	460b      	mov	r3, r1
 800521c:	4638      	mov	r0, r7
 800521e:	4619      	mov	r1, r3
 8005220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005224:	f04f 32ff 	mov.w	r2, #4294967295
 8005228:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800522c:	fa22 f808 	lsr.w	r8, r2, r8
 8005230:	ea18 0f00 	tst.w	r8, r0
 8005234:	d0f2      	beq.n	800521c <floor+0x94>
 8005236:	a310      	add	r3, pc, #64	; (adr r3, 8005278 <floor+0xf0>)
 8005238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523c:	f7fa ff8e 	bl	800015c <__adddf3>
 8005240:	2200      	movs	r2, #0
 8005242:	2300      	movs	r3, #0
 8005244:	f7fb fbd0 	bl	80009e8 <__aeabi_dcmpgt>
 8005248:	2800      	cmp	r0, #0
 800524a:	d0be      	beq.n	80051ca <floor+0x42>
 800524c:	2c00      	cmp	r4, #0
 800524e:	da02      	bge.n	8005256 <floor+0xce>
 8005250:	2e14      	cmp	r6, #20
 8005252:	d103      	bne.n	800525c <floor+0xd4>
 8005254:	3401      	adds	r4, #1
 8005256:	ea25 0508 	bic.w	r5, r5, r8
 800525a:	e7b6      	b.n	80051ca <floor+0x42>
 800525c:	2301      	movs	r3, #1
 800525e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005262:	fa03 f606 	lsl.w	r6, r3, r6
 8005266:	4435      	add	r5, r6
 8005268:	42bd      	cmp	r5, r7
 800526a:	bf38      	it	cc
 800526c:	18e4      	addcc	r4, r4, r3
 800526e:	e7f2      	b.n	8005256 <floor+0xce>
 8005270:	2500      	movs	r5, #0
 8005272:	462c      	mov	r4, r5
 8005274:	e7a9      	b.n	80051ca <floor+0x42>
 8005276:	bf00      	nop
 8005278:	8800759c 	.word	0x8800759c
 800527c:	7e37e43c 	.word	0x7e37e43c
 8005280:	bff00000 	.word	0xbff00000
 8005284:	000fffff 	.word	0x000fffff

08005288 <scalbn>:
 8005288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800528a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800528e:	4604      	mov	r4, r0
 8005290:	460d      	mov	r5, r1
 8005292:	4617      	mov	r7, r2
 8005294:	460b      	mov	r3, r1
 8005296:	b996      	cbnz	r6, 80052be <scalbn+0x36>
 8005298:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800529c:	4303      	orrs	r3, r0
 800529e:	d039      	beq.n	8005314 <scalbn+0x8c>
 80052a0:	4b33      	ldr	r3, [pc, #204]	; (8005370 <scalbn+0xe8>)
 80052a2:	2200      	movs	r2, #0
 80052a4:	f7fb f910 	bl	80004c8 <__aeabi_dmul>
 80052a8:	4b32      	ldr	r3, [pc, #200]	; (8005374 <scalbn+0xec>)
 80052aa:	4604      	mov	r4, r0
 80052ac:	429f      	cmp	r7, r3
 80052ae:	460d      	mov	r5, r1
 80052b0:	da0f      	bge.n	80052d2 <scalbn+0x4a>
 80052b2:	a32b      	add	r3, pc, #172	; (adr r3, 8005360 <scalbn+0xd8>)
 80052b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b8:	f7fb f906 	bl	80004c8 <__aeabi_dmul>
 80052bc:	e006      	b.n	80052cc <scalbn+0x44>
 80052be:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80052c2:	4296      	cmp	r6, r2
 80052c4:	d10a      	bne.n	80052dc <scalbn+0x54>
 80052c6:	4602      	mov	r2, r0
 80052c8:	f7fa ff48 	bl	800015c <__adddf3>
 80052cc:	4604      	mov	r4, r0
 80052ce:	460d      	mov	r5, r1
 80052d0:	e020      	b.n	8005314 <scalbn+0x8c>
 80052d2:	460b      	mov	r3, r1
 80052d4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80052d8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80052dc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80052e0:	19b9      	adds	r1, r7, r6
 80052e2:	4291      	cmp	r1, r2
 80052e4:	dd0e      	ble.n	8005304 <scalbn+0x7c>
 80052e6:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80052ea:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80052ee:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80052f2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80052f6:	4820      	ldr	r0, [pc, #128]	; (8005378 <scalbn+0xf0>)
 80052f8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80052fc:	a31a      	add	r3, pc, #104	; (adr r3, 8005368 <scalbn+0xe0>)
 80052fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005302:	e7d9      	b.n	80052b8 <scalbn+0x30>
 8005304:	2900      	cmp	r1, #0
 8005306:	dd08      	ble.n	800531a <scalbn+0x92>
 8005308:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800530c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005310:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8005314:	4620      	mov	r0, r4
 8005316:	4629      	mov	r1, r5
 8005318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800531a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800531e:	da12      	bge.n	8005346 <scalbn+0xbe>
 8005320:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005324:	429f      	cmp	r7, r3
 8005326:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800532a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800532e:	dcdc      	bgt.n	80052ea <scalbn+0x62>
 8005330:	a30b      	add	r3, pc, #44	; (adr r3, 8005360 <scalbn+0xd8>)
 8005332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005336:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800533a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800533e:	480f      	ldr	r0, [pc, #60]	; (800537c <scalbn+0xf4>)
 8005340:	f041 011f 	orr.w	r1, r1, #31
 8005344:	e7b8      	b.n	80052b8 <scalbn+0x30>
 8005346:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800534a:	3136      	adds	r1, #54	; 0x36
 800534c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005350:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8005354:	4620      	mov	r0, r4
 8005356:	4629      	mov	r1, r5
 8005358:	2200      	movs	r2, #0
 800535a:	4b09      	ldr	r3, [pc, #36]	; (8005380 <scalbn+0xf8>)
 800535c:	e7ac      	b.n	80052b8 <scalbn+0x30>
 800535e:	bf00      	nop
 8005360:	c2f8f359 	.word	0xc2f8f359
 8005364:	01a56e1f 	.word	0x01a56e1f
 8005368:	8800759c 	.word	0x8800759c
 800536c:	7e37e43c 	.word	0x7e37e43c
 8005370:	43500000 	.word	0x43500000
 8005374:	ffff3cb0 	.word	0xffff3cb0
 8005378:	8800759c 	.word	0x8800759c
 800537c:	c2f8f359 	.word	0xc2f8f359
 8005380:	3c900000 	.word	0x3c900000

08005384 <_init>:
 8005384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005386:	bf00      	nop
 8005388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800538a:	bc08      	pop	{r3}
 800538c:	469e      	mov	lr, r3
 800538e:	4770      	bx	lr

08005390 <_fini>:
 8005390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005392:	bf00      	nop
 8005394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005396:	bc08      	pop	{r3}
 8005398:	469e      	mov	lr, r3
 800539a:	4770      	bx	lr
