
Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ec0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f50  08006fcc  08006fcc  00016fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f1c  08007f1c  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08007f1c  08007f1c  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f1c  08007f1c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f1c  08007f1c  00017f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f20  08007f20  00017f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08007f24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008c8  20000088  08007fac  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000950  08007fac  00020950  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015cae  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dc2  00000000  00000000  00035d5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001208  00000000  00000000  00038b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001110  00000000  00000000  00039d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a673  00000000  00000000  0003ae40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014712  00000000  00000000  000554b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092336  00000000  00000000  00069bc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fbefb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005684  00000000  00000000  000fbf50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08006fb4 	.word	0x08006fb4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08006fb4 	.word	0x08006fb4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <CAN_User_Init>:

uint8_t CAN1_RX_BUF[CAN1_REC_LEN];//接收缓冲,最大CAN1_REC_LEN个字节.末字节为换行符
uint16_t CAN1_RX_STA;//接收状态标记

void CAN_User_Init(CAN_HandleTypeDef* hcan  )//CAN总线用户初始化函数
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b08e      	sub	sp, #56	; 0x38
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
    CAN_FilterTypeDef  sFilterConfig;
    HAL_StatusTypeDef  HAL_Status;
    TxMeg.IDE = CAN_ID_STD;//扩展帧标识（STD标准帧/EXT扩展帧）
 8000164:	4b24      	ldr	r3, [pc, #144]	; (80001f8 <CAN_User_Init+0x9c>)
 8000166:	2200      	movs	r2, #0
 8000168:	609a      	str	r2, [r3, #8]
    TxMeg.RTR = CAN_RTR_DATA;//远程帧标识（DATA数据帧/REMOTE远程帧）
 800016a:	4b23      	ldr	r3, [pc, #140]	; (80001f8 <CAN_User_Init+0x9c>)
 800016c:	2200      	movs	r2, #0
 800016e:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterBank = 0;//过滤器0
 8000170:	2300      	movs	r3, #0
 8000172:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterMode =   CAN_FILTERMODE_IDMASK;//设为IDLIST列表模式/IDMASK屏蔽模式
 8000174:	2300      	movs	r3, #0
 8000176:	627b      	str	r3, [r7, #36]	; 0x24
    sFilterConfig.FilterScale =  CAN_FILTERSCALE_32BIT;//过滤器位宽度
 8000178:	2301      	movs	r3, #1
 800017a:	62bb      	str	r3, [r7, #40]	; 0x28
    sFilterConfig.FilterIdHigh = CAN1_ID_H;//32位基础ID设置（高16位）
 800017c:	2300      	movs	r3, #0
 800017e:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterIdLow  = CAN1_ID_L;//32位基础ID设置（低16位）
 8000180:	2300      	movs	r3, #0
 8000182:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterMaskIdHigh =  CAN1_MASK_H;//32位屏蔽MASK设置（高16位）
 8000184:	2300      	movs	r3, #0
 8000186:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterMaskIdLow  =  CAN1_MASK_L;//32位屏蔽MASK设置（低16位）
 8000188:	2300      	movs	r3, #0
 800018a:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterFIFOAssignment =  CAN_RX_FIFO1;//接收到的报文放入FIFO1位置
 800018c:	2301      	movs	r3, #1
 800018e:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterActivation =  ENABLE;//ENABLE激活过滤器，DISABLE禁止过滤器
 8000190:	2301      	movs	r3, #1
 8000192:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFilterConfig.SlaveStartFilterBank  =  0;//过滤器组设置（单个CAN总线时无用）
 8000194:	2300      	movs	r3, #0
 8000196:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_Status=HAL_CAN_ConfigFilter(hcan,&sFilterConfig);//将以上结构体参数设置到CAN寄存器中
 8000198:	f107 030c 	add.w	r3, r7, #12
 800019c:	4619      	mov	r1, r3
 800019e:	6878      	ldr	r0, [r7, #4]
 80001a0:	f001 fe71 	bl	8001e86 <HAL_CAN_ConfigFilter>
 80001a4:	4603      	mov	r3, r0
 80001a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if(HAL_Status!=HAL_OK){//判断开启是否成功
 80001aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d002      	beq.n	80001b8 <CAN_User_Init+0x5c>
       //开启CAN总线失败的处理程序，写在此处
    	printf("\n\rCAN设置失败！\n\r"); //串口发送
 80001b2:	4812      	ldr	r0, [pc, #72]	; (80001fc <CAN_User_Init+0xa0>)
 80001b4:	f005 fc90 	bl	8005ad8 <iprintf>
    }
    HAL_Status=HAL_CAN_Start(hcan);  //开启CAN总线功能
 80001b8:	6878      	ldr	r0, [r7, #4]
 80001ba:	f001 ff2d 	bl	8002018 <HAL_CAN_Start>
 80001be:	4603      	mov	r3, r0
 80001c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if(HAL_Status!=HAL_OK){//判断开启是否成功
 80001c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d002      	beq.n	80001d2 <CAN_User_Init+0x76>
       //开启CAN总线失败的处理程序，写在此处
    	printf("\n\rCAN初始化失败！\n\r"); //串口发送
 80001cc:	480c      	ldr	r0, [pc, #48]	; (8000200 <CAN_User_Init+0xa4>)
 80001ce:	f005 fc83 	bl	8005ad8 <iprintf>
    }
    //若不使用CAN中断，可删除以下4行
    HAL_Status=HAL_CAN_ActivateNotification(hcan,CAN_IT_RX_FIFO1_MSG_PENDING);//开启CAN总线中断
 80001d2:	2110      	movs	r1, #16
 80001d4:	6878      	ldr	r0, [r7, #4]
 80001d6:	f002 f982 	bl	80024de <HAL_CAN_ActivateNotification>
 80001da:	4603      	mov	r3, r0
 80001dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if(HAL_Status!=HAL_OK){
 80001e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d002      	beq.n	80001ee <CAN_User_Init+0x92>
       //开启CAN总线挂起中断失败的处理程序，写在此处
    	printf("\n\rCAN中断初始化失败！\n\r"); //串口发送
 80001e8:	4806      	ldr	r0, [pc, #24]	; (8000204 <CAN_User_Init+0xa8>)
 80001ea:	f005 fc75 	bl	8005ad8 <iprintf>
    }
}
 80001ee:	bf00      	nop
 80001f0:	3738      	adds	r7, #56	; 0x38
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	200005f8 	.word	0x200005f8
 80001fc:	08006fcc 	.word	0x08006fcc
 8000200:	08006fe0 	.word	0x08006fe0
 8000204:	08006ff4 	.word	0x08006ff4

08000208 <HAL_CAN_RxFifo1MsgPendingCallback>:
void  HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)  //接收回调函数（函数名不可改）
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b086      	sub	sp, #24
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
    uint8_t  Data[8];//接收缓存数组
    HAL_StatusTypeDef HAL_RetVal;//判断状态的枚举
	HAL_RetVal=HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO1,&RxMeg,Data);//接收邮箱中的数据
 8000210:	f107 030c 	add.w	r3, r7, #12
 8000214:	4a0b      	ldr	r2, [pc, #44]	; (8000244 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 8000216:	2101      	movs	r1, #1
 8000218:	6878      	ldr	r0, [r7, #4]
 800021a:	f002 f84f 	bl	80022bc <HAL_CAN_GetRxMessage>
 800021e:	4603      	mov	r3, r0
 8000220:	75fb      	strb	r3, [r7, #23]
	if (HAL_OK==HAL_RetVal){//判断接收是否成功
 8000222:	7dfb      	ldrb	r3, [r7, #23]
 8000224:	2b00      	cmp	r3, #0
 8000226:	d108      	bne.n	800023a <HAL_CAN_RxFifo1MsgPendingCallback+0x32>
		//接收成功后的数据处理程序，写在此处。（数据在Data数组中）
		//以下2行是采用简单的寄存器查寻方式处理接收数据，每次只接收1位。在实际项目中的复杂接收程序可自行编写。
		CAN1_RX_BUF[0]=Data[0];//将接收到的数据放入缓存数组（因只用到1个数据，所以只存放在数据[0]位置）
 8000228:	7b3a      	ldrb	r2, [r7, #12]
 800022a:	4b07      	ldr	r3, [pc, #28]	; (8000248 <HAL_CAN_RxFifo1MsgPendingCallback+0x40>)
 800022c:	701a      	strb	r2, [r3, #0]
		CAN1_RX_STA++;//数据接收标志位加1
 800022e:	4b07      	ldr	r3, [pc, #28]	; (800024c <HAL_CAN_RxFifo1MsgPendingCallback+0x44>)
 8000230:	881b      	ldrh	r3, [r3, #0]
 8000232:	3301      	adds	r3, #1
 8000234:	b29a      	uxth	r2, r3
 8000236:	4b05      	ldr	r3, [pc, #20]	; (800024c <HAL_CAN_RxFifo1MsgPendingCallback+0x44>)
 8000238:	801a      	strh	r2, [r3, #0]
	}
}
 800023a:	bf00      	nop
 800023c:	3718      	adds	r7, #24
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	200005dc 	.word	0x200005dc
 8000248:	200004ec 	.word	0x200004ec
 800024c:	200004e8 	.word	0x200004e8

08000250 <CAN1_SendNormalData>:
//CAN发送数据函数（参数：总线名，ID，数据数组，数量。返回值：0成功HAL_OK，1参数错误HAL_ERROR，2发送失败HAL_BUSY）
//示例：CAN1_SendNormalData(&hcan1,0,CAN_buffer,8);//CAN发送数据函数
uint8_t  CAN1_SendNormalData(CAN_HandleTypeDef* hcan,uint16_t ID,uint8_t *pData,uint16_t  Len)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b088      	sub	sp, #32
 8000254:	af00      	add	r7, sp, #0
 8000256:	60f8      	str	r0, [r7, #12]
 8000258:	607a      	str	r2, [r7, #4]
 800025a:	461a      	mov	r2, r3
 800025c:	460b      	mov	r3, r1
 800025e:	817b      	strh	r3, [r7, #10]
 8000260:	4613      	mov	r3, r2
 8000262:	813b      	strh	r3, [r7, #8]
    HAL_StatusTypeDef HAL_RetVal;//判断状态的枚举
    uint16_t SendTimes,SendCNT=0;
 8000264:	2300      	movs	r3, #0
 8000266:	83bb      	strh	r3, [r7, #28]
    uint8_t  FreeTxNum=0;
 8000268:	2300      	movs	r3, #0
 800026a:	76fb      	strb	r3, [r7, #27]
    uint32_t CAN_TX_BOX0;
    TxMeg.StdId=ID;
 800026c:	897b      	ldrh	r3, [r7, #10]
 800026e:	4a2f      	ldr	r2, [pc, #188]	; (800032c <CAN1_SendNormalData+0xdc>)
 8000270:	6013      	str	r3, [r2, #0]
    if(!hcan||!pData||!Len){
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d005      	beq.n	8000284 <CAN1_SendNormalData+0x34>
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2b00      	cmp	r3, #0
 800027c:	d002      	beq.n	8000284 <CAN1_SendNormalData+0x34>
 800027e:	893b      	ldrh	r3, [r7, #8]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d104      	bne.n	800028e <CAN1_SendNormalData+0x3e>
    	printf("\n\rCAN发送失败！\n\r"); //串口发送
 8000284:	482a      	ldr	r0, [pc, #168]	; (8000330 <CAN1_SendNormalData+0xe0>)
 8000286:	f005 fc27 	bl	8005ad8 <iprintf>
    	return  HAL_ERROR;//如果总线名、数据、数量任何一个为0则返回值为1
 800028a:	2301      	movs	r3, #1
 800028c:	e04a      	b.n	8000324 <CAN1_SendNormalData+0xd4>
    }
    SendTimes=Len/8+(Len%8?1:0);
 800028e:	893b      	ldrh	r3, [r7, #8]
 8000290:	08db      	lsrs	r3, r3, #3
 8000292:	b29a      	uxth	r2, r3
 8000294:	893b      	ldrh	r3, [r7, #8]
 8000296:	f003 0307 	and.w	r3, r3, #7
 800029a:	b29b      	uxth	r3, r3
 800029c:	2b00      	cmp	r3, #0
 800029e:	bf14      	ite	ne
 80002a0:	2301      	movne	r3, #1
 80002a2:	2300      	moveq	r3, #0
 80002a4:	b2db      	uxtb	r3, r3
 80002a6:	b29b      	uxth	r3, r3
 80002a8:	4413      	add	r3, r2
 80002aa:	83fb      	strh	r3, [r7, #30]
    FreeTxNum=HAL_CAN_GetTxMailboxesFreeLevel(hcan);//得出空闲邮箱的数量
 80002ac:	68f8      	ldr	r0, [r7, #12]
 80002ae:	f001 ffd1 	bl	8002254 <HAL_CAN_GetTxMailboxesFreeLevel>
 80002b2:	4603      	mov	r3, r0
 80002b4:	76fb      	strb	r3, [r7, #27]
    TxMeg.DLC=8;
 80002b6:	4b1d      	ldr	r3, [pc, #116]	; (800032c <CAN1_SendNormalData+0xdc>)
 80002b8:	2208      	movs	r2, #8
 80002ba:	611a      	str	r2, [r3, #16]
    while(SendTimes--){//循环判断分批发送是否结束
 80002bc:	e02c      	b.n	8000318 <CAN1_SendNormalData+0xc8>
       if(0==SendTimes){//如果分批发送结束
 80002be:	8bfb      	ldrh	r3, [r7, #30]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d110      	bne.n	80002e6 <CAN1_SendNormalData+0x96>
           if(Len%8)TxMeg.DLC=Len%8;//则加入最后不足8个的数据内容
 80002c4:	893b      	ldrh	r3, [r7, #8]
 80002c6:	f003 0307 	and.w	r3, r3, #7
 80002ca:	b29b      	uxth	r3, r3
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d00a      	beq.n	80002e6 <CAN1_SendNormalData+0x96>
 80002d0:	893b      	ldrh	r3, [r7, #8]
 80002d2:	f003 0307 	and.w	r3, r3, #7
 80002d6:	4a15      	ldr	r2, [pc, #84]	; (800032c <CAN1_SendNormalData+0xdc>)
 80002d8:	6113      	str	r3, [r2, #16]
       }
       while(0 == FreeTxNum){
 80002da:	e004      	b.n	80002e6 <CAN1_SendNormalData+0x96>
            FreeTxNum = HAL_CAN_GetTxMailboxesFreeLevel(hcan);
 80002dc:	68f8      	ldr	r0, [r7, #12]
 80002de:	f001 ffb9 	bl	8002254 <HAL_CAN_GetTxMailboxesFreeLevel>
 80002e2:	4603      	mov	r3, r0
 80002e4:	76fb      	strb	r3, [r7, #27]
       while(0 == FreeTxNum){
 80002e6:	7efb      	ldrb	r3, [r7, #27]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d0f7      	beq.n	80002dc <CAN1_SendNormalData+0x8c>
        }
//       HAL_Delay(1);//延时防止速度过快导致的发送失败
       //开始发送数据（参数：总线名，设置参数，数据，邮箱号）
       HAL_RetVal=HAL_CAN_AddTxMessage(hcan,&TxMeg,pData+SendCNT,&CAN_TX_BOX0);
 80002ec:	8bbb      	ldrh	r3, [r7, #28]
 80002ee:	687a      	ldr	r2, [r7, #4]
 80002f0:	441a      	add	r2, r3
 80002f2:	f107 0314 	add.w	r3, r7, #20
 80002f6:	490d      	ldr	r1, [pc, #52]	; (800032c <CAN1_SendNormalData+0xdc>)
 80002f8:	68f8      	ldr	r0, [r7, #12]
 80002fa:	f001 fed1 	bl	80020a0 <HAL_CAN_AddTxMessage>
 80002fe:	4603      	mov	r3, r0
 8000300:	76bb      	strb	r3, [r7, #26]
       if(HAL_RetVal!=HAL_OK){
 8000302:	7ebb      	ldrb	r3, [r7, #26]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d004      	beq.n	8000312 <CAN1_SendNormalData+0xc2>
    		   printf("\n\rCAN总线忙碌！\n\r"); //串口发送
 8000308:	480a      	ldr	r0, [pc, #40]	; (8000334 <CAN1_SendNormalData+0xe4>)
 800030a:	f005 fbe5 	bl	8005ad8 <iprintf>
    		   return  HAL_BUSY;//如果发送失败，则返回值为2
 800030e:	2302      	movs	r3, #2
 8000310:	e008      	b.n	8000324 <CAN1_SendNormalData+0xd4>
       }
       SendCNT+=8;
 8000312:	8bbb      	ldrh	r3, [r7, #28]
 8000314:	3308      	adds	r3, #8
 8000316:	83bb      	strh	r3, [r7, #28]
    while(SendTimes--){//循环判断分批发送是否结束
 8000318:	8bfb      	ldrh	r3, [r7, #30]
 800031a:	1e5a      	subs	r2, r3, #1
 800031c:	83fa      	strh	r2, [r7, #30]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d1cd      	bne.n	80002be <CAN1_SendNormalData+0x6e>
    }
    return HAL_OK;//如果发送成功结束，返回值为0
 8000322:	2300      	movs	r3, #0
}
 8000324:	4618      	mov	r0, r3
 8000326:	3720      	adds	r7, #32
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	200005f8 	.word	0x200005f8
 8000330:	0800700c 	.word	0x0800700c
 8000334:	08007020 	.word	0x08007020

08000338 <CAN1_printf>:
//CAN总线通信，使用CAN1，这是CAN专用的printf函数
//调用方法：CAN1_printf("123"); //向UART8发送字符123
void CAN1_printf (char *fmt, ...)
{
 8000338:	b40f      	push	{r0, r1, r2, r3}
 800033a:	b580      	push	{r7, lr}
 800033c:	b0b4      	sub	sp, #208	; 0xd0
 800033e:	af00      	add	r7, sp, #0
    char buff[CAN1_REC_LEN+1];  //用于存放转换后的数据 [长度]
    uint16_t i=0;
 8000340:	2300      	movs	r3, #0
 8000342:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
    va_list arg_ptr;
    va_start(arg_ptr, fmt);
 8000346:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800034a:	603b      	str	r3, [r7, #0]
    vsnprintf(buff, CAN1_REC_LEN+1, fmt,  arg_ptr);//数据转换
 800034c:	1d38      	adds	r0, r7, #4
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8000354:	21c9      	movs	r1, #201	; 0xc9
 8000356:	f005 fcfd 	bl	8005d54 <vsniprintf>
    i=strlen(buff);//得出数据长度
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	4618      	mov	r0, r3
 800035e:	f7ff fef5 	bl	800014c <strlen>
 8000362:	4603      	mov	r3, r0
 8000364:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
    if(strlen(buff)>CAN1_REC_LEN)i=CAN1_REC_LEN;//如果长度大于最大值，则长度等于最大值（多出部分忽略）
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	4618      	mov	r0, r3
 800036c:	f7ff feee 	bl	800014c <strlen>
 8000370:	4603      	mov	r3, r0
 8000372:	2bc8      	cmp	r3, #200	; 0xc8
 8000374:	d902      	bls.n	800037c <CAN1_printf+0x44>
 8000376:	23c8      	movs	r3, #200	; 0xc8
 8000378:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
    CAN1_SendNormalData(&hcan,0x12,(uint8_t *)buff,i);//CAN发送数据函数（ID为0x12）
 800037c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8000380:	1d3a      	adds	r2, r7, #4
 8000382:	2112      	movs	r1, #18
 8000384:	4804      	ldr	r0, [pc, #16]	; (8000398 <CAN1_printf+0x60>)
 8000386:	f7ff ff63 	bl	8000250 <CAN1_SendNormalData>
    va_end(arg_ptr);
}
 800038a:	bf00      	nop
 800038c:	37d0      	adds	r7, #208	; 0xd0
 800038e:	46bd      	mov	sp, r7
 8000390:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000394:	b004      	add	sp, #16
 8000396:	4770      	bx	lr
 8000398:	200005b4 	.word	0x200005b4

0800039c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a0:	f001 fbf0 	bl	8001b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003a4:	f000 f83c 	bl	8000420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003a8:	f000 fa4a 	bl	8000840 <MX_GPIO_Init>
  MX_I2C2_Init();
 80003ac:	f000 f8b4 	bl	8000518 <MX_I2C2_Init>
  MX_TIM1_Init();
 80003b0:	f000 f8e0 	bl	8000574 <MX_TIM1_Init>
  MX_TIM2_Init();
 80003b4:	f000 f97c 	bl	80006b0 <MX_TIM2_Init>
  MX_CAN_Init();
 80003b8:	f000 f878 	bl	80004ac <MX_CAN_Init>
  MX_USART1_UART_Init();
 80003bc:	f000 f9ec 	bl	8000798 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80003c0:	f000 fa14 	bl	80007ec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);//将printf()函数映射到UART1串口上
 80003c4:	480f      	ldr	r0, [pc, #60]	; (8000404 <main+0x68>)
 80003c6:	f000 fdef 	bl	8000fa8 <RetargetInit>
  HAL_UART_Receive_IT(&huart1,(uint8_t *)&USART1_NewData,1);//开启串口1接收中断
 80003ca:	2201      	movs	r2, #1
 80003cc:	490e      	ldr	r1, [pc, #56]	; (8000408 <main+0x6c>)
 80003ce:	480d      	ldr	r0, [pc, #52]	; (8000404 <main+0x68>)
 80003d0:	f004 fed0 	bl	8005174 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2,(uint8_t *)&USART2_NewData,1); //开启串口2接收中断
 80003d4:	2201      	movs	r2, #1
 80003d6:	490d      	ldr	r1, [pc, #52]	; (800040c <main+0x70>)
 80003d8:	480d      	ldr	r0, [pc, #52]	; (8000410 <main+0x74>)
 80003da:	f004 fecb 	bl	8005174 <HAL_UART_Receive_IT>
//HAL_CAN_MspDeInit(&hcan);//关闭CAN功能，使USB功能可被电脑识别（因USB与CAN共用RAM空间，不能同时使用）
  HAL_CAN_MspInit(&hcan);//开启CAN功能（因USB与CAN共用RAM，不能同时使用，USB用完后想用CAN可在CAN收发前打开）
 80003de:	480d      	ldr	r0, [pc, #52]	; (8000414 <main+0x78>)
 80003e0:	f001 f910 	bl	8001604 <HAL_CAN_MspInit>
  CAN_User_Init(&hcan);//CAN1总线用户层初始化 同时开启CAN1功能
 80003e4:	480b      	ldr	r0, [pc, #44]	; (8000414 <main+0x78>)
 80003e6:	f7ff feb9 	bl	800015c <CAN_User_Init>
  ssd1306_Init();
 80003ea:	f000 fedb 	bl	80011a4 <ssd1306_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 80003ee:	480a      	ldr	r0, [pc, #40]	; (8000418 <main+0x7c>)
 80003f0:	f003 ff0c 	bl	800420c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80003f4:	4809      	ldr	r0, [pc, #36]	; (800041c <main+0x80>)
 80003f6:	f003 ff09 	bl	800420c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  mode_check();
 80003fa:	f000 fa93 	bl	8000924 <mode_check>
	  oled_show();
 80003fe:	f000 faed 	bl	80009dc <oled_show>
	  mode_check();
 8000402:	e7fa      	b.n	80003fa <main+0x5e>
 8000404:	20000664 	.word	0x20000664
 8000408:	20000870 	.word	0x20000870
 800040c:	200007a5 	.word	0x200007a5
 8000410:	2000075c 	.word	0x2000075c
 8000414:	200005b4 	.word	0x200005b4
 8000418:	200006b4 	.word	0x200006b4
 800041c:	20000714 	.word	0x20000714

08000420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b090      	sub	sp, #64	; 0x40
 8000424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000426:	f107 0318 	add.w	r3, r7, #24
 800042a:	2228      	movs	r2, #40	; 0x28
 800042c:	2100      	movs	r1, #0
 800042e:	4618      	mov	r0, r3
 8000430:	f005 fb4a 	bl	8005ac8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	609a      	str	r2, [r3, #8]
 800043e:	60da      	str	r2, [r3, #12]
 8000440:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000442:	2301      	movs	r3, #1
 8000444:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000446:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800044a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800044c:	2300      	movs	r3, #0
 800044e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000450:	2301      	movs	r3, #1
 8000452:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000454:	2302      	movs	r3, #2
 8000456:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000458:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800045c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800045e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000462:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000464:	f107 0318 	add.w	r3, r7, #24
 8000468:	4618      	mov	r0, r3
 800046a:	f003 fa65 	bl	8003938 <HAL_RCC_OscConfig>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000474:	f000 fd92 	bl	8000f9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000478:	230f      	movs	r3, #15
 800047a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800047c:	2302      	movs	r3, #2
 800047e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000480:	2300      	movs	r3, #0
 8000482:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000484:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000488:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800048a:	2300      	movs	r3, #0
 800048c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	2102      	movs	r1, #2
 8000492:	4618      	mov	r0, r3
 8000494:	f003 fcd0 	bl	8003e38 <HAL_RCC_ClockConfig>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800049e:	f000 fd7d 	bl	8000f9c <Error_Handler>
  }
}
 80004a2:	bf00      	nop
 80004a4:	3740      	adds	r7, #64	; 0x40
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
	...

080004ac <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80004b0:	4b17      	ldr	r3, [pc, #92]	; (8000510 <MX_CAN_Init+0x64>)
 80004b2:	4a18      	ldr	r2, [pc, #96]	; (8000514 <MX_CAN_Init+0x68>)
 80004b4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 80004b6:	4b16      	ldr	r3, [pc, #88]	; (8000510 <MX_CAN_Init+0x64>)
 80004b8:	2209      	movs	r2, #9
 80004ba:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80004bc:	4b14      	ldr	r3, [pc, #80]	; (8000510 <MX_CAN_Init+0x64>)
 80004be:	2200      	movs	r2, #0
 80004c0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004c2:	4b13      	ldr	r3, [pc, #76]	; (8000510 <MX_CAN_Init+0x64>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 80004c8:	4b11      	ldr	r3, [pc, #68]	; (8000510 <MX_CAN_Init+0x64>)
 80004ca:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80004ce:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_7TQ;
 80004d0:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <MX_CAN_Init+0x64>)
 80004d2:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 80004d6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80004d8:	4b0d      	ldr	r3, [pc, #52]	; (8000510 <MX_CAN_Init+0x64>)
 80004da:	2200      	movs	r2, #0
 80004dc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80004de:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <MX_CAN_Init+0x64>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80004e4:	4b0a      	ldr	r3, [pc, #40]	; (8000510 <MX_CAN_Init+0x64>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <MX_CAN_Init+0x64>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80004f0:	4b07      	ldr	r3, [pc, #28]	; (8000510 <MX_CAN_Init+0x64>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80004f6:	4b06      	ldr	r3, [pc, #24]	; (8000510 <MX_CAN_Init+0x64>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80004fc:	4804      	ldr	r0, [pc, #16]	; (8000510 <MX_CAN_Init+0x64>)
 80004fe:	f001 fbc7 	bl	8001c90 <HAL_CAN_Init>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000508:	f000 fd48 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}
 8000510:	200005b4 	.word	0x200005b4
 8000514:	40006400 	.word	0x40006400

08000518 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800051c:	4b12      	ldr	r3, [pc, #72]	; (8000568 <MX_I2C2_Init+0x50>)
 800051e:	4a13      	ldr	r2, [pc, #76]	; (800056c <MX_I2C2_Init+0x54>)
 8000520:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000522:	4b11      	ldr	r3, [pc, #68]	; (8000568 <MX_I2C2_Init+0x50>)
 8000524:	4a12      	ldr	r2, [pc, #72]	; (8000570 <MX_I2C2_Init+0x58>)
 8000526:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000528:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <MX_I2C2_Init+0x50>)
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800052e:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <MX_I2C2_Init+0x50>)
 8000530:	2200      	movs	r2, #0
 8000532:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <MX_I2C2_Init+0x50>)
 8000536:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800053a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800053c:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <MX_I2C2_Init+0x50>)
 800053e:	2200      	movs	r2, #0
 8000540:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000542:	4b09      	ldr	r3, [pc, #36]	; (8000568 <MX_I2C2_Init+0x50>)
 8000544:	2200      	movs	r2, #0
 8000546:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000548:	4b07      	ldr	r3, [pc, #28]	; (8000568 <MX_I2C2_Init+0x50>)
 800054a:	2200      	movs	r2, #0
 800054c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800054e:	4b06      	ldr	r3, [pc, #24]	; (8000568 <MX_I2C2_Init+0x50>)
 8000550:	2200      	movs	r2, #0
 8000552:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000554:	4804      	ldr	r0, [pc, #16]	; (8000568 <MX_I2C2_Init+0x50>)
 8000556:	f002 fd95 	bl	8003084 <HAL_I2C_Init>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000560:	f000 fd1c 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000564:	bf00      	nop
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000610 	.word	0x20000610
 800056c:	40005800 	.word	0x40005800
 8000570:	000186a0 	.word	0x000186a0

08000574 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b096      	sub	sp, #88	; 0x58
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800057a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000588:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]
 80005a2:	615a      	str	r2, [r3, #20]
 80005a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2220      	movs	r2, #32
 80005aa:	2100      	movs	r1, #0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f005 fa8b 	bl	8005ac8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005b2:	4b3d      	ldr	r3, [pc, #244]	; (80006a8 <MX_TIM1_Init+0x134>)
 80005b4:	4a3d      	ldr	r2, [pc, #244]	; (80006ac <MX_TIM1_Init+0x138>)
 80005b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1199;
 80005b8:	4b3b      	ldr	r3, [pc, #236]	; (80006a8 <MX_TIM1_Init+0x134>)
 80005ba:	f240 42af 	movw	r2, #1199	; 0x4af
 80005be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005c0:	4b39      	ldr	r3, [pc, #228]	; (80006a8 <MX_TIM1_Init+0x134>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59999;
 80005c6:	4b38      	ldr	r3, [pc, #224]	; (80006a8 <MX_TIM1_Init+0x134>)
 80005c8:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80005cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ce:	4b36      	ldr	r3, [pc, #216]	; (80006a8 <MX_TIM1_Init+0x134>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005d4:	4b34      	ldr	r3, [pc, #208]	; (80006a8 <MX_TIM1_Init+0x134>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005da:	4b33      	ldr	r3, [pc, #204]	; (80006a8 <MX_TIM1_Init+0x134>)
 80005dc:	2200      	movs	r2, #0
 80005de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005e0:	4831      	ldr	r0, [pc, #196]	; (80006a8 <MX_TIM1_Init+0x134>)
 80005e2:	f003 fdc3 	bl	800416c <HAL_TIM_Base_Init>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80005ec:	f000 fcd6 	bl	8000f9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005fa:	4619      	mov	r1, r3
 80005fc:	482a      	ldr	r0, [pc, #168]	; (80006a8 <MX_TIM1_Init+0x134>)
 80005fe:	f004 f80f 	bl	8004620 <HAL_TIM_ConfigClockSource>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000608:	f000 fcc8 	bl	8000f9c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800060c:	4826      	ldr	r0, [pc, #152]	; (80006a8 <MX_TIM1_Init+0x134>)
 800060e:	f003 fe4f 	bl	80042b0 <HAL_TIM_OC_Init>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000618:	f000 fcc0 	bl	8000f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800061c:	2300      	movs	r3, #0
 800061e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000620:	2300      	movs	r3, #0
 8000622:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000624:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000628:	4619      	mov	r1, r3
 800062a:	481f      	ldr	r0, [pc, #124]	; (80006a8 <MX_TIM1_Init+0x134>)
 800062c:	f004 fb60 	bl	8004cf0 <HAL_TIMEx_MasterConfigSynchronization>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000636:	f000 fcb1 	bl	8000f9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800063a:	2300      	movs	r3, #0
 800063c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000642:	2300      	movs	r3, #0
 8000644:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000646:	2300      	movs	r3, #0
 8000648:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800064a:	2300      	movs	r3, #0
 800064c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800064e:	2300      	movs	r3, #0
 8000650:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000652:	2300      	movs	r3, #0
 8000654:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800065a:	2200      	movs	r2, #0
 800065c:	4619      	mov	r1, r3
 800065e:	4812      	ldr	r0, [pc, #72]	; (80006a8 <MX_TIM1_Init+0x134>)
 8000660:	f003 ff86 	bl	8004570 <HAL_TIM_OC_ConfigChannel>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800066a:	f000 fc97 	bl	8000f9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000672:	2300      	movs	r3, #0
 8000674:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000682:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000686:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000688:	2300      	movs	r3, #0
 800068a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	4619      	mov	r1, r3
 8000690:	4805      	ldr	r0, [pc, #20]	; (80006a8 <MX_TIM1_Init+0x134>)
 8000692:	f004 fb8b 	bl	8004dac <HAL_TIMEx_ConfigBreakDeadTime>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 800069c:	f000 fc7e 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80006a0:	bf00      	nop
 80006a2:	3758      	adds	r7, #88	; 0x58
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	200006b4 	.word	0x200006b4
 80006ac:	40012c00 	.word	0x40012c00

080006b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08e      	sub	sp, #56	; 0x38
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c4:	f107 0320 	add.w	r3, r7, #32
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
 80006dc:	615a      	str	r2, [r3, #20]
 80006de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006e0:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <MX_TIM2_Init+0xe4>)
 80006e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1199;
 80006e8:	4b2a      	ldr	r3, [pc, #168]	; (8000794 <MX_TIM2_Init+0xe4>)
 80006ea:	f240 42af 	movw	r2, #1199	; 0x4af
 80006ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f0:	4b28      	ldr	r3, [pc, #160]	; (8000794 <MX_TIM2_Init+0xe4>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 29999;
 80006f6:	4b27      	ldr	r3, [pc, #156]	; (8000794 <MX_TIM2_Init+0xe4>)
 80006f8:	f247 522f 	movw	r2, #29999	; 0x752f
 80006fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006fe:	4b25      	ldr	r3, [pc, #148]	; (8000794 <MX_TIM2_Init+0xe4>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000704:	4b23      	ldr	r3, [pc, #140]	; (8000794 <MX_TIM2_Init+0xe4>)
 8000706:	2200      	movs	r2, #0
 8000708:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800070a:	4822      	ldr	r0, [pc, #136]	; (8000794 <MX_TIM2_Init+0xe4>)
 800070c:	f003 fd2e 	bl	800416c <HAL_TIM_Base_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000716:	f000 fc41 	bl	8000f9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800071a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000720:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000724:	4619      	mov	r1, r3
 8000726:	481b      	ldr	r0, [pc, #108]	; (8000794 <MX_TIM2_Init+0xe4>)
 8000728:	f003 ff7a 	bl	8004620 <HAL_TIM_ConfigClockSource>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000732:	f000 fc33 	bl	8000f9c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000736:	4817      	ldr	r0, [pc, #92]	; (8000794 <MX_TIM2_Init+0xe4>)
 8000738:	f003 fdba 	bl	80042b0 <HAL_TIM_OC_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000742:	f000 fc2b 	bl	8000f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000746:	2300      	movs	r3, #0
 8000748:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800074a:	2300      	movs	r3, #0
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800074e:	f107 0320 	add.w	r3, r7, #32
 8000752:	4619      	mov	r1, r3
 8000754:	480f      	ldr	r0, [pc, #60]	; (8000794 <MX_TIM2_Init+0xe4>)
 8000756:	f004 facb 	bl	8004cf0 <HAL_TIMEx_MasterConfigSynchronization>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000760:	f000 fc1c 	bl	8000f9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000764:	2300      	movs	r3, #0
 8000766:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800076c:	2300      	movs	r3, #0
 800076e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	2200      	movs	r2, #0
 8000778:	4619      	mov	r1, r3
 800077a:	4806      	ldr	r0, [pc, #24]	; (8000794 <MX_TIM2_Init+0xe4>)
 800077c:	f003 fef8 	bl	8004570 <HAL_TIM_OC_ConfigChannel>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000786:	f000 fc09 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	3738      	adds	r7, #56	; 0x38
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000714 	.word	0x20000714

08000798 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 800079e:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <MX_USART1_UART_Init+0x50>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007d0:	f004 fb4f 	bl	8004e72 <HAL_UART_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007da:	f000 fbdf 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000664 	.word	0x20000664
 80007e8:	40013800 	.word	0x40013800

080007ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 80007f2:	4a12      	ldr	r2, [pc, #72]	; (800083c <MX_USART2_UART_Init+0x50>)
 80007f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 80007f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 8000812:	220c      	movs	r2, #12
 8000814:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 8000824:	f004 fb25 	bl	8004e72 <HAL_UART_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800082e:	f000 fbb5 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	2000075c 	.word	0x2000075c
 800083c:	40004400 	.word	0x40004400

08000840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b088      	sub	sp, #32
 8000844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	f107 0310 	add.w	r3, r7, #16
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000854:	4b2f      	ldr	r3, [pc, #188]	; (8000914 <MX_GPIO_Init+0xd4>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	4a2e      	ldr	r2, [pc, #184]	; (8000914 <MX_GPIO_Init+0xd4>)
 800085a:	f043 0304 	orr.w	r3, r3, #4
 800085e:	6193      	str	r3, [r2, #24]
 8000860:	4b2c      	ldr	r3, [pc, #176]	; (8000914 <MX_GPIO_Init+0xd4>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f003 0304 	and.w	r3, r3, #4
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086c:	4b29      	ldr	r3, [pc, #164]	; (8000914 <MX_GPIO_Init+0xd4>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	4a28      	ldr	r2, [pc, #160]	; (8000914 <MX_GPIO_Init+0xd4>)
 8000872:	f043 0310 	orr.w	r3, r3, #16
 8000876:	6193      	str	r3, [r2, #24]
 8000878:	4b26      	ldr	r3, [pc, #152]	; (8000914 <MX_GPIO_Init+0xd4>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	f003 0310 	and.w	r3, r3, #16
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000884:	4b23      	ldr	r3, [pc, #140]	; (8000914 <MX_GPIO_Init+0xd4>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	4a22      	ldr	r2, [pc, #136]	; (8000914 <MX_GPIO_Init+0xd4>)
 800088a:	f043 0308 	orr.w	r3, r3, #8
 800088e:	6193      	str	r3, [r2, #24]
 8000890:	4b20      	ldr	r3, [pc, #128]	; (8000914 <MX_GPIO_Init+0xd4>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f003 0308 	and.w	r3, r3, #8
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800089c:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <MX_GPIO_Init+0xd4>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	4a1c      	ldr	r2, [pc, #112]	; (8000914 <MX_GPIO_Init+0xd4>)
 80008a2:	f043 0320 	orr.w	r3, r3, #32
 80008a6:	6193      	str	r3, [r2, #24]
 80008a8:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_GPIO_Init+0xd4>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f003 0320 	and.w	r3, r3, #32
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2130      	movs	r1, #48	; 0x30
 80008b8:	4817      	ldr	r0, [pc, #92]	; (8000918 <MX_GPIO_Init+0xd8>)
 80008ba:	f002 fbb2 	bl	8003022 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80008be:	2330      	movs	r3, #48	; 0x30
 80008c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2302      	movs	r3, #2
 80008cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ce:	f107 0310 	add.w	r3, r7, #16
 80008d2:	4619      	mov	r1, r3
 80008d4:	4810      	ldr	r0, [pc, #64]	; (8000918 <MX_GPIO_Init+0xd8>)
 80008d6:	f002 fa09 	bl	8002cec <HAL_GPIO_Init>

  /*Configure GPIO pins : SW4_Pin SW3_Pin */
  GPIO_InitStruct.Pin = SW4_Pin|SW3_Pin;
 80008da:	2341      	movs	r3, #65	; 0x41
 80008dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e6:	f107 0310 	add.w	r3, r7, #16
 80008ea:	4619      	mov	r1, r3
 80008ec:	480b      	ldr	r0, [pc, #44]	; (800091c <MX_GPIO_Init+0xdc>)
 80008ee:	f002 f9fd 	bl	8002cec <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin SW1_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|SW1_Pin;
 80008f2:	2318      	movs	r3, #24
 80008f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008fe:	f107 0310 	add.w	r3, r7, #16
 8000902:	4619      	mov	r1, r3
 8000904:	4806      	ldr	r0, [pc, #24]	; (8000920 <MX_GPIO_Init+0xe0>)
 8000906:	f002 f9f1 	bl	8002cec <HAL_GPIO_Init>

}
 800090a:	bf00      	nop
 800090c:	3720      	adds	r7, #32
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40021000 	.word	0x40021000
 8000918:	40011000 	.word	0x40011000
 800091c:	40010c00 	.word	0x40010c00
 8000920:	40011400 	.word	0x40011400

08000924 <mode_check>:

/* USER CODE BEGIN 4 */
void mode_check(){
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
	int temp = check_sw();
 800092a:	f000 fa7b 	bl	8000e24 <check_sw>
 800092e:	6038      	str	r0, [r7, #0]
	if(temp == 0 && CAN1_RX_STA == 0)return;
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d103      	bne.n	800093e <mode_check+0x1a>
 8000936:	4b25      	ldr	r3, [pc, #148]	; (80009cc <mode_check+0xa8>)
 8000938:	881b      	ldrh	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d03f      	beq.n	80009be <mode_check+0x9a>
	int sw = temp;
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	607b      	str	r3, [r7, #4]
	CAN1_printf("%d",sw);
 8000942:	6879      	ldr	r1, [r7, #4]
 8000944:	4822      	ldr	r0, [pc, #136]	; (80009d0 <mode_check+0xac>)
 8000946:	f7ff fcf7 	bl	8000338 <CAN1_printf>
	if(CAN1_RX_STA!=0)//CAN判断中断接收标志位【处理从CAN外部设备接收的字符】
 800094a:	4b20      	ldr	r3, [pc, #128]	; (80009cc <mode_check+0xa8>)
 800094c:	881b      	ldrh	r3, [r3, #0]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d006      	beq.n	8000960 <mode_check+0x3c>
	{
		sw = CAN1_RX_BUF[0] - 48;
 8000952:	4b20      	ldr	r3, [pc, #128]	; (80009d4 <mode_check+0xb0>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	3b30      	subs	r3, #48	; 0x30
 8000958:	607b      	str	r3, [r7, #4]
		CAN1_RX_STA = 0;
 800095a:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <mode_check+0xa8>)
 800095c:	2200      	movs	r2, #0
 800095e:	801a      	strh	r2, [r3, #0]
	}
	if(sw == 1){
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d110      	bne.n	8000988 <mode_check+0x64>
		if(clockmode == 0 || clockmode == 1){
 8000966:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <mode_check+0xb4>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d003      	beq.n	8000976 <mode_check+0x52>
 800096e:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <mode_check+0xb4>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d105      	bne.n	8000982 <mode_check+0x5e>
			clockmode++;
 8000976:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <mode_check+0xb4>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	3301      	adds	r3, #1
 800097c:	4a16      	ldr	r2, [pc, #88]	; (80009d8 <mode_check+0xb4>)
 800097e:	6013      	str	r3, [r2, #0]
 8000980:	e002      	b.n	8000988 <mode_check+0x64>
		}
		else
		{
			clockmode = 0;
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <mode_check+0xb4>)
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
		}
	}

	//setmode
	if(sw == 4){
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2b04      	cmp	r3, #4
 800098c:	d119      	bne.n	80009c2 <mode_check+0x9e>
		if(clockmode == 0){
 800098e:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <mode_check+0xb4>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d103      	bne.n	800099e <mode_check+0x7a>
			//set_time
			clockmode = 3;
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <mode_check+0xb4>)
 8000998:	2203      	movs	r2, #3
 800099a:	601a      	str	r2, [r3, #0]
		else if(clockmode == 2){
			//set alarm
			clockmode = 5;
		}
	}
	return;
 800099c:	e011      	b.n	80009c2 <mode_check+0x9e>
		else if(clockmode == 1){
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <mode_check+0xb4>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d103      	bne.n	80009ae <mode_check+0x8a>
			clockmode = 4;
 80009a6:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <mode_check+0xb4>)
 80009a8:	2204      	movs	r2, #4
 80009aa:	601a      	str	r2, [r3, #0]
	return;
 80009ac:	e009      	b.n	80009c2 <mode_check+0x9e>
		else if(clockmode == 2){
 80009ae:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <mode_check+0xb4>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	2b02      	cmp	r3, #2
 80009b4:	d105      	bne.n	80009c2 <mode_check+0x9e>
			clockmode = 5;
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <mode_check+0xb4>)
 80009b8:	2205      	movs	r2, #5
 80009ba:	601a      	str	r2, [r3, #0]
	return;
 80009bc:	e001      	b.n	80009c2 <mode_check+0x9e>
	if(temp == 0 && CAN1_RX_STA == 0)return;
 80009be:	bf00      	nop
 80009c0:	e000      	b.n	80009c4 <mode_check+0xa0>
	return;
 80009c2:	bf00      	nop
}
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200004e8 	.word	0x200004e8
 80009d0:	08007034 	.word	0x08007034
 80009d4:	200004ec 	.word	0x200004ec
 80009d8:	200000a4 	.word	0x200000a4

080009dc <oled_show>:

void oled_show(){
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
	//clock mode
	if(clockmode == 0){
 80009e0:	4b2a      	ldr	r3, [pc, #168]	; (8000a8c <oled_show+0xb0>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d102      	bne.n	80009ee <oled_show+0x12>
		show_time();
 80009e8:	f000 f85c 	bl	8000aa4 <show_time>
 80009ec:	e028      	b.n	8000a40 <oled_show+0x64>
	}
	//calendar mode
	else if(clockmode == 1){
 80009ee:	4b27      	ldr	r3, [pc, #156]	; (8000a8c <oled_show+0xb0>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d102      	bne.n	80009fc <oled_show+0x20>
		show_calendar();
 80009f6:	f000 f8c7 	bl	8000b88 <show_calendar>
 80009fa:	e021      	b.n	8000a40 <oled_show+0x64>
	}
	//alarm mode
	else if(clockmode == 2){
 80009fc:	4b23      	ldr	r3, [pc, #140]	; (8000a8c <oled_show+0xb0>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b02      	cmp	r3, #2
 8000a02:	d102      	bne.n	8000a0a <oled_show+0x2e>
		show_alarm();
 8000a04:	f000 f87a 	bl	8000afc <show_alarm>
 8000a08:	e01a      	b.n	8000a40 <oled_show+0x64>
	}
	//set mode
	else if(clockmode == 3 || clockmode == 4 || clockmode == 5){
 8000a0a:	4b20      	ldr	r3, [pc, #128]	; (8000a8c <oled_show+0xb0>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2b03      	cmp	r3, #3
 8000a10:	d007      	beq.n	8000a22 <oled_show+0x46>
 8000a12:	4b1e      	ldr	r3, [pc, #120]	; (8000a8c <oled_show+0xb0>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2b04      	cmp	r3, #4
 8000a18:	d003      	beq.n	8000a22 <oled_show+0x46>
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <oled_show+0xb0>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2b05      	cmp	r3, #5
 8000a20:	d102      	bne.n	8000a28 <oled_show+0x4c>
		show_set();
 8000a22:	f000 f8dd 	bl	8000be0 <show_set>
 8000a26:	e00b      	b.n	8000a40 <oled_show+0x64>
	}
	//error mode
	else if(clockmode == 6){
 8000a28:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <oled_show+0xb0>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b06      	cmp	r3, #6
 8000a2e:	d102      	bne.n	8000a36 <oled_show+0x5a>
		show_error();
 8000a30:	f000 f9de 	bl	8000df0 <show_error>
 8000a34:	e004      	b.n	8000a40 <oled_show+0x64>
	}
	//unnormal
	else {
		clockmode = CAN1_RX_BUF[0];
 8000a36:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <oled_show+0xb4>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <oled_show+0xb0>)
 8000a3e:	601a      	str	r2, [r3, #0]
	}

	ssd1306_Fill(Black);
 8000a40:	2000      	movs	r0, #0
 8000a42:	f000 fc19 	bl	8001278 <ssd1306_Fill>
	ssd1306_SetCursor(2,0);
 8000a46:	2100      	movs	r1, #0
 8000a48:	2002      	movs	r0, #2
 8000a4a:	f000 fd5f 	bl	800150c <ssd1306_SetCursor>
	ssd1306_WriteString(line1, Font_11x18, White);
 8000a4e:	4a11      	ldr	r2, [pc, #68]	; (8000a94 <oled_show+0xb8>)
 8000a50:	2301      	movs	r3, #1
 8000a52:	ca06      	ldmia	r2, {r1, r2}
 8000a54:	4810      	ldr	r0, [pc, #64]	; (8000a98 <oled_show+0xbc>)
 8000a56:	f000 fd33 	bl	80014c0 <ssd1306_WriteString>
	ssd1306_SetCursor(2,18);
 8000a5a:	2112      	movs	r1, #18
 8000a5c:	2002      	movs	r0, #2
 8000a5e:	f000 fd55 	bl	800150c <ssd1306_SetCursor>
	ssd1306_WriteString(line2, Font_11x18, White);
 8000a62:	4a0c      	ldr	r2, [pc, #48]	; (8000a94 <oled_show+0xb8>)
 8000a64:	2301      	movs	r3, #1
 8000a66:	ca06      	ldmia	r2, {r1, r2}
 8000a68:	480c      	ldr	r0, [pc, #48]	; (8000a9c <oled_show+0xc0>)
 8000a6a:	f000 fd29 	bl	80014c0 <ssd1306_WriteString>
	ssd1306_SetCursor(2,36);
 8000a6e:	2124      	movs	r1, #36	; 0x24
 8000a70:	2002      	movs	r0, #2
 8000a72:	f000 fd4b 	bl	800150c <ssd1306_SetCursor>
	ssd1306_WriteString(line3, Font_11x18, White);
 8000a76:	4a07      	ldr	r2, [pc, #28]	; (8000a94 <oled_show+0xb8>)
 8000a78:	2301      	movs	r3, #1
 8000a7a:	ca06      	ldmia	r2, {r1, r2}
 8000a7c:	4808      	ldr	r0, [pc, #32]	; (8000aa0 <oled_show+0xc4>)
 8000a7e:	f000 fd1f 	bl	80014c0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000a82:	f000 fc1b 	bl	80012bc <ssd1306_UpdateScreen>
	return;
 8000a86:	bf00      	nop
}
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	200000a4 	.word	0x200000a4
 8000a90:	200004ec 	.word	0x200004ec
 8000a94:	20000010 	.word	0x20000010
 8000a98:	200006a8 	.word	0x200006a8
 8000a9c:	20000708 	.word	0x20000708
 8000aa0:	200006fc 	.word	0x200006fc

08000aa4 <show_time>:

void show_time(){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af02      	add	r7, sp, #8
	sprintf(line1,"    time   ");
 8000aaa:	490b      	ldr	r1, [pc, #44]	; (8000ad8 <show_time+0x34>)
 8000aac:	480b      	ldr	r0, [pc, #44]	; (8000adc <show_time+0x38>)
 8000aae:	f005 f905 	bl	8005cbc <siprintf>
	sprintf(line2," %2d:%2d:%2d ",hour,minute,second);
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <show_time+0x3c>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <show_time+0x40>)
 8000ab8:	6819      	ldr	r1, [r3, #0]
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <show_time+0x44>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	9300      	str	r3, [sp, #0]
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	490a      	ldr	r1, [pc, #40]	; (8000aec <show_time+0x48>)
 8000ac4:	480a      	ldr	r0, [pc, #40]	; (8000af0 <show_time+0x4c>)
 8000ac6:	f005 f8f9 	bl	8005cbc <siprintf>
	sprintf(line3,"           ");
 8000aca:	490a      	ldr	r1, [pc, #40]	; (8000af4 <show_time+0x50>)
 8000acc:	480a      	ldr	r0, [pc, #40]	; (8000af8 <show_time+0x54>)
 8000ace:	f005 f8f5 	bl	8005cbc <siprintf>
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	08007038 	.word	0x08007038
 8000adc:	200006a8 	.word	0x200006a8
 8000ae0:	200000b0 	.word	0x200000b0
 8000ae4:	200000ac 	.word	0x200000ac
 8000ae8:	200000a8 	.word	0x200000a8
 8000aec:	08007044 	.word	0x08007044
 8000af0:	20000708 	.word	0x20000708
 8000af4:	08007054 	.word	0x08007054
 8000af8:	200006fc 	.word	0x200006fc

08000afc <show_alarm>:

void show_alarm(){
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
	sprintf(line1,"   alarm   ");
 8000b00:	4917      	ldr	r1, [pc, #92]	; (8000b60 <show_alarm+0x64>)
 8000b02:	4818      	ldr	r0, [pc, #96]	; (8000b64 <show_alarm+0x68>)
 8000b04:	f005 f8da 	bl	8005cbc <siprintf>
	if(alarm1[0]) sprintf(line1,"1.%2d:%2d  ON",alarm1[1],alarm1[2]);
 8000b08:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <show_alarm+0x6c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d008      	beq.n	8000b22 <show_alarm+0x26>
 8000b10:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <show_alarm+0x6c>)
 8000b12:	685a      	ldr	r2, [r3, #4]
 8000b14:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <show_alarm+0x6c>)
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	4914      	ldr	r1, [pc, #80]	; (8000b6c <show_alarm+0x70>)
 8000b1a:	4812      	ldr	r0, [pc, #72]	; (8000b64 <show_alarm+0x68>)
 8000b1c:	f005 f8ce 	bl	8005cbc <siprintf>
 8000b20:	e007      	b.n	8000b32 <show_alarm+0x36>
	else sprintf(line2,"1.%2d:%2d OFF",alarm1[1],alarm1[2]);
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <show_alarm+0x6c>)
 8000b24:	685a      	ldr	r2, [r3, #4]
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <show_alarm+0x6c>)
 8000b28:	689b      	ldr	r3, [r3, #8]
 8000b2a:	4911      	ldr	r1, [pc, #68]	; (8000b70 <show_alarm+0x74>)
 8000b2c:	4811      	ldr	r0, [pc, #68]	; (8000b74 <show_alarm+0x78>)
 8000b2e:	f005 f8c5 	bl	8005cbc <siprintf>

	if(alarm2[0]) sprintf(line2,"2.%2d:%2d  ON",alarm2[1],alarm2[2]);
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <show_alarm+0x7c>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d008      	beq.n	8000b4c <show_alarm+0x50>
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <show_alarm+0x7c>)
 8000b3c:	685a      	ldr	r2, [r3, #4]
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <show_alarm+0x7c>)
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	490e      	ldr	r1, [pc, #56]	; (8000b7c <show_alarm+0x80>)
 8000b44:	480b      	ldr	r0, [pc, #44]	; (8000b74 <show_alarm+0x78>)
 8000b46:	f005 f8b9 	bl	8005cbc <siprintf>
	else sprintf(line3,"2.%2d:%2d OFF",alarm2[1],alarm2[2]);
}
 8000b4a:	e007      	b.n	8000b5c <show_alarm+0x60>
	else sprintf(line3,"2.%2d:%2d OFF",alarm2[1],alarm2[2]);
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <show_alarm+0x7c>)
 8000b4e:	685a      	ldr	r2, [r3, #4]
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <show_alarm+0x7c>)
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	490a      	ldr	r1, [pc, #40]	; (8000b80 <show_alarm+0x84>)
 8000b56:	480b      	ldr	r0, [pc, #44]	; (8000b84 <show_alarm+0x88>)
 8000b58:	f005 f8b0 	bl	8005cbc <siprintf>
}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	08007060 	.word	0x08007060
 8000b64:	200006a8 	.word	0x200006a8
 8000b68:	200000b4 	.word	0x200000b4
 8000b6c:	0800706c 	.word	0x0800706c
 8000b70:	0800707c 	.word	0x0800707c
 8000b74:	20000708 	.word	0x20000708
 8000b78:	200000c0 	.word	0x200000c0
 8000b7c:	0800708c 	.word	0x0800708c
 8000b80:	0800709c 	.word	0x0800709c
 8000b84:	200006fc 	.word	0x200006fc

08000b88 <show_calendar>:

void show_calendar(){
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af02      	add	r7, sp, #8
	sprintf(line1,"  calendar ");
 8000b8e:	490b      	ldr	r1, [pc, #44]	; (8000bbc <show_calendar+0x34>)
 8000b90:	480b      	ldr	r0, [pc, #44]	; (8000bc0 <show_calendar+0x38>)
 8000b92:	f005 f893 	bl	8005cbc <siprintf>
	sprintf(line2," %4d.%d.%2d",year,month,date);
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <show_calendar+0x3c>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <show_calendar+0x40>)
 8000b9c:	6819      	ldr	r1, [r3, #0]
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <show_calendar+0x44>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	9300      	str	r3, [sp, #0]
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	490a      	ldr	r1, [pc, #40]	; (8000bd0 <show_calendar+0x48>)
 8000ba8:	480a      	ldr	r0, [pc, #40]	; (8000bd4 <show_calendar+0x4c>)
 8000baa:	f005 f887 	bl	8005cbc <siprintf>
	sprintf(line3,"           ");
 8000bae:	490a      	ldr	r1, [pc, #40]	; (8000bd8 <show_calendar+0x50>)
 8000bb0:	480a      	ldr	r0, [pc, #40]	; (8000bdc <show_calendar+0x54>)
 8000bb2:	f005 f883 	bl	8005cbc <siprintf>
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	080070ac 	.word	0x080070ac
 8000bc0:	200006a8 	.word	0x200006a8
 8000bc4:	20000000 	.word	0x20000000
 8000bc8:	20000004 	.word	0x20000004
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	080070b8 	.word	0x080070b8
 8000bd4:	20000708 	.word	0x20000708
 8000bd8:	08007054 	.word	0x08007054
 8000bdc:	200006fc 	.word	0x200006fc

08000be0 <show_set>:

void show_set(int set){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af02      	add	r7, sp, #8
 8000be6:	6078      	str	r0, [r7, #4]
	int sw = check_sw();
 8000be8:	f000 f91c 	bl	8000e24 <check_sw>
 8000bec:	60f8      	str	r0, [r7, #12]
	static int unit = 2;
	static int unit1 = 0;

	//change set unit
	if(sw == 4){
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	2b04      	cmp	r3, #4
 8000bf2:	d10c      	bne.n	8000c0e <show_set+0x2e>
		if(unit < 2) unit++;
 8000bf4:	4b6f      	ldr	r3, [pc, #444]	; (8000db4 <show_set+0x1d4>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	dc05      	bgt.n	8000c08 <show_set+0x28>
 8000bfc:	4b6d      	ldr	r3, [pc, #436]	; (8000db4 <show_set+0x1d4>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	3301      	adds	r3, #1
 8000c02:	4a6c      	ldr	r2, [pc, #432]	; (8000db4 <show_set+0x1d4>)
 8000c04:	6013      	str	r3, [r2, #0]
 8000c06:	e002      	b.n	8000c0e <show_set+0x2e>
		else unit = 0;
 8000c08:	4b6a      	ldr	r3, [pc, #424]	; (8000db4 <show_set+0x1d4>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
	if(sw == 4){

	}

	//set time
	if(clockmode == 3){
 8000c0e:	4b6a      	ldr	r3, [pc, #424]	; (8000db8 <show_set+0x1d8>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2b03      	cmp	r3, #3
 8000c14:	f040 80c3 	bne.w	8000d9e <show_set+0x1be>
		sprintf(line1,"    time   ");
 8000c18:	4968      	ldr	r1, [pc, #416]	; (8000dbc <show_set+0x1dc>)
 8000c1a:	4869      	ldr	r0, [pc, #420]	; (8000dc0 <show_set+0x1e0>)
 8000c1c:	f005 f84e 	bl	8005cbc <siprintf>

		//set time of hour
		if(unit == 0){
 8000c20:	4b64      	ldr	r3, [pc, #400]	; (8000db4 <show_set+0x1d4>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d13b      	bne.n	8000ca0 <show_set+0xc0>
			if(twinkle == 0)sprintf(line2," %2d:%2d:%2d ",hour,minute,second);
 8000c28:	4b66      	ldr	r3, [pc, #408]	; (8000dc4 <show_set+0x1e4>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d10c      	bne.n	8000c4a <show_set+0x6a>
 8000c30:	4b65      	ldr	r3, [pc, #404]	; (8000dc8 <show_set+0x1e8>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4b65      	ldr	r3, [pc, #404]	; (8000dcc <show_set+0x1ec>)
 8000c36:	6819      	ldr	r1, [r3, #0]
 8000c38:	4b65      	ldr	r3, [pc, #404]	; (8000dd0 <show_set+0x1f0>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	460b      	mov	r3, r1
 8000c40:	4964      	ldr	r1, [pc, #400]	; (8000dd4 <show_set+0x1f4>)
 8000c42:	4865      	ldr	r0, [pc, #404]	; (8000dd8 <show_set+0x1f8>)
 8000c44:	f005 f83a 	bl	8005cbc <siprintf>
 8000c48:	e007      	b.n	8000c5a <show_set+0x7a>
			else sprintf(line2,"   :%2d:%2d ",minute,second);
 8000c4a:	4b60      	ldr	r3, [pc, #384]	; (8000dcc <show_set+0x1ec>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b60      	ldr	r3, [pc, #384]	; (8000dd0 <show_set+0x1f0>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4962      	ldr	r1, [pc, #392]	; (8000ddc <show_set+0x1fc>)
 8000c54:	4860      	ldr	r0, [pc, #384]	; (8000dd8 <show_set+0x1f8>)
 8000c56:	f005 f831 	bl	8005cbc <siprintf>
			if(sw == 3){
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	2b03      	cmp	r3, #3
 8000c5e:	d10d      	bne.n	8000c7c <show_set+0x9c>
				if(hour < 24)hour++;
 8000c60:	4b59      	ldr	r3, [pc, #356]	; (8000dc8 <show_set+0x1e8>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b17      	cmp	r3, #23
 8000c66:	dc05      	bgt.n	8000c74 <show_set+0x94>
 8000c68:	4b57      	ldr	r3, [pc, #348]	; (8000dc8 <show_set+0x1e8>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	4a56      	ldr	r2, [pc, #344]	; (8000dc8 <show_set+0x1e8>)
 8000c70:	6013      	str	r3, [r2, #0]
 8000c72:	e08f      	b.n	8000d94 <show_set+0x1b4>
				else hour = 0;
 8000c74:	4b54      	ldr	r3, [pc, #336]	; (8000dc8 <show_set+0x1e8>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	e08b      	b.n	8000d94 <show_set+0x1b4>
			}
			else if(sw == 2){
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	f040 8088 	bne.w	8000d94 <show_set+0x1b4>
				if(hour > 0)hour--;
 8000c84:	4b50      	ldr	r3, [pc, #320]	; (8000dc8 <show_set+0x1e8>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	dd05      	ble.n	8000c98 <show_set+0xb8>
 8000c8c:	4b4e      	ldr	r3, [pc, #312]	; (8000dc8 <show_set+0x1e8>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	3b01      	subs	r3, #1
 8000c92:	4a4d      	ldr	r2, [pc, #308]	; (8000dc8 <show_set+0x1e8>)
 8000c94:	6013      	str	r3, [r2, #0]
 8000c96:	e07d      	b.n	8000d94 <show_set+0x1b4>
				else hour = 0;
 8000c98:	4b4b      	ldr	r3, [pc, #300]	; (8000dc8 <show_set+0x1e8>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	e079      	b.n	8000d94 <show_set+0x1b4>
			}
		}

		//set time of minute
		else if(unit == 1){
 8000ca0:	4b44      	ldr	r3, [pc, #272]	; (8000db4 <show_set+0x1d4>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d13a      	bne.n	8000d1e <show_set+0x13e>
			if(twinkle == 0)sprintf(line2," %2d:%2d:%2d ",hour,minute,second);
 8000ca8:	4b46      	ldr	r3, [pc, #280]	; (8000dc4 <show_set+0x1e4>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d10c      	bne.n	8000cca <show_set+0xea>
 8000cb0:	4b45      	ldr	r3, [pc, #276]	; (8000dc8 <show_set+0x1e8>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b45      	ldr	r3, [pc, #276]	; (8000dcc <show_set+0x1ec>)
 8000cb6:	6819      	ldr	r1, [r3, #0]
 8000cb8:	4b45      	ldr	r3, [pc, #276]	; (8000dd0 <show_set+0x1f0>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	9300      	str	r3, [sp, #0]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	4944      	ldr	r1, [pc, #272]	; (8000dd4 <show_set+0x1f4>)
 8000cc2:	4845      	ldr	r0, [pc, #276]	; (8000dd8 <show_set+0x1f8>)
 8000cc4:	f004 fffa 	bl	8005cbc <siprintf>
 8000cc8:	e007      	b.n	8000cda <show_set+0xfa>
			else sprintf(line2," %2d:  :%2d ",hour,second);
 8000cca:	4b3f      	ldr	r3, [pc, #252]	; (8000dc8 <show_set+0x1e8>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	4b40      	ldr	r3, [pc, #256]	; (8000dd0 <show_set+0x1f0>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4943      	ldr	r1, [pc, #268]	; (8000de0 <show_set+0x200>)
 8000cd4:	4840      	ldr	r0, [pc, #256]	; (8000dd8 <show_set+0x1f8>)
 8000cd6:	f004 fff1 	bl	8005cbc <siprintf>
			if(sw == 3){
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	2b03      	cmp	r3, #3
 8000cde:	d10d      	bne.n	8000cfc <show_set+0x11c>
				if(minute < 60)minute++;
 8000ce0:	4b3a      	ldr	r3, [pc, #232]	; (8000dcc <show_set+0x1ec>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b3b      	cmp	r3, #59	; 0x3b
 8000ce6:	dc05      	bgt.n	8000cf4 <show_set+0x114>
 8000ce8:	4b38      	ldr	r3, [pc, #224]	; (8000dcc <show_set+0x1ec>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	3301      	adds	r3, #1
 8000cee:	4a37      	ldr	r2, [pc, #220]	; (8000dcc <show_set+0x1ec>)
 8000cf0:	6013      	str	r3, [r2, #0]
 8000cf2:	e04f      	b.n	8000d94 <show_set+0x1b4>
				else minute = 0;
 8000cf4:	4b35      	ldr	r3, [pc, #212]	; (8000dcc <show_set+0x1ec>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	e04b      	b.n	8000d94 <show_set+0x1b4>
			}
			else if(sw == 2){
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d148      	bne.n	8000d94 <show_set+0x1b4>
				if(minute > 0)minute--;
 8000d02:	4b32      	ldr	r3, [pc, #200]	; (8000dcc <show_set+0x1ec>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	dd05      	ble.n	8000d16 <show_set+0x136>
 8000d0a:	4b30      	ldr	r3, [pc, #192]	; (8000dcc <show_set+0x1ec>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	4a2e      	ldr	r2, [pc, #184]	; (8000dcc <show_set+0x1ec>)
 8000d12:	6013      	str	r3, [r2, #0]
 8000d14:	e03e      	b.n	8000d94 <show_set+0x1b4>
				else minute = 0;
 8000d16:	4b2d      	ldr	r3, [pc, #180]	; (8000dcc <show_set+0x1ec>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	e03a      	b.n	8000d94 <show_set+0x1b4>
			}
		}

		//set time of second
		else if(unit == 2){
 8000d1e:	4b25      	ldr	r3, [pc, #148]	; (8000db4 <show_set+0x1d4>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d136      	bne.n	8000d94 <show_set+0x1b4>
			if(twinkle == 0)sprintf(line2," %2d:%2d:%2d ",hour,minute,second);
 8000d26:	4b27      	ldr	r3, [pc, #156]	; (8000dc4 <show_set+0x1e4>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d10c      	bne.n	8000d48 <show_set+0x168>
 8000d2e:	4b26      	ldr	r3, [pc, #152]	; (8000dc8 <show_set+0x1e8>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	4b26      	ldr	r3, [pc, #152]	; (8000dcc <show_set+0x1ec>)
 8000d34:	6819      	ldr	r1, [r3, #0]
 8000d36:	4b26      	ldr	r3, [pc, #152]	; (8000dd0 <show_set+0x1f0>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	4925      	ldr	r1, [pc, #148]	; (8000dd4 <show_set+0x1f4>)
 8000d40:	4825      	ldr	r0, [pc, #148]	; (8000dd8 <show_set+0x1f8>)
 8000d42:	f004 ffbb 	bl	8005cbc <siprintf>
 8000d46:	e007      	b.n	8000d58 <show_set+0x178>
			else sprintf(line2," %2d:%2d:   ",hour,minute);
 8000d48:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <show_set+0x1e8>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <show_set+0x1ec>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4924      	ldr	r1, [pc, #144]	; (8000de4 <show_set+0x204>)
 8000d52:	4821      	ldr	r0, [pc, #132]	; (8000dd8 <show_set+0x1f8>)
 8000d54:	f004 ffb2 	bl	8005cbc <siprintf>
			if(sw == 3){
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	2b03      	cmp	r3, #3
 8000d5c:	d114      	bne.n	8000d88 <show_set+0x1a8>
				second = 0;
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <show_set+0x1f0>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
				minute++;
 8000d64:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <show_set+0x1ec>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	4a18      	ldr	r2, [pc, #96]	; (8000dcc <show_set+0x1ec>)
 8000d6c:	6013      	str	r3, [r2, #0]
				if(minute == 60){
 8000d6e:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <show_set+0x1ec>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2b3c      	cmp	r3, #60	; 0x3c
 8000d74:	d10e      	bne.n	8000d94 <show_set+0x1b4>
					minute = 0;
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <show_set+0x1ec>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
					hour++;
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <show_set+0x1e8>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	3301      	adds	r3, #1
 8000d82:	4a11      	ldr	r2, [pc, #68]	; (8000dc8 <show_set+0x1e8>)
 8000d84:	6013      	str	r3, [r2, #0]
 8000d86:	e005      	b.n	8000d94 <show_set+0x1b4>
				}
			}
			else if(sw == 2){
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d102      	bne.n	8000d94 <show_set+0x1b4>
				second = 0;
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <show_set+0x1f0>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
			}
		}
		sprintf(line3,"           ");
 8000d94:	4914      	ldr	r1, [pc, #80]	; (8000de8 <show_set+0x208>)
 8000d96:	4815      	ldr	r0, [pc, #84]	; (8000dec <show_set+0x20c>)
 8000d98:	f004 ff90 	bl	8005cbc <siprintf>
		if(unit1 == 0){

		}
	}

}
 8000d9c:	e006      	b.n	8000dac <show_set+0x1cc>
	else if(clockmode == 4){
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <show_set+0x1d8>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	d002      	beq.n	8000dac <show_set+0x1cc>
	else if(clockmode == 5){
 8000da6:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <show_set+0x1d8>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2b05      	cmp	r3, #5
}
 8000dac:	bf00      	nop
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	2000000c 	.word	0x2000000c
 8000db8:	200000a4 	.word	0x200000a4
 8000dbc:	08007038 	.word	0x08007038
 8000dc0:	200006a8 	.word	0x200006a8
 8000dc4:	200000cc 	.word	0x200000cc
 8000dc8:	200000b0 	.word	0x200000b0
 8000dcc:	200000ac 	.word	0x200000ac
 8000dd0:	200000a8 	.word	0x200000a8
 8000dd4:	08007044 	.word	0x08007044
 8000dd8:	20000708 	.word	0x20000708
 8000ddc:	080070c4 	.word	0x080070c4
 8000de0:	080070d4 	.word	0x080070d4
 8000de4:	080070e4 	.word	0x080070e4
 8000de8:	08007054 	.word	0x08007054
 8000dec:	200006fc 	.word	0x200006fc

08000df0 <show_error>:

void show_error(){
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
	sprintf(line1,"time error ");
 8000df4:	4906      	ldr	r1, [pc, #24]	; (8000e10 <show_error+0x20>)
 8000df6:	4807      	ldr	r0, [pc, #28]	; (8000e14 <show_error+0x24>)
 8000df8:	f004 ff60 	bl	8005cbc <siprintf>
	sprintf(line2,"           ");
 8000dfc:	4906      	ldr	r1, [pc, #24]	; (8000e18 <show_error+0x28>)
 8000dfe:	4807      	ldr	r0, [pc, #28]	; (8000e1c <show_error+0x2c>)
 8000e00:	f004 ff5c 	bl	8005cbc <siprintf>
	sprintf(line3,"           ");
 8000e04:	4904      	ldr	r1, [pc, #16]	; (8000e18 <show_error+0x28>)
 8000e06:	4806      	ldr	r0, [pc, #24]	; (8000e20 <show_error+0x30>)
 8000e08:	f004 ff58 	bl	8005cbc <siprintf>
}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	080070f4 	.word	0x080070f4
 8000e14:	200006a8 	.word	0x200006a8
 8000e18:	08007054 	.word	0x08007054
 8000e1c:	20000708 	.word	0x20000708
 8000e20:	200006fc 	.word	0x200006fc

08000e24 <check_sw>:
	return 0;
}


//check which sw is pressed
int check_sw(){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	//check if sw1 is pressed
	if(HAL_GPIO_ReadPin(GPIOD, SW1_Pin)){
 8000e28:	2110      	movs	r1, #16
 8000e2a:	4827      	ldr	r0, [pc, #156]	; (8000ec8 <check_sw+0xa4>)
 8000e2c:	f002 f8e2 	bl	8002ff4 <HAL_GPIO_ReadPin>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d00b      	beq.n	8000e4e <check_sw+0x2a>
		HAL_Delay(10);
 8000e36:	200a      	movs	r0, #10
 8000e38:	f000 ff06 	bl	8001c48 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOD, SW1_Pin)){
 8000e3c:	2110      	movs	r1, #16
 8000e3e:	4822      	ldr	r0, [pc, #136]	; (8000ec8 <check_sw+0xa4>)
 8000e40:	f002 f8d8 	bl	8002ff4 <HAL_GPIO_ReadPin>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <check_sw+0x2a>
			return 1;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e039      	b.n	8000ec2 <check_sw+0x9e>
		}
	}

	//check if sw2 is pressed
	if(HAL_GPIO_ReadPin(GPIOD, SW2_Pin)){
 8000e4e:	2108      	movs	r1, #8
 8000e50:	481d      	ldr	r0, [pc, #116]	; (8000ec8 <check_sw+0xa4>)
 8000e52:	f002 f8cf 	bl	8002ff4 <HAL_GPIO_ReadPin>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d00b      	beq.n	8000e74 <check_sw+0x50>
		HAL_Delay(10);
 8000e5c:	200a      	movs	r0, #10
 8000e5e:	f000 fef3 	bl	8001c48 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOD, SW2_Pin)){
 8000e62:	2108      	movs	r1, #8
 8000e64:	4818      	ldr	r0, [pc, #96]	; (8000ec8 <check_sw+0xa4>)
 8000e66:	f002 f8c5 	bl	8002ff4 <HAL_GPIO_ReadPin>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <check_sw+0x50>
			return 2;
 8000e70:	2302      	movs	r3, #2
 8000e72:	e026      	b.n	8000ec2 <check_sw+0x9e>
		}
	}

	//check if sw3 is pressed
	if(HAL_GPIO_ReadPin(GPIOB, SW3_Pin)){
 8000e74:	2140      	movs	r1, #64	; 0x40
 8000e76:	4815      	ldr	r0, [pc, #84]	; (8000ecc <check_sw+0xa8>)
 8000e78:	f002 f8bc 	bl	8002ff4 <HAL_GPIO_ReadPin>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d00b      	beq.n	8000e9a <check_sw+0x76>
		HAL_Delay(10);
 8000e82:	200a      	movs	r0, #10
 8000e84:	f000 fee0 	bl	8001c48 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOB, SW3_Pin)){
 8000e88:	2140      	movs	r1, #64	; 0x40
 8000e8a:	4810      	ldr	r0, [pc, #64]	; (8000ecc <check_sw+0xa8>)
 8000e8c:	f002 f8b2 	bl	8002ff4 <HAL_GPIO_ReadPin>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <check_sw+0x76>
			return 3;
 8000e96:	2303      	movs	r3, #3
 8000e98:	e013      	b.n	8000ec2 <check_sw+0x9e>
		}
	}

	//check if sw4 is pressed
	if(HAL_GPIO_ReadPin(GPIOB, SW4_Pin)){
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	480b      	ldr	r0, [pc, #44]	; (8000ecc <check_sw+0xa8>)
 8000e9e:	f002 f8a9 	bl	8002ff4 <HAL_GPIO_ReadPin>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d00b      	beq.n	8000ec0 <check_sw+0x9c>
		HAL_Delay(10);
 8000ea8:	200a      	movs	r0, #10
 8000eaa:	f000 fecd 	bl	8001c48 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOB, SW4_Pin)){
 8000eae:	2101      	movs	r1, #1
 8000eb0:	4806      	ldr	r0, [pc, #24]	; (8000ecc <check_sw+0xa8>)
 8000eb2:	f002 f89f 	bl	8002ff4 <HAL_GPIO_ReadPin>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <check_sw+0x9c>
			return 4;
 8000ebc:	2304      	movs	r3, #4
 8000ebe:	e000      	b.n	8000ec2 <check_sw+0x9e>
		}
	}
	return 0;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40011400 	.word	0x40011400
 8000ecc:	40010c00 	.word	0x40010c00

08000ed0 <set_date>:

//set the date right
void set_date(){
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0

}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr

08000edc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]

    if(htim == (&htim2)){
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a25      	ldr	r2, [pc, #148]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d10a      	bne.n	8000f02 <HAL_TIM_PeriodElapsedCallback+0x26>
    	if(twinkle == 0){
 8000eec:	4b24      	ldr	r3, [pc, #144]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d103      	bne.n	8000efc <HAL_TIM_PeriodElapsedCallback+0x20>
    		twinkle = 1;
 8000ef4:	4b22      	ldr	r3, [pc, #136]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	e002      	b.n	8000f02 <HAL_TIM_PeriodElapsedCallback+0x26>
    	}
    	else twinkle = 0;
 8000efc:	4b20      	ldr	r3, [pc, #128]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
    }

    if (htim == (&htim1))
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a1f      	ldr	r2, [pc, #124]	; (8000f84 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d133      	bne.n	8000f72 <HAL_TIM_PeriodElapsedCallback+0x96>
    {
    	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8000f0a:	2110      	movs	r1, #16
 8000f0c:	481e      	ldr	r0, [pc, #120]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000f0e:	f002 f8a0 	bl	8003052 <HAL_GPIO_TogglePin>
    	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);
 8000f12:	2120      	movs	r1, #32
 8000f14:	481c      	ldr	r0, [pc, #112]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000f16:	f002 f89c 	bl	8003052 <HAL_GPIO_TogglePin>
    	//not set_mode and error_mode
    		second++;
 8000f1a:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	4a1a      	ldr	r2, [pc, #104]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000f22:	6013      	str	r3, [r2, #0]
    		if(second >= 60){
 8000f24:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b3b      	cmp	r3, #59	; 0x3b
 8000f2a:	dd07      	ble.n	8000f3c <HAL_TIM_PeriodElapsedCallback+0x60>
    			second = 0;
 8000f2c:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
    			minute++;
 8000f32:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	3301      	adds	r3, #1
 8000f38:	4a15      	ldr	r2, [pc, #84]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000f3a:	6013      	str	r3, [r2, #0]
    		}
    		if(minute>=60){
 8000f3c:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b3b      	cmp	r3, #59	; 0x3b
 8000f42:	dd07      	ble.n	8000f54 <HAL_TIM_PeriodElapsedCallback+0x78>
    			minute = 0;
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
    			hour++;
 8000f4a:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	4a10      	ldr	r2, [pc, #64]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000f52:	6013      	str	r3, [r2, #0]
    		}
    		if(hour >= 24){
 8000f54:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b17      	cmp	r3, #23
 8000f5a:	dd0a      	ble.n	8000f72 <HAL_TIM_PeriodElapsedCallback+0x96>
    			hour=0;
 8000f5c:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
    			date++;
 8000f62:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	3301      	adds	r3, #1
 8000f68:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000f6a:	6013      	str	r3, [r2, #0]
    			set_date();
 8000f6c:	f7ff ffb0 	bl	8000ed0 <set_date>
    		}
    }
    return;
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
}
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000714 	.word	0x20000714
 8000f80:	200000cc 	.word	0x200000cc
 8000f84:	200006b4 	.word	0x200006b4
 8000f88:	40011000 	.word	0x40011000
 8000f8c:	200000a8 	.word	0x200000a8
 8000f90:	200000ac 	.word	0x200000ac
 8000f94:	200000b0 	.word	0x200000b0
 8000f98:	20000008 	.word	0x20000008

08000f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa0:	b672      	cpsid	i
}
 8000fa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <Error_Handler+0x8>
	...

08000fa8 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart)  {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000fb0:	4a07      	ldr	r2, [pc, #28]	; (8000fd0 <RetargetInit+0x28>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6013      	str	r3, [r2, #0]
  /* Disable I/O buffering for STDOUT  stream, so that
   * chars are sent out as soon as they are  printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000fb6:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <RetargetInit+0x2c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	6898      	ldr	r0, [r3, #8]
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	f004 fdb5 	bl	8005b30 <setvbuf>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200007a0 	.word	0x200007a0
 8000fd4:	20000024 	.word	0x20000024

08000fd8 <_isatty>:
int _isatty(int fd) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <=  STDERR_FILENO)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	db04      	blt.n	8000ff0 <_isatty+0x18>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	dc01      	bgt.n	8000ff0 <_isatty+0x18>
    return 1;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e005      	b.n	8000ffc <_isatty+0x24>
  errno = EBADF;
 8000ff0:	f004 fd18 	bl	8005a24 <__errno>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2209      	movs	r2, #9
 8000ff8:	601a      	str	r2, [r3, #0]
  return 0;
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <_write>:
int _write(int fd, char* ptr, int len) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;
  if (fd == STDOUT_FILENO || fd ==  STDERR_FILENO) {
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d002      	beq.n	800101c <_write+0x18>
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2b02      	cmp	r3, #2
 800101a:	d111      	bne.n	8001040 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart,  (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800101c:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <_write+0x54>)
 800101e:	6818      	ldr	r0, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	b29a      	uxth	r2, r3
 8001024:	f04f 33ff 	mov.w	r3, #4294967295
 8001028:	68b9      	ldr	r1, [r7, #8]
 800102a:	f003 ff6f 	bl	8004f0c <HAL_UART_Transmit>
 800102e:	4603      	mov	r3, r0
 8001030:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001032:	7dfb      	ldrb	r3, [r7, #23]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d101      	bne.n	800103c <_write+0x38>
      return len;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	e008      	b.n	800104e <_write+0x4a>
    else
      return EIO;
 800103c:	2305      	movs	r3, #5
 800103e:	e006      	b.n	800104e <_write+0x4a>
  }
  errno = EBADF;
 8001040:	f004 fcf0 	bl	8005a24 <__errno>
 8001044:	4603      	mov	r3, r0
 8001046:	2209      	movs	r2, #9
 8001048:	601a      	str	r2, [r3, #0]
  return -1;
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800104e:	4618      	mov	r0, r3
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200007a0 	.word	0x200007a0

0800105c <_close>:
int _close(int fd) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <=  STDERR_FILENO)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	db04      	blt.n	8001074 <_close+0x18>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b02      	cmp	r3, #2
 800106e:	dc01      	bgt.n	8001074 <_close+0x18>
    return 0;
 8001070:	2300      	movs	r3, #0
 8001072:	e006      	b.n	8001082 <_close+0x26>
  errno = EBADF;
 8001074:	f004 fcd6 	bl	8005a24 <__errno>
 8001078:	4603      	mov	r3, r0
 800107a:	2209      	movs	r2, #9
 800107c:	601a      	str	r2, [r3, #0]
  return -1;
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <_lseek>:
int _lseek(int fd, int ptr, int dir) {
 800108a:	b580      	push	{r7, lr}
 800108c:	b084      	sub	sp, #16
 800108e:	af00      	add	r7, sp, #0
 8001090:	60f8      	str	r0, [r7, #12]
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;
  errno = EBADF;
 8001096:	f004 fcc5 	bl	8005a24 <__errno>
 800109a:	4603      	mov	r3, r0
 800109c:	2209      	movs	r2, #9
 800109e:	601a      	str	r2, [r3, #0]
  return -1;
 80010a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <_read>:
int _read(int fd, char* ptr, int len) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;
  if (fd == STDIN_FILENO) {
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d110      	bne.n	80010e0 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart,  (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <_read+0x4c>)
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	f04f 33ff 	mov.w	r3, #4294967295
 80010c6:	2201      	movs	r2, #1
 80010c8:	68b9      	ldr	r1, [r7, #8]
 80010ca:	f003 ffb1 	bl	8005030 <HAL_UART_Receive>
 80010ce:	4603      	mov	r3, r0
 80010d0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80010d2:	7dfb      	ldrb	r3, [r7, #23]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d101      	bne.n	80010dc <_read+0x30>
      return 1;
 80010d8:	2301      	movs	r3, #1
 80010da:	e008      	b.n	80010ee <_read+0x42>
    else
      return EIO;
 80010dc:	2305      	movs	r3, #5
 80010de:	e006      	b.n	80010ee <_read+0x42>
  }
  errno = EBADF;
 80010e0:	f004 fca0 	bl	8005a24 <__errno>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2209      	movs	r2, #9
 80010e8:	601a      	str	r2, [r3, #0]
  return -1;
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200007a0 	.word	0x200007a0

080010fc <_fstat>:
int _fstat(int fd, struct stat* st) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <=  STDERR_FILENO) {
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	db08      	blt.n	800111e <_fstat+0x22>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b02      	cmp	r3, #2
 8001110:	dc05      	bgt.n	800111e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001118:	605a      	str	r2, [r3, #4]
    return 0;
 800111a:	2300      	movs	r3, #0
 800111c:	e005      	b.n	800112a <_fstat+0x2e>
  }
  errno = EBADF;
 800111e:	f004 fc81 	bl	8005a24 <__errno>
 8001122:	4603      	mov	r3, r0
 8001124:	2209      	movs	r2, #9
 8001126:	601a      	str	r2, [r3, #0]
  return 0;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr
	...

08001140 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af04      	add	r7, sp, #16
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800114a:	f04f 33ff 	mov.w	r3, #4294967295
 800114e:	9302      	str	r3, [sp, #8]
 8001150:	2301      	movs	r3, #1
 8001152:	9301      	str	r3, [sp, #4]
 8001154:	1dfb      	adds	r3, r7, #7
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2301      	movs	r3, #1
 800115a:	2200      	movs	r2, #0
 800115c:	2178      	movs	r1, #120	; 0x78
 800115e:	4803      	ldr	r0, [pc, #12]	; (800116c <ssd1306_WriteCommand+0x2c>)
 8001160:	f002 f8d4 	bl	800330c <HAL_I2C_Mem_Write>
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000610 	.word	0x20000610

08001170 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af04      	add	r7, sp, #16
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	b29b      	uxth	r3, r3
 800117e:	f04f 32ff 	mov.w	r2, #4294967295
 8001182:	9202      	str	r2, [sp, #8]
 8001184:	9301      	str	r3, [sp, #4]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2301      	movs	r3, #1
 800118c:	2240      	movs	r2, #64	; 0x40
 800118e:	2178      	movs	r1, #120	; 0x78
 8001190:	4803      	ldr	r0, [pc, #12]	; (80011a0 <ssd1306_WriteData+0x30>)
 8001192:	f002 f8bb 	bl	800330c <HAL_I2C_Mem_Write>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000610 	.word	0x20000610

080011a4 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80011a8:	f7ff ffc3 	bl	8001132 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80011ac:	2064      	movs	r0, #100	; 0x64
 80011ae:	f000 fd4b 	bl	8001c48 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80011b2:	2000      	movs	r0, #0
 80011b4:	f000 f9d6 	bl	8001564 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80011b8:	2020      	movs	r0, #32
 80011ba:	f7ff ffc1 	bl	8001140 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80011be:	2000      	movs	r0, #0
 80011c0:	f7ff ffbe 	bl	8001140 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80011c4:	20b0      	movs	r0, #176	; 0xb0
 80011c6:	f7ff ffbb 	bl	8001140 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80011ca:	20c8      	movs	r0, #200	; 0xc8
 80011cc:	f7ff ffb8 	bl	8001140 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80011d0:	2000      	movs	r0, #0
 80011d2:	f7ff ffb5 	bl	8001140 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80011d6:	2010      	movs	r0, #16
 80011d8:	f7ff ffb2 	bl	8001140 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80011dc:	2040      	movs	r0, #64	; 0x40
 80011de:	f7ff ffaf 	bl	8001140 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80011e2:	20ff      	movs	r0, #255	; 0xff
 80011e4:	f000 f9aa 	bl	800153c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80011e8:	20a1      	movs	r0, #161	; 0xa1
 80011ea:	f7ff ffa9 	bl	8001140 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80011ee:	20a6      	movs	r0, #166	; 0xa6
 80011f0:	f7ff ffa6 	bl	8001140 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80011f4:	20a8      	movs	r0, #168	; 0xa8
 80011f6:	f7ff ffa3 	bl	8001140 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80011fa:	203f      	movs	r0, #63	; 0x3f
 80011fc:	f7ff ffa0 	bl	8001140 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001200:	20a4      	movs	r0, #164	; 0xa4
 8001202:	f7ff ff9d 	bl	8001140 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001206:	20d3      	movs	r0, #211	; 0xd3
 8001208:	f7ff ff9a 	bl	8001140 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800120c:	2000      	movs	r0, #0
 800120e:	f7ff ff97 	bl	8001140 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001212:	20d5      	movs	r0, #213	; 0xd5
 8001214:	f7ff ff94 	bl	8001140 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001218:	20f0      	movs	r0, #240	; 0xf0
 800121a:	f7ff ff91 	bl	8001140 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800121e:	20d9      	movs	r0, #217	; 0xd9
 8001220:	f7ff ff8e 	bl	8001140 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001224:	2022      	movs	r0, #34	; 0x22
 8001226:	f7ff ff8b 	bl	8001140 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800122a:	20da      	movs	r0, #218	; 0xda
 800122c:	f7ff ff88 	bl	8001140 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001230:	2012      	movs	r0, #18
 8001232:	f7ff ff85 	bl	8001140 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001236:	20db      	movs	r0, #219	; 0xdb
 8001238:	f7ff ff82 	bl	8001140 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800123c:	2020      	movs	r0, #32
 800123e:	f7ff ff7f 	bl	8001140 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001242:	208d      	movs	r0, #141	; 0x8d
 8001244:	f7ff ff7c 	bl	8001140 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001248:	2014      	movs	r0, #20
 800124a:	f7ff ff79 	bl	8001140 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800124e:	2001      	movs	r0, #1
 8001250:	f000 f988 	bl	8001564 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001254:	2000      	movs	r0, #0
 8001256:	f000 f80f 	bl	8001278 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800125a:	f000 f82f 	bl	80012bc <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800125e:	4b05      	ldr	r3, [pc, #20]	; (8001274 <ssd1306_Init+0xd0>)
 8001260:	2200      	movs	r2, #0
 8001262:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001264:	4b03      	ldr	r3, [pc, #12]	; (8001274 <ssd1306_Init+0xd0>)
 8001266:	2200      	movs	r2, #0
 8001268:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800126a:	4b02      	ldr	r3, [pc, #8]	; (8001274 <ssd1306_Init+0xd0>)
 800126c:	2201      	movs	r2, #1
 800126e:	711a      	strb	r2, [r3, #4]
}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	200004d0 	.word	0x200004d0

08001278 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	e00d      	b.n	80012a4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d101      	bne.n	8001292 <ssd1306_Fill+0x1a>
 800128e:	2100      	movs	r1, #0
 8001290:	e000      	b.n	8001294 <ssd1306_Fill+0x1c>
 8001292:	21ff      	movs	r1, #255	; 0xff
 8001294:	4a08      	ldr	r2, [pc, #32]	; (80012b8 <ssd1306_Fill+0x40>)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	4413      	add	r3, r2
 800129a:	460a      	mov	r2, r1
 800129c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	3301      	adds	r3, #1
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012aa:	d3ed      	bcc.n	8001288 <ssd1306_Fill+0x10>
    }
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr
 80012b8:	200000d0 	.word	0x200000d0

080012bc <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80012c2:	2300      	movs	r3, #0
 80012c4:	71fb      	strb	r3, [r7, #7]
 80012c6:	e016      	b.n	80012f6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	3b50      	subs	r3, #80	; 0x50
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff ff36 	bl	8001140 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80012d4:	2000      	movs	r0, #0
 80012d6:	f7ff ff33 	bl	8001140 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80012da:	2010      	movs	r0, #16
 80012dc:	f7ff ff30 	bl	8001140 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	01db      	lsls	r3, r3, #7
 80012e4:	4a08      	ldr	r2, [pc, #32]	; (8001308 <ssd1306_UpdateScreen+0x4c>)
 80012e6:	4413      	add	r3, r2
 80012e8:	2180      	movs	r1, #128	; 0x80
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff ff40 	bl	8001170 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	3301      	adds	r3, #1
 80012f4:	71fb      	strb	r3, [r7, #7]
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	2b07      	cmp	r3, #7
 80012fa:	d9e5      	bls.n	80012c8 <ssd1306_UpdateScreen+0xc>
    }
}
 80012fc:	bf00      	nop
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200000d0 	.word	0x200000d0

0800130c <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
 8001316:	460b      	mov	r3, r1
 8001318:	71bb      	strb	r3, [r7, #6]
 800131a:	4613      	mov	r3, r2
 800131c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	2b00      	cmp	r3, #0
 8001324:	db3d      	blt.n	80013a2 <ssd1306_DrawPixel+0x96>
 8001326:	79bb      	ldrb	r3, [r7, #6]
 8001328:	2b3f      	cmp	r3, #63	; 0x3f
 800132a:	d83a      	bhi.n	80013a2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800132c:	797b      	ldrb	r3, [r7, #5]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d11a      	bne.n	8001368 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001332:	79fa      	ldrb	r2, [r7, #7]
 8001334:	79bb      	ldrb	r3, [r7, #6]
 8001336:	08db      	lsrs	r3, r3, #3
 8001338:	b2d8      	uxtb	r0, r3
 800133a:	4603      	mov	r3, r0
 800133c:	01db      	lsls	r3, r3, #7
 800133e:	4413      	add	r3, r2
 8001340:	4a1a      	ldr	r2, [pc, #104]	; (80013ac <ssd1306_DrawPixel+0xa0>)
 8001342:	5cd3      	ldrb	r3, [r2, r3]
 8001344:	b25a      	sxtb	r2, r3
 8001346:	79bb      	ldrb	r3, [r7, #6]
 8001348:	f003 0307 	and.w	r3, r3, #7
 800134c:	2101      	movs	r1, #1
 800134e:	fa01 f303 	lsl.w	r3, r1, r3
 8001352:	b25b      	sxtb	r3, r3
 8001354:	4313      	orrs	r3, r2
 8001356:	b259      	sxtb	r1, r3
 8001358:	79fa      	ldrb	r2, [r7, #7]
 800135a:	4603      	mov	r3, r0
 800135c:	01db      	lsls	r3, r3, #7
 800135e:	4413      	add	r3, r2
 8001360:	b2c9      	uxtb	r1, r1
 8001362:	4a12      	ldr	r2, [pc, #72]	; (80013ac <ssd1306_DrawPixel+0xa0>)
 8001364:	54d1      	strb	r1, [r2, r3]
 8001366:	e01d      	b.n	80013a4 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001368:	79fa      	ldrb	r2, [r7, #7]
 800136a:	79bb      	ldrb	r3, [r7, #6]
 800136c:	08db      	lsrs	r3, r3, #3
 800136e:	b2d8      	uxtb	r0, r3
 8001370:	4603      	mov	r3, r0
 8001372:	01db      	lsls	r3, r3, #7
 8001374:	4413      	add	r3, r2
 8001376:	4a0d      	ldr	r2, [pc, #52]	; (80013ac <ssd1306_DrawPixel+0xa0>)
 8001378:	5cd3      	ldrb	r3, [r2, r3]
 800137a:	b25a      	sxtb	r2, r3
 800137c:	79bb      	ldrb	r3, [r7, #6]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	2101      	movs	r1, #1
 8001384:	fa01 f303 	lsl.w	r3, r1, r3
 8001388:	b25b      	sxtb	r3, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	b25b      	sxtb	r3, r3
 800138e:	4013      	ands	r3, r2
 8001390:	b259      	sxtb	r1, r3
 8001392:	79fa      	ldrb	r2, [r7, #7]
 8001394:	4603      	mov	r3, r0
 8001396:	01db      	lsls	r3, r3, #7
 8001398:	4413      	add	r3, r2
 800139a:	b2c9      	uxtb	r1, r1
 800139c:	4a03      	ldr	r2, [pc, #12]	; (80013ac <ssd1306_DrawPixel+0xa0>)
 800139e:	54d1      	strb	r1, [r2, r3]
 80013a0:	e000      	b.n	80013a4 <ssd1306_DrawPixel+0x98>
        return;
 80013a2:	bf00      	nop
    }
}
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	200000d0 	.word	0x200000d0

080013b0 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b089      	sub	sp, #36	; 0x24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4604      	mov	r4, r0
 80013b8:	1d38      	adds	r0, r7, #4
 80013ba:	e880 0006 	stmia.w	r0, {r1, r2}
 80013be:	461a      	mov	r2, r3
 80013c0:	4623      	mov	r3, r4
 80013c2:	73fb      	strb	r3, [r7, #15]
 80013c4:	4613      	mov	r3, r2
 80013c6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	2b1f      	cmp	r3, #31
 80013cc:	d902      	bls.n	80013d4 <ssd1306_WriteChar+0x24>
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	2b7e      	cmp	r3, #126	; 0x7e
 80013d2:	d901      	bls.n	80013d8 <ssd1306_WriteChar+0x28>
        return 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	e06d      	b.n	80014b4 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80013d8:	4b38      	ldr	r3, [pc, #224]	; (80014bc <ssd1306_WriteChar+0x10c>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	793b      	ldrb	r3, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	2b80      	cmp	r3, #128	; 0x80
 80013e4:	dc06      	bgt.n	80013f4 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80013e6:	4b35      	ldr	r3, [pc, #212]	; (80014bc <ssd1306_WriteChar+0x10c>)
 80013e8:	885b      	ldrh	r3, [r3, #2]
 80013ea:	461a      	mov	r2, r3
 80013ec:	797b      	ldrb	r3, [r7, #5]
 80013ee:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80013f0:	2b40      	cmp	r3, #64	; 0x40
 80013f2:	dd01      	ble.n	80013f8 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	e05d      	b.n	80014b4 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
 80013fc:	e04c      	b.n	8001498 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	3b20      	subs	r3, #32
 8001404:	7979      	ldrb	r1, [r7, #5]
 8001406:	fb01 f303 	mul.w	r3, r1, r3
 800140a:	4619      	mov	r1, r3
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	440b      	add	r3, r1
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	4413      	add	r3, r2
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001418:	2300      	movs	r3, #0
 800141a:	61bb      	str	r3, [r7, #24]
 800141c:	e034      	b.n	8001488 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d012      	beq.n	8001454 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800142e:	4b23      	ldr	r3, [pc, #140]	; (80014bc <ssd1306_WriteChar+0x10c>)
 8001430:	881b      	ldrh	r3, [r3, #0]
 8001432:	b2da      	uxtb	r2, r3
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	b2db      	uxtb	r3, r3
 8001438:	4413      	add	r3, r2
 800143a:	b2d8      	uxtb	r0, r3
 800143c:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <ssd1306_WriteChar+0x10c>)
 800143e:	885b      	ldrh	r3, [r3, #2]
 8001440:	b2da      	uxtb	r2, r3
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	b2db      	uxtb	r3, r3
 8001446:	4413      	add	r3, r2
 8001448:	b2db      	uxtb	r3, r3
 800144a:	7bba      	ldrb	r2, [r7, #14]
 800144c:	4619      	mov	r1, r3
 800144e:	f7ff ff5d 	bl	800130c <ssd1306_DrawPixel>
 8001452:	e016      	b.n	8001482 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001454:	4b19      	ldr	r3, [pc, #100]	; (80014bc <ssd1306_WriteChar+0x10c>)
 8001456:	881b      	ldrh	r3, [r3, #0]
 8001458:	b2da      	uxtb	r2, r3
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	4413      	add	r3, r2
 8001460:	b2d8      	uxtb	r0, r3
 8001462:	4b16      	ldr	r3, [pc, #88]	; (80014bc <ssd1306_WriteChar+0x10c>)
 8001464:	885b      	ldrh	r3, [r3, #2]
 8001466:	b2da      	uxtb	r2, r3
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	b2db      	uxtb	r3, r3
 800146c:	4413      	add	r3, r2
 800146e:	b2d9      	uxtb	r1, r3
 8001470:	7bbb      	ldrb	r3, [r7, #14]
 8001472:	2b00      	cmp	r3, #0
 8001474:	bf0c      	ite	eq
 8001476:	2301      	moveq	r3, #1
 8001478:	2300      	movne	r3, #0
 800147a:	b2db      	uxtb	r3, r3
 800147c:	461a      	mov	r2, r3
 800147e:	f7ff ff45 	bl	800130c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	3301      	adds	r3, #1
 8001486:	61bb      	str	r3, [r7, #24]
 8001488:	793b      	ldrb	r3, [r7, #4]
 800148a:	461a      	mov	r2, r3
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	4293      	cmp	r3, r2
 8001490:	d3c5      	bcc.n	800141e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3301      	adds	r3, #1
 8001496:	61fb      	str	r3, [r7, #28]
 8001498:	797b      	ldrb	r3, [r7, #5]
 800149a:	461a      	mov	r2, r3
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	4293      	cmp	r3, r2
 80014a0:	d3ad      	bcc.n	80013fe <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <ssd1306_WriteChar+0x10c>)
 80014a4:	881a      	ldrh	r2, [r3, #0]
 80014a6:	793b      	ldrb	r3, [r7, #4]
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	4413      	add	r3, r2
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	4b03      	ldr	r3, [pc, #12]	; (80014bc <ssd1306_WriteChar+0x10c>)
 80014b0:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3724      	adds	r7, #36	; 0x24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd90      	pop	{r4, r7, pc}
 80014bc:	200004d0 	.word	0x200004d0

080014c0 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	1d38      	adds	r0, r7, #4
 80014ca:	e880 0006 	stmia.w	r0, {r1, r2}
 80014ce:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80014d0:	e012      	b.n	80014f8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	7818      	ldrb	r0, [r3, #0]
 80014d6:	78fb      	ldrb	r3, [r7, #3]
 80014d8:	1d3a      	adds	r2, r7, #4
 80014da:	ca06      	ldmia	r2, {r1, r2}
 80014dc:	f7ff ff68 	bl	80013b0 <ssd1306_WriteChar>
 80014e0:	4603      	mov	r3, r0
 80014e2:	461a      	mov	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d002      	beq.n	80014f2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	e008      	b.n	8001504 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	3301      	adds	r3, #1
 80014f6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1e8      	bne.n	80014d2 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	781b      	ldrb	r3, [r3, #0]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	460a      	mov	r2, r1
 8001516:	71fb      	strb	r3, [r7, #7]
 8001518:	4613      	mov	r3, r2
 800151a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	b29a      	uxth	r2, r3
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <ssd1306_SetCursor+0x2c>)
 8001522:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001524:	79bb      	ldrb	r3, [r7, #6]
 8001526:	b29a      	uxth	r2, r3
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <ssd1306_SetCursor+0x2c>)
 800152a:	805a      	strh	r2, [r3, #2]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	200004d0 	.word	0x200004d0

0800153c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001546:	2381      	movs	r3, #129	; 0x81
 8001548:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fdf7 	bl	8001140 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fdf3 	bl	8001140 <ssd1306_WriteCommand>
}
 800155a:	bf00      	nop
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d005      	beq.n	8001580 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001574:	23af      	movs	r3, #175	; 0xaf
 8001576:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001578:	4b08      	ldr	r3, [pc, #32]	; (800159c <ssd1306_SetDisplayOn+0x38>)
 800157a:	2201      	movs	r2, #1
 800157c:	715a      	strb	r2, [r3, #5]
 800157e:	e004      	b.n	800158a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001580:	23ae      	movs	r3, #174	; 0xae
 8001582:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <ssd1306_SetDisplayOn+0x38>)
 8001586:	2200      	movs	r2, #0
 8001588:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fdd7 	bl	8001140 <ssd1306_WriteCommand>
}
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200004d0 	.word	0x200004d0

080015a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <HAL_MspInit+0x5c>)
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	4a14      	ldr	r2, [pc, #80]	; (80015fc <HAL_MspInit+0x5c>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6193      	str	r3, [r2, #24]
 80015b2:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_MspInit+0x5c>)
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015be:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <HAL_MspInit+0x5c>)
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	4a0e      	ldr	r2, [pc, #56]	; (80015fc <HAL_MspInit+0x5c>)
 80015c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c8:	61d3      	str	r3, [r2, #28]
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <HAL_MspInit+0x5c>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015d6:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <HAL_MspInit+0x60>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	4a04      	ldr	r2, [pc, #16]	; (8001600 <HAL_MspInit+0x60>)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f2:	bf00      	nop
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr
 80015fc:	40021000 	.word	0x40021000
 8001600:	40010000 	.word	0x40010000

08001604 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 0310 	add.w	r3, r7, #16
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a24      	ldr	r2, [pc, #144]	; (80016b0 <HAL_CAN_MspInit+0xac>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d141      	bne.n	80016a8 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001624:	4b23      	ldr	r3, [pc, #140]	; (80016b4 <HAL_CAN_MspInit+0xb0>)
 8001626:	69db      	ldr	r3, [r3, #28]
 8001628:	4a22      	ldr	r2, [pc, #136]	; (80016b4 <HAL_CAN_MspInit+0xb0>)
 800162a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800162e:	61d3      	str	r3, [r2, #28]
 8001630:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <HAL_CAN_MspInit+0xb0>)
 8001632:	69db      	ldr	r3, [r3, #28]
 8001634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163c:	4b1d      	ldr	r3, [pc, #116]	; (80016b4 <HAL_CAN_MspInit+0xb0>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	4a1c      	ldr	r2, [pc, #112]	; (80016b4 <HAL_CAN_MspInit+0xb0>)
 8001642:	f043 0304 	orr.w	r3, r3, #4
 8001646:	6193      	str	r3, [r2, #24]
 8001648:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <HAL_CAN_MspInit+0xb0>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001654:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001658:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001662:	f107 0310 	add.w	r3, r7, #16
 8001666:	4619      	mov	r1, r3
 8001668:	4813      	ldr	r0, [pc, #76]	; (80016b8 <HAL_CAN_MspInit+0xb4>)
 800166a:	f001 fb3f 	bl	8002cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800166e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001672:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001674:	2302      	movs	r3, #2
 8001676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001678:	2303      	movs	r3, #3
 800167a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167c:	f107 0310 	add.w	r3, r7, #16
 8001680:	4619      	mov	r1, r3
 8001682:	480d      	ldr	r0, [pc, #52]	; (80016b8 <HAL_CAN_MspInit+0xb4>)
 8001684:	f001 fb32 	bl	8002cec <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001688:	2200      	movs	r2, #0
 800168a:	2100      	movs	r1, #0
 800168c:	2014      	movs	r0, #20
 800168e:	f001 fa46 	bl	8002b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001692:	2014      	movs	r0, #20
 8001694:	f001 fa5f 	bl	8002b56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001698:	2200      	movs	r2, #0
 800169a:	2100      	movs	r1, #0
 800169c:	2015      	movs	r0, #21
 800169e:	f001 fa3e 	bl	8002b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80016a2:	2015      	movs	r0, #21
 80016a4:	f001 fa57 	bl	8002b56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80016a8:	bf00      	nop
 80016aa:	3720      	adds	r7, #32
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40006400 	.word	0x40006400
 80016b4:	40021000 	.word	0x40021000
 80016b8:	40010800 	.word	0x40010800

080016bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b088      	sub	sp, #32
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	f107 0310 	add.w	r3, r7, #16
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a16      	ldr	r2, [pc, #88]	; (8001730 <HAL_I2C_MspInit+0x74>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d124      	bne.n	8001726 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016dc:	4b15      	ldr	r3, [pc, #84]	; (8001734 <HAL_I2C_MspInit+0x78>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	4a14      	ldr	r2, [pc, #80]	; (8001734 <HAL_I2C_MspInit+0x78>)
 80016e2:	f043 0308 	orr.w	r3, r3, #8
 80016e6:	6193      	str	r3, [r2, #24]
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <HAL_I2C_MspInit+0x78>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	f003 0308 	and.w	r3, r3, #8
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016f4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016fa:	2312      	movs	r3, #18
 80016fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016fe:	2303      	movs	r3, #3
 8001700:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001702:	f107 0310 	add.w	r3, r7, #16
 8001706:	4619      	mov	r1, r3
 8001708:	480b      	ldr	r0, [pc, #44]	; (8001738 <HAL_I2C_MspInit+0x7c>)
 800170a:	f001 faef 	bl	8002cec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <HAL_I2C_MspInit+0x78>)
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	4a08      	ldr	r2, [pc, #32]	; (8001734 <HAL_I2C_MspInit+0x78>)
 8001714:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001718:	61d3      	str	r3, [r2, #28]
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_I2C_MspInit+0x78>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001726:	bf00      	nop
 8001728:	3720      	adds	r7, #32
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40005800 	.word	0x40005800
 8001734:	40021000 	.word	0x40021000
 8001738:	40010c00 	.word	0x40010c00

0800173c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a1e      	ldr	r2, [pc, #120]	; (80017c4 <HAL_TIM_Base_MspInit+0x88>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d11c      	bne.n	8001788 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800174e:	4b1e      	ldr	r3, [pc, #120]	; (80017c8 <HAL_TIM_Base_MspInit+0x8c>)
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	4a1d      	ldr	r2, [pc, #116]	; (80017c8 <HAL_TIM_Base_MspInit+0x8c>)
 8001754:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001758:	6193      	str	r3, [r2, #24]
 800175a:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <HAL_TIM_Base_MspInit+0x8c>)
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	2100      	movs	r1, #0
 800176a:	2018      	movs	r0, #24
 800176c:	f001 f9d7 	bl	8002b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001770:	2018      	movs	r0, #24
 8001772:	f001 f9f0 	bl	8002b56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001776:	2200      	movs	r2, #0
 8001778:	2100      	movs	r1, #0
 800177a:	2019      	movs	r0, #25
 800177c:	f001 f9cf 	bl	8002b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001780:	2019      	movs	r0, #25
 8001782:	f001 f9e8 	bl	8002b56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001786:	e018      	b.n	80017ba <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001790:	d113      	bne.n	80017ba <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001792:	4b0d      	ldr	r3, [pc, #52]	; (80017c8 <HAL_TIM_Base_MspInit+0x8c>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	4a0c      	ldr	r2, [pc, #48]	; (80017c8 <HAL_TIM_Base_MspInit+0x8c>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	61d3      	str	r3, [r2, #28]
 800179e:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <HAL_TIM_Base_MspInit+0x8c>)
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2100      	movs	r1, #0
 80017ae:	201c      	movs	r0, #28
 80017b0:	f001 f9b5 	bl	8002b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017b4:	201c      	movs	r0, #28
 80017b6:	f001 f9ce 	bl	8002b56 <HAL_NVIC_EnableIRQ>
}
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40012c00 	.word	0x40012c00
 80017c8:	40021000 	.word	0x40021000

080017cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	; 0x28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 0318 	add.w	r3, r7, #24
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a3f      	ldr	r2, [pc, #252]	; (80018e4 <HAL_UART_MspInit+0x118>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d13a      	bne.n	8001862 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017ec:	4b3e      	ldr	r3, [pc, #248]	; (80018e8 <HAL_UART_MspInit+0x11c>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	4a3d      	ldr	r2, [pc, #244]	; (80018e8 <HAL_UART_MspInit+0x11c>)
 80017f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f6:	6193      	str	r3, [r2, #24]
 80017f8:	4b3b      	ldr	r3, [pc, #236]	; (80018e8 <HAL_UART_MspInit+0x11c>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001800:	617b      	str	r3, [r7, #20]
 8001802:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001804:	4b38      	ldr	r3, [pc, #224]	; (80018e8 <HAL_UART_MspInit+0x11c>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	4a37      	ldr	r2, [pc, #220]	; (80018e8 <HAL_UART_MspInit+0x11c>)
 800180a:	f043 0304 	orr.w	r3, r3, #4
 800180e:	6193      	str	r3, [r2, #24]
 8001810:	4b35      	ldr	r3, [pc, #212]	; (80018e8 <HAL_UART_MspInit+0x11c>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	613b      	str	r3, [r7, #16]
 800181a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800181c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2302      	movs	r3, #2
 8001824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001826:	2303      	movs	r3, #3
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182a:	f107 0318 	add.w	r3, r7, #24
 800182e:	4619      	mov	r1, r3
 8001830:	482e      	ldr	r0, [pc, #184]	; (80018ec <HAL_UART_MspInit+0x120>)
 8001832:	f001 fa5b 	bl	8002cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800183a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800183c:	2300      	movs	r3, #0
 800183e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001844:	f107 0318 	add.w	r3, r7, #24
 8001848:	4619      	mov	r1, r3
 800184a:	4828      	ldr	r0, [pc, #160]	; (80018ec <HAL_UART_MspInit+0x120>)
 800184c:	f001 fa4e 	bl	8002cec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001850:	2200      	movs	r2, #0
 8001852:	2100      	movs	r1, #0
 8001854:	2025      	movs	r0, #37	; 0x25
 8001856:	f001 f962 	bl	8002b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800185a:	2025      	movs	r0, #37	; 0x25
 800185c:	f001 f97b 	bl	8002b56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001860:	e03c      	b.n	80018dc <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a22      	ldr	r2, [pc, #136]	; (80018f0 <HAL_UART_MspInit+0x124>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d137      	bne.n	80018dc <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 800186c:	4b1e      	ldr	r3, [pc, #120]	; (80018e8 <HAL_UART_MspInit+0x11c>)
 800186e:	69db      	ldr	r3, [r3, #28]
 8001870:	4a1d      	ldr	r2, [pc, #116]	; (80018e8 <HAL_UART_MspInit+0x11c>)
 8001872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001876:	61d3      	str	r3, [r2, #28]
 8001878:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <HAL_UART_MspInit+0x11c>)
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001884:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <HAL_UART_MspInit+0x11c>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	4a17      	ldr	r2, [pc, #92]	; (80018e8 <HAL_UART_MspInit+0x11c>)
 800188a:	f043 0304 	orr.w	r3, r3, #4
 800188e:	6193      	str	r3, [r2, #24]
 8001890:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <HAL_UART_MspInit+0x11c>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800189c:	2304      	movs	r3, #4
 800189e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a0:	2302      	movs	r3, #2
 80018a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018a4:	2303      	movs	r3, #3
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a8:	f107 0318 	add.w	r3, r7, #24
 80018ac:	4619      	mov	r1, r3
 80018ae:	480f      	ldr	r0, [pc, #60]	; (80018ec <HAL_UART_MspInit+0x120>)
 80018b0:	f001 fa1c 	bl	8002cec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018b4:	2308      	movs	r3, #8
 80018b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b8:	2300      	movs	r3, #0
 80018ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c0:	f107 0318 	add.w	r3, r7, #24
 80018c4:	4619      	mov	r1, r3
 80018c6:	4809      	ldr	r0, [pc, #36]	; (80018ec <HAL_UART_MspInit+0x120>)
 80018c8:	f001 fa10 	bl	8002cec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018cc:	2200      	movs	r2, #0
 80018ce:	2100      	movs	r1, #0
 80018d0:	2026      	movs	r0, #38	; 0x26
 80018d2:	f001 f924 	bl	8002b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018d6:	2026      	movs	r0, #38	; 0x26
 80018d8:	f001 f93d 	bl	8002b56 <HAL_NVIC_EnableIRQ>
}
 80018dc:	bf00      	nop
 80018de:	3728      	adds	r7, #40	; 0x28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40013800 	.word	0x40013800
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40010800 	.word	0x40010800
 80018f0:	40004400 	.word	0x40004400

080018f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018f8:	e7fe      	b.n	80018f8 <NMI_Handler+0x4>

080018fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018fe:	e7fe      	b.n	80018fe <HardFault_Handler+0x4>

08001900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001904:	e7fe      	b.n	8001904 <MemManage_Handler+0x4>

08001906 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800190a:	e7fe      	b.n	800190a <BusFault_Handler+0x4>

0800190c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001910:	e7fe      	b.n	8001910 <UsageFault_Handler+0x4>

08001912 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr

0800191e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr

0800192a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr

08001936 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800193a:	f000 f969 	bl	8001c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
	...

08001944 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001948:	4802      	ldr	r0, [pc, #8]	; (8001954 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800194a:	f000 fded 	bl	8002528 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	200005b4 	.word	0x200005b4

08001958 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800195c:	4802      	ldr	r0, [pc, #8]	; (8001968 <CAN1_RX1_IRQHandler+0x10>)
 800195e:	f000 fde3 	bl	8002528 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	200005b4 	.word	0x200005b4

0800196c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001970:	4802      	ldr	r0, [pc, #8]	; (800197c <TIM1_BRK_IRQHandler+0x10>)
 8001972:	f002 fcf5 	bl	8004360 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	200006b4 	.word	0x200006b4

08001980 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001984:	4802      	ldr	r0, [pc, #8]	; (8001990 <TIM1_UP_IRQHandler+0x10>)
 8001986:	f002 fceb 	bl	8004360 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	200006b4 	.word	0x200006b4

08001994 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001998:	4802      	ldr	r0, [pc, #8]	; (80019a4 <TIM2_IRQHandler+0x10>)
 800199a:	f002 fce1 	bl	8004360 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000714 	.word	0x20000714

080019a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019ac:	4802      	ldr	r0, [pc, #8]	; (80019b8 <USART1_IRQHandler+0x10>)
 80019ae:	f003 fc11 	bl	80051d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000664 	.word	0x20000664

080019bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019c0:	4802      	ldr	r0, [pc, #8]	; (80019cc <USART2_IRQHandler+0x10>)
 80019c2:	f003 fc07 	bl	80051d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	2000075c 	.word	0x2000075c

080019d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d8:	4a14      	ldr	r2, [pc, #80]	; (8001a2c <_sbrk+0x5c>)
 80019da:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <_sbrk+0x60>)
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e4:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <_sbrk+0x64>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d102      	bne.n	80019f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019ec:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <_sbrk+0x64>)
 80019ee:	4a12      	ldr	r2, [pc, #72]	; (8001a38 <_sbrk+0x68>)
 80019f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <_sbrk+0x64>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d207      	bcs.n	8001a10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a00:	f004 f810 	bl	8005a24 <__errno>
 8001a04:	4603      	mov	r3, r0
 8001a06:	220c      	movs	r2, #12
 8001a08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0e:	e009      	b.n	8001a24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <_sbrk+0x64>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a16:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <_sbrk+0x64>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	4a05      	ldr	r2, [pc, #20]	; (8001a34 <_sbrk+0x64>)
 8001a20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a22:	68fb      	ldr	r3, [r7, #12]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20005000 	.word	0x20005000
 8001a30:	00000400 	.word	0x00000400
 8001a34:	200004d8 	.word	0x200004d8
 8001a38:	20000950 	.word	0x20000950

08001a3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr

08001a48 <HAL_UART_RxCpltCallback>:
uint16_t USART2_RX_STA=0;//接收状态标记//bit15：接收完成标志，bit14：接收到0x0d，bit13~0：接收到的有效字节数目
uint8_t USART2_NewData;//当前串口中断接收的1个字节数据的缓存
uint8_t RS485orBT;//当RS485orBT标志位为1时是RS485模式，为0时是蓝牙模式

void  HAL_UART_RxCpltCallback(UART_HandleTypeDef  *huart)//串口中断回调函数
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
	if(huart ==&huart1)//判断中断来源（串口1：USB转串口）
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a31      	ldr	r2, [pc, #196]	; (8001b18 <HAL_UART_RxCpltCallback+0xd0>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d147      	bne.n	8001ae8 <HAL_UART_RxCpltCallback+0xa0>
    {
       printf("%c",USART1_NewData); //把收到的数据以 a符号变量 发送回电脑
 8001a58:	4b30      	ldr	r3, [pc, #192]	; (8001b1c <HAL_UART_RxCpltCallback+0xd4>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f004 f853 	bl	8005b08 <putchar>
       if((USART1_RX_STA&0x8000)==0){//接收未完成
 8001a62:	4b2f      	ldr	r3, [pc, #188]	; (8001b20 <HAL_UART_RxCpltCallback+0xd8>)
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	b21b      	sxth	r3, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	db38      	blt.n	8001ade <HAL_UART_RxCpltCallback+0x96>
           if(USART1_RX_STA&0x4000){//接收到了0x0d
 8001a6c:	4b2c      	ldr	r3, [pc, #176]	; (8001b20 <HAL_UART_RxCpltCallback+0xd8>)
 8001a6e:	881b      	ldrh	r3, [r3, #0]
 8001a70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d011      	beq.n	8001a9c <HAL_UART_RxCpltCallback+0x54>
               if(USART1_NewData!=0x0a)USART1_RX_STA=0;//接收错误,重新开始
 8001a78:	4b28      	ldr	r3, [pc, #160]	; (8001b1c <HAL_UART_RxCpltCallback+0xd4>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b0a      	cmp	r3, #10
 8001a7e:	d003      	beq.n	8001a88 <HAL_UART_RxCpltCallback+0x40>
 8001a80:	4b27      	ldr	r3, [pc, #156]	; (8001b20 <HAL_UART_RxCpltCallback+0xd8>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	801a      	strh	r2, [r3, #0]
 8001a86:	e02a      	b.n	8001ade <HAL_UART_RxCpltCallback+0x96>
               else USART1_RX_STA|=0x8000;   //接收完成了
 8001a88:	4b25      	ldr	r3, [pc, #148]	; (8001b20 <HAL_UART_RxCpltCallback+0xd8>)
 8001a8a:	881b      	ldrh	r3, [r3, #0]
 8001a8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	4b22      	ldr	r3, [pc, #136]	; (8001b20 <HAL_UART_RxCpltCallback+0xd8>)
 8001a98:	801a      	strh	r2, [r3, #0]
 8001a9a:	e020      	b.n	8001ade <HAL_UART_RxCpltCallback+0x96>
           }else{ //还没收到0X0D
               if(USART1_NewData==0x0d)USART1_RX_STA|=0x4000;
 8001a9c:	4b1f      	ldr	r3, [pc, #124]	; (8001b1c <HAL_UART_RxCpltCallback+0xd4>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b0d      	cmp	r3, #13
 8001aa2:	d107      	bne.n	8001ab4 <HAL_UART_RxCpltCallback+0x6c>
 8001aa4:	4b1e      	ldr	r3, [pc, #120]	; (8001b20 <HAL_UART_RxCpltCallback+0xd8>)
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	4b1c      	ldr	r3, [pc, #112]	; (8001b20 <HAL_UART_RxCpltCallback+0xd8>)
 8001ab0:	801a      	strh	r2, [r3, #0]
 8001ab2:	e014      	b.n	8001ade <HAL_UART_RxCpltCallback+0x96>
               else{
                  USART1_RX_BUF[USART1_RX_STA&0X3FFF]=USART1_NewData; //将收到的数据放入数组
 8001ab4:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <HAL_UART_RxCpltCallback+0xd8>)
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001abc:	4a17      	ldr	r2, [pc, #92]	; (8001b1c <HAL_UART_RxCpltCallback+0xd4>)
 8001abe:	7811      	ldrb	r1, [r2, #0]
 8001ac0:	4a18      	ldr	r2, [pc, #96]	; (8001b24 <HAL_UART_RxCpltCallback+0xdc>)
 8001ac2:	54d1      	strb	r1, [r2, r3]
                  USART1_RX_STA++;  //数据长度计数加1
 8001ac4:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <HAL_UART_RxCpltCallback+0xd8>)
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <HAL_UART_RxCpltCallback+0xd8>)
 8001ace:	801a      	strh	r2, [r3, #0]
                  if(USART1_RX_STA>(USART1_REC_LEN-1))USART1_RX_STA=0;//接收数据错误,重新开始接收
 8001ad0:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <HAL_UART_RxCpltCallback+0xd8>)
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	2bc7      	cmp	r3, #199	; 0xc7
 8001ad6:	d902      	bls.n	8001ade <HAL_UART_RxCpltCallback+0x96>
 8001ad8:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <HAL_UART_RxCpltCallback+0xd8>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	801a      	strh	r2, [r3, #0]
               }
           }
       }
       HAL_UART_Receive_IT(&huart1,(uint8_t *)&USART1_NewData,1); //再开启接收中断
 8001ade:	2201      	movs	r2, #1
 8001ae0:	490e      	ldr	r1, [pc, #56]	; (8001b1c <HAL_UART_RxCpltCallback+0xd4>)
 8001ae2:	480d      	ldr	r0, [pc, #52]	; (8001b18 <HAL_UART_RxCpltCallback+0xd0>)
 8001ae4:	f003 fb46 	bl	8005174 <HAL_UART_Receive_IT>
    }
    if(huart ==&huart2)//判断中断来源（RS485）
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a0f      	ldr	r2, [pc, #60]	; (8001b28 <HAL_UART_RxCpltCallback+0xe0>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d10e      	bne.n	8001b0e <HAL_UART_RxCpltCallback+0xc6>
    {
	   USART2_RX_BUF[0]=USART2_NewData;//收到数据放入缓存数组（只用到1个数据存放在数组[0]）
 8001af0:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <HAL_UART_RxCpltCallback+0xe4>)
 8001af2:	781a      	ldrb	r2, [r3, #0]
 8001af4:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <HAL_UART_RxCpltCallback+0xe8>)
 8001af6:	701a      	strb	r2, [r3, #0]
	   USART2_RX_STA++;//数据接收标志位加1
 8001af8:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <HAL_UART_RxCpltCallback+0xec>)
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	3301      	adds	r3, #1
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <HAL_UART_RxCpltCallback+0xec>)
 8001b02:	801a      	strh	r2, [r3, #0]
       HAL_UART_Receive_IT(&huart2,(uint8_t *)&USART2_NewData, 1); //再开启接收中断
 8001b04:	2201      	movs	r2, #1
 8001b06:	4909      	ldr	r1, [pc, #36]	; (8001b2c <HAL_UART_RxCpltCallback+0xe4>)
 8001b08:	4807      	ldr	r0, [pc, #28]	; (8001b28 <HAL_UART_RxCpltCallback+0xe0>)
 8001b0a:	f003 fb33 	bl	8005174 <HAL_UART_Receive_IT>
    }
}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000664 	.word	0x20000664
 8001b1c:	20000870 	.word	0x20000870
 8001b20:	200004dc 	.word	0x200004dc
 8001b24:	20000874 	.word	0x20000874
 8001b28:	2000075c 	.word	0x2000075c
 8001b2c:	200007a5 	.word	0x200007a5
 8001b30:	200007a8 	.word	0x200007a8
 8001b34:	200004de 	.word	0x200004de

08001b38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b38:	480c      	ldr	r0, [pc, #48]	; (8001b6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b3a:	490d      	ldr	r1, [pc, #52]	; (8001b70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b3c:	4a0d      	ldr	r2, [pc, #52]	; (8001b74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b40:	e002      	b.n	8001b48 <LoopCopyDataInit>

08001b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b46:	3304      	adds	r3, #4

08001b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b4c:	d3f9      	bcc.n	8001b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b4e:	4a0a      	ldr	r2, [pc, #40]	; (8001b78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b50:	4c0a      	ldr	r4, [pc, #40]	; (8001b7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b54:	e001      	b.n	8001b5a <LoopFillZerobss>

08001b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b58:	3204      	adds	r2, #4

08001b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b5c:	d3fb      	bcc.n	8001b56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b5e:	f7ff ff6d 	bl	8001a3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b62:	f003 ff65 	bl	8005a30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b66:	f7fe fc19 	bl	800039c <main>
  bx lr
 8001b6a:	4770      	bx	lr
  ldr r0, =_sdata
 8001b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b70:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001b74:	08007f24 	.word	0x08007f24
  ldr r2, =_sbss
 8001b78:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001b7c:	20000950 	.word	0x20000950

08001b80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b80:	e7fe      	b.n	8001b80 <ADC1_2_IRQHandler>
	...

08001b84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <HAL_Init+0x28>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a07      	ldr	r2, [pc, #28]	; (8001bac <HAL_Init+0x28>)
 8001b8e:	f043 0310 	orr.w	r3, r3, #16
 8001b92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b94:	2003      	movs	r0, #3
 8001b96:	f000 ffb7 	bl	8002b08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b9a:	200f      	movs	r0, #15
 8001b9c:	f000 f808 	bl	8001bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ba0:	f7ff fcfe 	bl	80015a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40022000 	.word	0x40022000

08001bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_InitTick+0x54>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_InitTick+0x58>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f000 ffcf 	bl	8002b72 <HAL_SYSTICK_Config>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e00e      	b.n	8001bfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b0f      	cmp	r3, #15
 8001be2:	d80a      	bhi.n	8001bfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be4:	2200      	movs	r2, #0
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bec:	f000 ff97 	bl	8002b1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bf0:	4a06      	ldr	r2, [pc, #24]	; (8001c0c <HAL_InitTick+0x5c>)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	e000      	b.n	8001bfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000018 	.word	0x20000018
 8001c08:	20000020 	.word	0x20000020
 8001c0c:	2000001c 	.word	0x2000001c

08001c10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c14:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <HAL_IncTick+0x1c>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <HAL_IncTick+0x20>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4413      	add	r3, r2
 8001c20:	4a03      	ldr	r2, [pc, #12]	; (8001c30 <HAL_IncTick+0x20>)
 8001c22:	6013      	str	r3, [r2, #0]
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr
 8001c2c:	20000020 	.word	0x20000020
 8001c30:	2000093c 	.word	0x2000093c

08001c34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return uwTick;
 8001c38:	4b02      	ldr	r3, [pc, #8]	; (8001c44 <HAL_GetTick+0x10>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr
 8001c44:	2000093c 	.word	0x2000093c

08001c48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c50:	f7ff fff0 	bl	8001c34 <HAL_GetTick>
 8001c54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c60:	d005      	beq.n	8001c6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c62:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <HAL_Delay+0x44>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	461a      	mov	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c6e:	bf00      	nop
 8001c70:	f7ff ffe0 	bl	8001c34 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d8f7      	bhi.n	8001c70 <HAL_Delay+0x28>
  {
  }
}
 8001c80:	bf00      	nop
 8001c82:	bf00      	nop
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000020 	.word	0x20000020

08001c90 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e0ed      	b.n	8001e7e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d102      	bne.n	8001cb4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff fca8 	bl	8001604 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 0201 	orr.w	r2, r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cc4:	f7ff ffb6 	bl	8001c34 <HAL_GetTick>
 8001cc8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cca:	e012      	b.n	8001cf2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ccc:	f7ff ffb2 	bl	8001c34 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b0a      	cmp	r3, #10
 8001cd8:	d90b      	bls.n	8001cf2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2205      	movs	r2, #5
 8001cea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e0c5      	b.n	8001e7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0e5      	beq.n	8001ccc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 0202 	bic.w	r2, r2, #2
 8001d0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d10:	f7ff ff90 	bl	8001c34 <HAL_GetTick>
 8001d14:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d16:	e012      	b.n	8001d3e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d18:	f7ff ff8c 	bl	8001c34 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b0a      	cmp	r3, #10
 8001d24:	d90b      	bls.n	8001d3e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2205      	movs	r2, #5
 8001d36:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e09f      	b.n	8001e7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1e5      	bne.n	8001d18 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	7e1b      	ldrb	r3, [r3, #24]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d108      	bne.n	8001d66 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	e007      	b.n	8001d76 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	7e5b      	ldrb	r3, [r3, #25]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d108      	bne.n	8001d90 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	e007      	b.n	8001da0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	7e9b      	ldrb	r3, [r3, #26]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d108      	bne.n	8001dba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0220 	orr.w	r2, r2, #32
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	e007      	b.n	8001dca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 0220 	bic.w	r2, r2, #32
 8001dc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	7edb      	ldrb	r3, [r3, #27]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d108      	bne.n	8001de4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0210 	bic.w	r2, r2, #16
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	e007      	b.n	8001df4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 0210 	orr.w	r2, r2, #16
 8001df2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	7f1b      	ldrb	r3, [r3, #28]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d108      	bne.n	8001e0e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0208 	orr.w	r2, r2, #8
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	e007      	b.n	8001e1e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 0208 	bic.w	r2, r2, #8
 8001e1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	7f5b      	ldrb	r3, [r3, #29]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d108      	bne.n	8001e38 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f042 0204 	orr.w	r2, r2, #4
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	e007      	b.n	8001e48 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 0204 	bic.w	r2, r2, #4
 8001e46:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	431a      	orrs	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	ea42 0103 	orr.w	r1, r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	1e5a      	subs	r2, r3, #1
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b087      	sub	sp, #28
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e9c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001e9e:	7cfb      	ldrb	r3, [r7, #19]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d003      	beq.n	8001eac <HAL_CAN_ConfigFilter+0x26>
 8001ea4:	7cfb      	ldrb	r3, [r7, #19]
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	f040 80aa 	bne.w	8002000 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001eb2:	f043 0201 	orr.w	r2, r3, #1
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	f003 031f 	and.w	r3, r3, #31
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	401a      	ands	r2, r3
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d123      	bne.n	8001f2e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	401a      	ands	r2, r3
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f08:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	3248      	adds	r2, #72	; 0x48
 8001f0e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f22:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f24:	6979      	ldr	r1, [r7, #20]
 8001f26:	3348      	adds	r3, #72	; 0x48
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	440b      	add	r3, r1
 8001f2c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d122      	bne.n	8001f7c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f56:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	3248      	adds	r2, #72	; 0x48
 8001f5c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f70:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f72:	6979      	ldr	r1, [r7, #20]
 8001f74:	3348      	adds	r3, #72	; 0x48
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	440b      	add	r3, r1
 8001f7a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d109      	bne.n	8001f98 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	401a      	ands	r2, r3
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001f96:	e007      	b.n	8001fa8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d109      	bne.n	8001fc4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	401a      	ands	r2, r3
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001fc2:	e007      	b.n	8001fd4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d107      	bne.n	8001fec <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ff2:	f023 0201 	bic.w	r2, r3, #1
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	e006      	b.n	800200e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002004:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
  }
}
 800200e:	4618      	mov	r0, r3
 8002010:	371c      	adds	r7, #28
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr

08002018 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b01      	cmp	r3, #1
 800202a:	d12e      	bne.n	800208a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2202      	movs	r2, #2
 8002030:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0201 	bic.w	r2, r2, #1
 8002042:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002044:	f7ff fdf6 	bl	8001c34 <HAL_GetTick>
 8002048:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800204a:	e012      	b.n	8002072 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800204c:	f7ff fdf2 	bl	8001c34 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b0a      	cmp	r3, #10
 8002058:	d90b      	bls.n	8002072 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2205      	movs	r2, #5
 800206a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e012      	b.n	8002098 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1e5      	bne.n	800204c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	e006      	b.n	8002098 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
  }
}
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b089      	sub	sp, #36	; 0x24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
 80020ac:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020b4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80020be:	7ffb      	ldrb	r3, [r7, #31]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d003      	beq.n	80020cc <HAL_CAN_AddTxMessage+0x2c>
 80020c4:	7ffb      	ldrb	r3, [r7, #31]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	f040 80b8 	bne.w	800223c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10a      	bne.n	80020ec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d105      	bne.n	80020ec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 80a0 	beq.w	800222c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	0e1b      	lsrs	r3, r3, #24
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d907      	bls.n	800210c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e09e      	b.n	800224a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800210c:	2201      	movs	r2, #1
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	409a      	lsls	r2, r3
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10d      	bne.n	800213a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002128:	68f9      	ldr	r1, [r7, #12]
 800212a:	6809      	ldr	r1, [r1, #0]
 800212c:	431a      	orrs	r2, r3
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	3318      	adds	r3, #24
 8002132:	011b      	lsls	r3, r3, #4
 8002134:	440b      	add	r3, r1
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	e00f      	b.n	800215a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002144:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800214a:	68f9      	ldr	r1, [r7, #12]
 800214c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800214e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	3318      	adds	r3, #24
 8002154:	011b      	lsls	r3, r3, #4
 8002156:	440b      	add	r3, r1
 8002158:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6819      	ldr	r1, [r3, #0]
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	691a      	ldr	r2, [r3, #16]
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	3318      	adds	r3, #24
 8002166:	011b      	lsls	r3, r3, #4
 8002168:	440b      	add	r3, r1
 800216a:	3304      	adds	r3, #4
 800216c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	7d1b      	ldrb	r3, [r3, #20]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d111      	bne.n	800219a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	3318      	adds	r3, #24
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	4413      	add	r3, r2
 8002182:	3304      	adds	r3, #4
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	6811      	ldr	r1, [r2, #0]
 800218a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	3318      	adds	r3, #24
 8002192:	011b      	lsls	r3, r3, #4
 8002194:	440b      	add	r3, r1
 8002196:	3304      	adds	r3, #4
 8002198:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3307      	adds	r3, #7
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	061a      	lsls	r2, r3, #24
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3306      	adds	r3, #6
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	041b      	lsls	r3, r3, #16
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3305      	adds	r3, #5
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	021b      	lsls	r3, r3, #8
 80021b4:	4313      	orrs	r3, r2
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	3204      	adds	r2, #4
 80021ba:	7812      	ldrb	r2, [r2, #0]
 80021bc:	4610      	mov	r0, r2
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	6811      	ldr	r1, [r2, #0]
 80021c2:	ea43 0200 	orr.w	r2, r3, r0
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	011b      	lsls	r3, r3, #4
 80021ca:	440b      	add	r3, r1
 80021cc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80021d0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3303      	adds	r3, #3
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	061a      	lsls	r2, r3, #24
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3302      	adds	r3, #2
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	041b      	lsls	r3, r3, #16
 80021e2:	431a      	orrs	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3301      	adds	r3, #1
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	021b      	lsls	r3, r3, #8
 80021ec:	4313      	orrs	r3, r2
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	7812      	ldrb	r2, [r2, #0]
 80021f2:	4610      	mov	r0, r2
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	6811      	ldr	r1, [r2, #0]
 80021f8:	ea43 0200 	orr.w	r2, r3, r0
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	011b      	lsls	r3, r3, #4
 8002200:	440b      	add	r3, r1
 8002202:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002206:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	3318      	adds	r3, #24
 8002210:	011b      	lsls	r3, r3, #4
 8002212:	4413      	add	r3, r2
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	6811      	ldr	r1, [r2, #0]
 800221a:	f043 0201 	orr.w	r2, r3, #1
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	3318      	adds	r3, #24
 8002222:	011b      	lsls	r3, r3, #4
 8002224:	440b      	add	r3, r1
 8002226:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002228:	2300      	movs	r3, #0
 800222a:	e00e      	b.n	800224a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e006      	b.n	800224a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
  }
}
 800224a:	4618      	mov	r0, r3
 800224c:	3724      	adds	r7, #36	; 0x24
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr

08002254 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002266:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002268:	7afb      	ldrb	r3, [r7, #11]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d002      	beq.n	8002274 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800226e:	7afb      	ldrb	r3, [r7, #11]
 8002270:	2b02      	cmp	r3, #2
 8002272:	d11d      	bne.n	80022b0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d002      	beq.n	8002288 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	3301      	adds	r3, #1
 8002286:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d002      	beq.n	800229c <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	3301      	adds	r3, #1
 800229a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d002      	beq.n	80022b0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	3301      	adds	r3, #1
 80022ae:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80022b0:	68fb      	ldr	r3, [r7, #12]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr

080022bc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80022bc:	b480      	push	{r7}
 80022be:	b087      	sub	sp, #28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
 80022c8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022d0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80022d2:	7dfb      	ldrb	r3, [r7, #23]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d003      	beq.n	80022e0 <HAL_CAN_GetRxMessage+0x24>
 80022d8:	7dfb      	ldrb	r3, [r7, #23]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	f040 80f3 	bne.w	80024c6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10e      	bne.n	8002304 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d116      	bne.n	8002322 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e0e7      	b.n	80024d4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d107      	bne.n	8002322 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e0d8      	b.n	80024d4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	331b      	adds	r3, #27
 800232a:	011b      	lsls	r3, r3, #4
 800232c:	4413      	add	r3, r2
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0204 	and.w	r2, r3, #4
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10c      	bne.n	800235a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	331b      	adds	r3, #27
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	4413      	add	r3, r2
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	0d5b      	lsrs	r3, r3, #21
 8002350:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	e00b      	b.n	8002372 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	331b      	adds	r3, #27
 8002362:	011b      	lsls	r3, r3, #4
 8002364:	4413      	add	r3, r2
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	08db      	lsrs	r3, r3, #3
 800236a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	331b      	adds	r3, #27
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	4413      	add	r3, r2
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0202 	and.w	r2, r3, #2
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	331b      	adds	r3, #27
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	4413      	add	r3, r2
 8002394:	3304      	adds	r3, #4
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 020f 	and.w	r2, r3, #15
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	331b      	adds	r3, #27
 80023a8:	011b      	lsls	r3, r3, #4
 80023aa:	4413      	add	r3, r2
 80023ac:	3304      	adds	r3, #4
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	0a1b      	lsrs	r3, r3, #8
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	331b      	adds	r3, #27
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	4413      	add	r3, r2
 80023c4:	3304      	adds	r3, #4
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	0c1b      	lsrs	r3, r3, #16
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	011b      	lsls	r3, r3, #4
 80023d8:	4413      	add	r3, r2
 80023da:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	0a1a      	lsrs	r2, r3, #8
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	3301      	adds	r3, #1
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	4413      	add	r3, r2
 800240a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	0c1a      	lsrs	r2, r3, #16
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	3302      	adds	r3, #2
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	011b      	lsls	r3, r3, #4
 8002422:	4413      	add	r3, r2
 8002424:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	0e1a      	lsrs	r2, r3, #24
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	3303      	adds	r3, #3
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	4413      	add	r3, r2
 800243e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	3304      	adds	r3, #4
 8002448:	b2d2      	uxtb	r2, r2
 800244a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	4413      	add	r3, r2
 8002456:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	0a1a      	lsrs	r2, r3, #8
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	3305      	adds	r3, #5
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	011b      	lsls	r3, r3, #4
 800246e:	4413      	add	r3, r2
 8002470:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	0c1a      	lsrs	r2, r3, #16
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	3306      	adds	r3, #6
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	4413      	add	r3, r2
 800248a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	0e1a      	lsrs	r2, r3, #24
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	3307      	adds	r3, #7
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d108      	bne.n	80024b2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 0220 	orr.w	r2, r2, #32
 80024ae:	60da      	str	r2, [r3, #12]
 80024b0:	e007      	b.n	80024c2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	691a      	ldr	r2, [r3, #16]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f042 0220 	orr.w	r2, r2, #32
 80024c0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	e006      	b.n	80024d4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
  }
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	371c      	adds	r7, #28
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr

080024de <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80024de:	b480      	push	{r7}
 80024e0:	b085      	sub	sp, #20
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024ee:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80024f0:	7bfb      	ldrb	r3, [r7, #15]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d002      	beq.n	80024fc <HAL_CAN_ActivateNotification+0x1e>
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d109      	bne.n	8002510 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6959      	ldr	r1, [r3, #20]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	430a      	orrs	r2, r1
 800250a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800250c:	2300      	movs	r3, #0
 800250e:	e006      	b.n	800251e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002514:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
  }
}
 800251e:	4618      	mov	r0, r3
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr

08002528 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b08a      	sub	sp, #40	; 0x28
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002530:	2300      	movs	r3, #0
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d07c      	beq.n	8002668 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	2b00      	cmp	r3, #0
 8002576:	d023      	beq.n	80025c0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2201      	movs	r2, #1
 800257e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f983 	bl	8002896 <HAL_CAN_TxMailbox0CompleteCallback>
 8002590:	e016      	b.n	80025c0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	d004      	beq.n	80025a6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24
 80025a4:	e00c      	b.n	80025c0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	f003 0308 	and.w	r3, r3, #8
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d004      	beq.n	80025ba <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24
 80025b8:	e002      	b.n	80025c0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f986 	bl	80028cc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d024      	beq.n	8002614 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025d2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f962 	bl	80028a8 <HAL_CAN_TxMailbox1CompleteCallback>
 80025e4:	e016      	b.n	8002614 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d004      	beq.n	80025fa <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
 80025f8:	e00c      	b.n	8002614 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002600:	2b00      	cmp	r3, #0
 8002602:	d004      	beq.n	800260e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
 800260c:	e002      	b.n	8002614 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f965 	bl	80028de <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d024      	beq.n	8002668 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002626:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f941 	bl	80028ba <HAL_CAN_TxMailbox2CompleteCallback>
 8002638:	e016      	b.n	8002668 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d004      	beq.n	800264e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
 800264c:	e00c      	b.n	8002668 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d004      	beq.n	8002662 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800265e:	627b      	str	r3, [r7, #36]	; 0x24
 8002660:	e002      	b.n	8002668 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f944 	bl	80028f0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00c      	beq.n	800268c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f003 0310 	and.w	r3, r3, #16
 8002678:	2b00      	cmp	r3, #0
 800267a:	d007      	beq.n	800268c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002682:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2210      	movs	r2, #16
 800268a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	f003 0304 	and.w	r3, r3, #4
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00b      	beq.n	80026ae <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f003 0308 	and.w	r3, r3, #8
 800269c:	2b00      	cmp	r3, #0
 800269e:	d006      	beq.n	80026ae <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2208      	movs	r2, #8
 80026a6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 f933 	bl	8002914 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d009      	beq.n	80026cc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	f003 0303 	and.w	r3, r3, #3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d002      	beq.n	80026cc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f91b 	bl	8002902 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00c      	beq.n	80026f0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	f003 0310 	and.w	r3, r3, #16
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d007      	beq.n	80026f0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2210      	movs	r2, #16
 80026ee:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	f003 0320 	and.w	r3, r3, #32
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00b      	beq.n	8002712 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	f003 0308 	and.w	r3, r3, #8
 8002700:	2b00      	cmp	r3, #0
 8002702:	d006      	beq.n	8002712 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2208      	movs	r2, #8
 800270a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 f90a 	bl	8002926 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	f003 0310 	and.w	r3, r3, #16
 8002718:	2b00      	cmp	r3, #0
 800271a:	d009      	beq.n	8002730 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d002      	beq.n	8002730 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7fd fd6c 	bl	8000208 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00b      	beq.n	8002752 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	f003 0310 	and.w	r3, r3, #16
 8002740:	2b00      	cmp	r3, #0
 8002742:	d006      	beq.n	8002752 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2210      	movs	r2, #16
 800274a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 f8f3 	bl	8002938 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00b      	beq.n	8002774 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	f003 0308 	and.w	r3, r3, #8
 8002762:	2b00      	cmp	r3, #0
 8002764:	d006      	beq.n	8002774 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2208      	movs	r2, #8
 800276c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f8eb 	bl	800294a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d07b      	beq.n	8002876 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d072      	beq.n	800286e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002788:	6a3b      	ldr	r3, [r7, #32]
 800278a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278e:	2b00      	cmp	r3, #0
 8002790:	d008      	beq.n	80027a4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002798:	2b00      	cmp	r3, #0
 800279a:	d003      	beq.n	80027a4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	f043 0301 	orr.w	r3, r3, #1
 80027a2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027a4:	6a3b      	ldr	r3, [r7, #32]
 80027a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d008      	beq.n	80027c0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	f043 0302 	orr.w	r3, r3, #2
 80027be:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d008      	beq.n	80027dc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	f043 0304 	orr.w	r3, r3, #4
 80027da:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d043      	beq.n	800286e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d03e      	beq.n	800286e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027f6:	2b60      	cmp	r3, #96	; 0x60
 80027f8:	d02b      	beq.n	8002852 <HAL_CAN_IRQHandler+0x32a>
 80027fa:	2b60      	cmp	r3, #96	; 0x60
 80027fc:	d82e      	bhi.n	800285c <HAL_CAN_IRQHandler+0x334>
 80027fe:	2b50      	cmp	r3, #80	; 0x50
 8002800:	d022      	beq.n	8002848 <HAL_CAN_IRQHandler+0x320>
 8002802:	2b50      	cmp	r3, #80	; 0x50
 8002804:	d82a      	bhi.n	800285c <HAL_CAN_IRQHandler+0x334>
 8002806:	2b40      	cmp	r3, #64	; 0x40
 8002808:	d019      	beq.n	800283e <HAL_CAN_IRQHandler+0x316>
 800280a:	2b40      	cmp	r3, #64	; 0x40
 800280c:	d826      	bhi.n	800285c <HAL_CAN_IRQHandler+0x334>
 800280e:	2b30      	cmp	r3, #48	; 0x30
 8002810:	d010      	beq.n	8002834 <HAL_CAN_IRQHandler+0x30c>
 8002812:	2b30      	cmp	r3, #48	; 0x30
 8002814:	d822      	bhi.n	800285c <HAL_CAN_IRQHandler+0x334>
 8002816:	2b10      	cmp	r3, #16
 8002818:	d002      	beq.n	8002820 <HAL_CAN_IRQHandler+0x2f8>
 800281a:	2b20      	cmp	r3, #32
 800281c:	d005      	beq.n	800282a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800281e:	e01d      	b.n	800285c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	f043 0308 	orr.w	r3, r3, #8
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002828:	e019      	b.n	800285e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	f043 0310 	orr.w	r3, r3, #16
 8002830:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002832:	e014      	b.n	800285e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	f043 0320 	orr.w	r3, r3, #32
 800283a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800283c:	e00f      	b.n	800285e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002846:	e00a      	b.n	800285e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002850:	e005      	b.n	800285e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800285a:	e000      	b.n	800285e <HAL_CAN_IRQHandler+0x336>
            break;
 800285c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	699a      	ldr	r2, [r3, #24]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800286c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2204      	movs	r2, #4
 8002874:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	2b00      	cmp	r3, #0
 800287a:	d008      	beq.n	800288e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f867 	bl	800295c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800288e:	bf00      	nop
 8002890:	3728      	adds	r7, #40	; 0x28
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bc80      	pop	{r7}
 80028b8:	4770      	bx	lr

080028ba <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr

080028cc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr

080028de <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr

080028f0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr

08002902 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr

08002926 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr

08002938 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr

0800294a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr

0800295c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr
	...

08002970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002980:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800298c:	4013      	ands	r3, r2
 800298e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800299c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029a2:	4a04      	ldr	r2, [pc, #16]	; (80029b4 <__NVIC_SetPriorityGrouping+0x44>)
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	60d3      	str	r3, [r2, #12]
}
 80029a8:	bf00      	nop
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029bc:	4b04      	ldr	r3, [pc, #16]	; (80029d0 <__NVIC_GetPriorityGrouping+0x18>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	0a1b      	lsrs	r3, r3, #8
 80029c2:	f003 0307 	and.w	r3, r3, #7
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	e000ed00 	.word	0xe000ed00

080029d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	db0b      	blt.n	80029fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029e6:	79fb      	ldrb	r3, [r7, #7]
 80029e8:	f003 021f 	and.w	r2, r3, #31
 80029ec:	4906      	ldr	r1, [pc, #24]	; (8002a08 <__NVIC_EnableIRQ+0x34>)
 80029ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f2:	095b      	lsrs	r3, r3, #5
 80029f4:	2001      	movs	r0, #1
 80029f6:	fa00 f202 	lsl.w	r2, r0, r2
 80029fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr
 8002a08:	e000e100 	.word	0xe000e100

08002a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	6039      	str	r1, [r7, #0]
 8002a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	db0a      	blt.n	8002a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	490c      	ldr	r1, [pc, #48]	; (8002a58 <__NVIC_SetPriority+0x4c>)
 8002a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2a:	0112      	lsls	r2, r2, #4
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	440b      	add	r3, r1
 8002a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a34:	e00a      	b.n	8002a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	4908      	ldr	r1, [pc, #32]	; (8002a5c <__NVIC_SetPriority+0x50>)
 8002a3c:	79fb      	ldrb	r3, [r7, #7]
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	3b04      	subs	r3, #4
 8002a44:	0112      	lsls	r2, r2, #4
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	440b      	add	r3, r1
 8002a4a:	761a      	strb	r2, [r3, #24]
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	e000e100 	.word	0xe000e100
 8002a5c:	e000ed00 	.word	0xe000ed00

08002a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b089      	sub	sp, #36	; 0x24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	f1c3 0307 	rsb	r3, r3, #7
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	bf28      	it	cs
 8002a7e:	2304      	movcs	r3, #4
 8002a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	3304      	adds	r3, #4
 8002a86:	2b06      	cmp	r3, #6
 8002a88:	d902      	bls.n	8002a90 <NVIC_EncodePriority+0x30>
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	3b03      	subs	r3, #3
 8002a8e:	e000      	b.n	8002a92 <NVIC_EncodePriority+0x32>
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a94:	f04f 32ff 	mov.w	r2, #4294967295
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	43da      	mvns	r2, r3
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	401a      	ands	r2, r3
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab2:	43d9      	mvns	r1, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab8:	4313      	orrs	r3, r2
         );
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3724      	adds	r7, #36	; 0x24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ad4:	d301      	bcc.n	8002ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e00f      	b.n	8002afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ada:	4a0a      	ldr	r2, [pc, #40]	; (8002b04 <SysTick_Config+0x40>)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ae2:	210f      	movs	r1, #15
 8002ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae8:	f7ff ff90 	bl	8002a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aec:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <SysTick_Config+0x40>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002af2:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <SysTick_Config+0x40>)
 8002af4:	2207      	movs	r2, #7
 8002af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	e000e010 	.word	0xe000e010

08002b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7ff ff2d 	bl	8002970 <__NVIC_SetPriorityGrouping>
}
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b086      	sub	sp, #24
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	4603      	mov	r3, r0
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	607a      	str	r2, [r7, #4]
 8002b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b30:	f7ff ff42 	bl	80029b8 <__NVIC_GetPriorityGrouping>
 8002b34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	68b9      	ldr	r1, [r7, #8]
 8002b3a:	6978      	ldr	r0, [r7, #20]
 8002b3c:	f7ff ff90 	bl	8002a60 <NVIC_EncodePriority>
 8002b40:	4602      	mov	r2, r0
 8002b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b46:	4611      	mov	r1, r2
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff ff5f 	bl	8002a0c <__NVIC_SetPriority>
}
 8002b4e:	bf00      	nop
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b082      	sub	sp, #8
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff ff35 	bl	80029d4 <__NVIC_EnableIRQ>
}
 8002b6a:	bf00      	nop
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b082      	sub	sp, #8
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff ffa2 	bl	8002ac4 <SysTick_Config>
 8002b80:	4603      	mov	r3, r0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b085      	sub	sp, #20
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b92:	2300      	movs	r3, #0
 8002b94:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d008      	beq.n	8002bb2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2204      	movs	r2, #4
 8002ba4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e020      	b.n	8002bf4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 020e 	bic.w	r2, r2, #14
 8002bc0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0201 	bic.w	r2, r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bda:	2101      	movs	r1, #1
 8002bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8002be0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr
	...

08002c00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d005      	beq.n	8002c22 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2204      	movs	r2, #4
 8002c1a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	73fb      	strb	r3, [r7, #15]
 8002c20:	e051      	b.n	8002cc6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 020e 	bic.w	r2, r2, #14
 8002c30:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 0201 	bic.w	r2, r2, #1
 8002c40:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a22      	ldr	r2, [pc, #136]	; (8002cd0 <HAL_DMA_Abort_IT+0xd0>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d029      	beq.n	8002ca0 <HAL_DMA_Abort_IT+0xa0>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a20      	ldr	r2, [pc, #128]	; (8002cd4 <HAL_DMA_Abort_IT+0xd4>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d022      	beq.n	8002c9c <HAL_DMA_Abort_IT+0x9c>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a1f      	ldr	r2, [pc, #124]	; (8002cd8 <HAL_DMA_Abort_IT+0xd8>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d01a      	beq.n	8002c96 <HAL_DMA_Abort_IT+0x96>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a1d      	ldr	r2, [pc, #116]	; (8002cdc <HAL_DMA_Abort_IT+0xdc>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d012      	beq.n	8002c90 <HAL_DMA_Abort_IT+0x90>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a1c      	ldr	r2, [pc, #112]	; (8002ce0 <HAL_DMA_Abort_IT+0xe0>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d00a      	beq.n	8002c8a <HAL_DMA_Abort_IT+0x8a>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a1a      	ldr	r2, [pc, #104]	; (8002ce4 <HAL_DMA_Abort_IT+0xe4>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d102      	bne.n	8002c84 <HAL_DMA_Abort_IT+0x84>
 8002c7e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c82:	e00e      	b.n	8002ca2 <HAL_DMA_Abort_IT+0xa2>
 8002c84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c88:	e00b      	b.n	8002ca2 <HAL_DMA_Abort_IT+0xa2>
 8002c8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c8e:	e008      	b.n	8002ca2 <HAL_DMA_Abort_IT+0xa2>
 8002c90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c94:	e005      	b.n	8002ca2 <HAL_DMA_Abort_IT+0xa2>
 8002c96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c9a:	e002      	b.n	8002ca2 <HAL_DMA_Abort_IT+0xa2>
 8002c9c:	2310      	movs	r3, #16
 8002c9e:	e000      	b.n	8002ca2 <HAL_DMA_Abort_IT+0xa2>
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	4a11      	ldr	r2, [pc, #68]	; (8002ce8 <HAL_DMA_Abort_IT+0xe8>)
 8002ca4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	4798      	blx	r3
    } 
  }
  return status;
 8002cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40020008 	.word	0x40020008
 8002cd4:	4002001c 	.word	0x4002001c
 8002cd8:	40020030 	.word	0x40020030
 8002cdc:	40020044 	.word	0x40020044
 8002ce0:	40020058 	.word	0x40020058
 8002ce4:	4002006c 	.word	0x4002006c
 8002ce8:	40020000 	.word	0x40020000

08002cec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b08b      	sub	sp, #44	; 0x2c
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cfe:	e169      	b.n	8002fd4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d00:	2201      	movs	r2, #1
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	69fa      	ldr	r2, [r7, #28]
 8002d10:	4013      	ands	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	f040 8158 	bne.w	8002fce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	4a9a      	ldr	r2, [pc, #616]	; (8002f8c <HAL_GPIO_Init+0x2a0>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d05e      	beq.n	8002de6 <HAL_GPIO_Init+0xfa>
 8002d28:	4a98      	ldr	r2, [pc, #608]	; (8002f8c <HAL_GPIO_Init+0x2a0>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d875      	bhi.n	8002e1a <HAL_GPIO_Init+0x12e>
 8002d2e:	4a98      	ldr	r2, [pc, #608]	; (8002f90 <HAL_GPIO_Init+0x2a4>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d058      	beq.n	8002de6 <HAL_GPIO_Init+0xfa>
 8002d34:	4a96      	ldr	r2, [pc, #600]	; (8002f90 <HAL_GPIO_Init+0x2a4>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d86f      	bhi.n	8002e1a <HAL_GPIO_Init+0x12e>
 8002d3a:	4a96      	ldr	r2, [pc, #600]	; (8002f94 <HAL_GPIO_Init+0x2a8>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d052      	beq.n	8002de6 <HAL_GPIO_Init+0xfa>
 8002d40:	4a94      	ldr	r2, [pc, #592]	; (8002f94 <HAL_GPIO_Init+0x2a8>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d869      	bhi.n	8002e1a <HAL_GPIO_Init+0x12e>
 8002d46:	4a94      	ldr	r2, [pc, #592]	; (8002f98 <HAL_GPIO_Init+0x2ac>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d04c      	beq.n	8002de6 <HAL_GPIO_Init+0xfa>
 8002d4c:	4a92      	ldr	r2, [pc, #584]	; (8002f98 <HAL_GPIO_Init+0x2ac>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d863      	bhi.n	8002e1a <HAL_GPIO_Init+0x12e>
 8002d52:	4a92      	ldr	r2, [pc, #584]	; (8002f9c <HAL_GPIO_Init+0x2b0>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d046      	beq.n	8002de6 <HAL_GPIO_Init+0xfa>
 8002d58:	4a90      	ldr	r2, [pc, #576]	; (8002f9c <HAL_GPIO_Init+0x2b0>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d85d      	bhi.n	8002e1a <HAL_GPIO_Init+0x12e>
 8002d5e:	2b12      	cmp	r3, #18
 8002d60:	d82a      	bhi.n	8002db8 <HAL_GPIO_Init+0xcc>
 8002d62:	2b12      	cmp	r3, #18
 8002d64:	d859      	bhi.n	8002e1a <HAL_GPIO_Init+0x12e>
 8002d66:	a201      	add	r2, pc, #4	; (adr r2, 8002d6c <HAL_GPIO_Init+0x80>)
 8002d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d6c:	08002de7 	.word	0x08002de7
 8002d70:	08002dc1 	.word	0x08002dc1
 8002d74:	08002dd3 	.word	0x08002dd3
 8002d78:	08002e15 	.word	0x08002e15
 8002d7c:	08002e1b 	.word	0x08002e1b
 8002d80:	08002e1b 	.word	0x08002e1b
 8002d84:	08002e1b 	.word	0x08002e1b
 8002d88:	08002e1b 	.word	0x08002e1b
 8002d8c:	08002e1b 	.word	0x08002e1b
 8002d90:	08002e1b 	.word	0x08002e1b
 8002d94:	08002e1b 	.word	0x08002e1b
 8002d98:	08002e1b 	.word	0x08002e1b
 8002d9c:	08002e1b 	.word	0x08002e1b
 8002da0:	08002e1b 	.word	0x08002e1b
 8002da4:	08002e1b 	.word	0x08002e1b
 8002da8:	08002e1b 	.word	0x08002e1b
 8002dac:	08002e1b 	.word	0x08002e1b
 8002db0:	08002dc9 	.word	0x08002dc9
 8002db4:	08002ddd 	.word	0x08002ddd
 8002db8:	4a79      	ldr	r2, [pc, #484]	; (8002fa0 <HAL_GPIO_Init+0x2b4>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d013      	beq.n	8002de6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002dbe:	e02c      	b.n	8002e1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	623b      	str	r3, [r7, #32]
          break;
 8002dc6:	e029      	b.n	8002e1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	3304      	adds	r3, #4
 8002dce:	623b      	str	r3, [r7, #32]
          break;
 8002dd0:	e024      	b.n	8002e1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	3308      	adds	r3, #8
 8002dd8:	623b      	str	r3, [r7, #32]
          break;
 8002dda:	e01f      	b.n	8002e1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	330c      	adds	r3, #12
 8002de2:	623b      	str	r3, [r7, #32]
          break;
 8002de4:	e01a      	b.n	8002e1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d102      	bne.n	8002df4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002dee:	2304      	movs	r3, #4
 8002df0:	623b      	str	r3, [r7, #32]
          break;
 8002df2:	e013      	b.n	8002e1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d105      	bne.n	8002e08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002dfc:	2308      	movs	r3, #8
 8002dfe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69fa      	ldr	r2, [r7, #28]
 8002e04:	611a      	str	r2, [r3, #16]
          break;
 8002e06:	e009      	b.n	8002e1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e08:	2308      	movs	r3, #8
 8002e0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	69fa      	ldr	r2, [r7, #28]
 8002e10:	615a      	str	r2, [r3, #20]
          break;
 8002e12:	e003      	b.n	8002e1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e14:	2300      	movs	r3, #0
 8002e16:	623b      	str	r3, [r7, #32]
          break;
 8002e18:	e000      	b.n	8002e1c <HAL_GPIO_Init+0x130>
          break;
 8002e1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	2bff      	cmp	r3, #255	; 0xff
 8002e20:	d801      	bhi.n	8002e26 <HAL_GPIO_Init+0x13a>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	e001      	b.n	8002e2a <HAL_GPIO_Init+0x13e>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	3304      	adds	r3, #4
 8002e2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	2bff      	cmp	r3, #255	; 0xff
 8002e30:	d802      	bhi.n	8002e38 <HAL_GPIO_Init+0x14c>
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	e002      	b.n	8002e3e <HAL_GPIO_Init+0x152>
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	3b08      	subs	r3, #8
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	210f      	movs	r1, #15
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	401a      	ands	r2, r3
 8002e50:	6a39      	ldr	r1, [r7, #32]
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	fa01 f303 	lsl.w	r3, r1, r3
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 80b1 	beq.w	8002fce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e6c:	4b4d      	ldr	r3, [pc, #308]	; (8002fa4 <HAL_GPIO_Init+0x2b8>)
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	4a4c      	ldr	r2, [pc, #304]	; (8002fa4 <HAL_GPIO_Init+0x2b8>)
 8002e72:	f043 0301 	orr.w	r3, r3, #1
 8002e76:	6193      	str	r3, [r2, #24]
 8002e78:	4b4a      	ldr	r3, [pc, #296]	; (8002fa4 <HAL_GPIO_Init+0x2b8>)
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	60bb      	str	r3, [r7, #8]
 8002e82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e84:	4a48      	ldr	r2, [pc, #288]	; (8002fa8 <HAL_GPIO_Init+0x2bc>)
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	089b      	lsrs	r3, r3, #2
 8002e8a:	3302      	adds	r3, #2
 8002e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	f003 0303 	and.w	r3, r3, #3
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	220f      	movs	r2, #15
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a40      	ldr	r2, [pc, #256]	; (8002fac <HAL_GPIO_Init+0x2c0>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d013      	beq.n	8002ed8 <HAL_GPIO_Init+0x1ec>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a3f      	ldr	r2, [pc, #252]	; (8002fb0 <HAL_GPIO_Init+0x2c4>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d00d      	beq.n	8002ed4 <HAL_GPIO_Init+0x1e8>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a3e      	ldr	r2, [pc, #248]	; (8002fb4 <HAL_GPIO_Init+0x2c8>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d007      	beq.n	8002ed0 <HAL_GPIO_Init+0x1e4>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a3d      	ldr	r2, [pc, #244]	; (8002fb8 <HAL_GPIO_Init+0x2cc>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d101      	bne.n	8002ecc <HAL_GPIO_Init+0x1e0>
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e006      	b.n	8002eda <HAL_GPIO_Init+0x1ee>
 8002ecc:	2304      	movs	r3, #4
 8002ece:	e004      	b.n	8002eda <HAL_GPIO_Init+0x1ee>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	e002      	b.n	8002eda <HAL_GPIO_Init+0x1ee>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e000      	b.n	8002eda <HAL_GPIO_Init+0x1ee>
 8002ed8:	2300      	movs	r3, #0
 8002eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002edc:	f002 0203 	and.w	r2, r2, #3
 8002ee0:	0092      	lsls	r2, r2, #2
 8002ee2:	4093      	lsls	r3, r2
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002eea:	492f      	ldr	r1, [pc, #188]	; (8002fa8 <HAL_GPIO_Init+0x2bc>)
 8002eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eee:	089b      	lsrs	r3, r3, #2
 8002ef0:	3302      	adds	r3, #2
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d006      	beq.n	8002f12 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f04:	4b2d      	ldr	r3, [pc, #180]	; (8002fbc <HAL_GPIO_Init+0x2d0>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	492c      	ldr	r1, [pc, #176]	; (8002fbc <HAL_GPIO_Init+0x2d0>)
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	600b      	str	r3, [r1, #0]
 8002f10:	e006      	b.n	8002f20 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f12:	4b2a      	ldr	r3, [pc, #168]	; (8002fbc <HAL_GPIO_Init+0x2d0>)
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	4928      	ldr	r1, [pc, #160]	; (8002fbc <HAL_GPIO_Init+0x2d0>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d006      	beq.n	8002f3a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f2c:	4b23      	ldr	r3, [pc, #140]	; (8002fbc <HAL_GPIO_Init+0x2d0>)
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	4922      	ldr	r1, [pc, #136]	; (8002fbc <HAL_GPIO_Init+0x2d0>)
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	604b      	str	r3, [r1, #4]
 8002f38:	e006      	b.n	8002f48 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f3a:	4b20      	ldr	r3, [pc, #128]	; (8002fbc <HAL_GPIO_Init+0x2d0>)
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	43db      	mvns	r3, r3
 8002f42:	491e      	ldr	r1, [pc, #120]	; (8002fbc <HAL_GPIO_Init+0x2d0>)
 8002f44:	4013      	ands	r3, r2
 8002f46:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d006      	beq.n	8002f62 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f54:	4b19      	ldr	r3, [pc, #100]	; (8002fbc <HAL_GPIO_Init+0x2d0>)
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	4918      	ldr	r1, [pc, #96]	; (8002fbc <HAL_GPIO_Init+0x2d0>)
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	608b      	str	r3, [r1, #8]
 8002f60:	e006      	b.n	8002f70 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f62:	4b16      	ldr	r3, [pc, #88]	; (8002fbc <HAL_GPIO_Init+0x2d0>)
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	4914      	ldr	r1, [pc, #80]	; (8002fbc <HAL_GPIO_Init+0x2d0>)
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d021      	beq.n	8002fc0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f7c:	4b0f      	ldr	r3, [pc, #60]	; (8002fbc <HAL_GPIO_Init+0x2d0>)
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	490e      	ldr	r1, [pc, #56]	; (8002fbc <HAL_GPIO_Init+0x2d0>)
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	60cb      	str	r3, [r1, #12]
 8002f88:	e021      	b.n	8002fce <HAL_GPIO_Init+0x2e2>
 8002f8a:	bf00      	nop
 8002f8c:	10320000 	.word	0x10320000
 8002f90:	10310000 	.word	0x10310000
 8002f94:	10220000 	.word	0x10220000
 8002f98:	10210000 	.word	0x10210000
 8002f9c:	10120000 	.word	0x10120000
 8002fa0:	10110000 	.word	0x10110000
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	40010000 	.word	0x40010000
 8002fac:	40010800 	.word	0x40010800
 8002fb0:	40010c00 	.word	0x40010c00
 8002fb4:	40011000 	.word	0x40011000
 8002fb8:	40011400 	.word	0x40011400
 8002fbc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002fc0:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <HAL_GPIO_Init+0x304>)
 8002fc2:	68da      	ldr	r2, [r3, #12]
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	4909      	ldr	r1, [pc, #36]	; (8002ff0 <HAL_GPIO_Init+0x304>)
 8002fca:	4013      	ands	r3, r2
 8002fcc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	fa22 f303 	lsr.w	r3, r2, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f47f ae8e 	bne.w	8002d00 <HAL_GPIO_Init+0x14>
  }
}
 8002fe4:	bf00      	nop
 8002fe6:	bf00      	nop
 8002fe8:	372c      	adds	r7, #44	; 0x2c
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc80      	pop	{r7}
 8002fee:	4770      	bx	lr
 8002ff0:	40010400 	.word	0x40010400

08002ff4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	887b      	ldrh	r3, [r7, #2]
 8003006:	4013      	ands	r3, r2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d002      	beq.n	8003012 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800300c:	2301      	movs	r3, #1
 800300e:	73fb      	strb	r3, [r7, #15]
 8003010:	e001      	b.n	8003016 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003012:	2300      	movs	r3, #0
 8003014:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003016:	7bfb      	ldrb	r3, [r7, #15]
}
 8003018:	4618      	mov	r0, r3
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	bc80      	pop	{r7}
 8003020:	4770      	bx	lr

08003022 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003022:	b480      	push	{r7}
 8003024:	b083      	sub	sp, #12
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	460b      	mov	r3, r1
 800302c:	807b      	strh	r3, [r7, #2]
 800302e:	4613      	mov	r3, r2
 8003030:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003032:	787b      	ldrb	r3, [r7, #1]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003038:	887a      	ldrh	r2, [r7, #2]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800303e:	e003      	b.n	8003048 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003040:	887b      	ldrh	r3, [r7, #2]
 8003042:	041a      	lsls	r2, r3, #16
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	611a      	str	r2, [r3, #16]
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr

08003052 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003052:	b480      	push	{r7}
 8003054:	b085      	sub	sp, #20
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
 800305a:	460b      	mov	r3, r1
 800305c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003064:	887a      	ldrh	r2, [r7, #2]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	4013      	ands	r3, r2
 800306a:	041a      	lsls	r2, r3, #16
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	43d9      	mvns	r1, r3
 8003070:	887b      	ldrh	r3, [r7, #2]
 8003072:	400b      	ands	r3, r1
 8003074:	431a      	orrs	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	611a      	str	r2, [r3, #16]
}
 800307a:	bf00      	nop
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr

08003084 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e12b      	b.n	80032ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d106      	bne.n	80030b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7fe fb06 	bl	80016bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2224      	movs	r2, #36	; 0x24
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0201 	bic.w	r2, r2, #1
 80030c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030e8:	f000 fffa 	bl	80040e0 <HAL_RCC_GetPCLK1Freq>
 80030ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	4a81      	ldr	r2, [pc, #516]	; (80032f8 <HAL_I2C_Init+0x274>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d807      	bhi.n	8003108 <HAL_I2C_Init+0x84>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4a80      	ldr	r2, [pc, #512]	; (80032fc <HAL_I2C_Init+0x278>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	bf94      	ite	ls
 8003100:	2301      	movls	r3, #1
 8003102:	2300      	movhi	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	e006      	b.n	8003116 <HAL_I2C_Init+0x92>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4a7d      	ldr	r2, [pc, #500]	; (8003300 <HAL_I2C_Init+0x27c>)
 800310c:	4293      	cmp	r3, r2
 800310e:	bf94      	ite	ls
 8003110:	2301      	movls	r3, #1
 8003112:	2300      	movhi	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e0e7      	b.n	80032ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	4a78      	ldr	r2, [pc, #480]	; (8003304 <HAL_I2C_Init+0x280>)
 8003122:	fba2 2303 	umull	r2, r3, r2, r3
 8003126:	0c9b      	lsrs	r3, r3, #18
 8003128:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	430a      	orrs	r2, r1
 800313c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	4a6a      	ldr	r2, [pc, #424]	; (80032f8 <HAL_I2C_Init+0x274>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d802      	bhi.n	8003158 <HAL_I2C_Init+0xd4>
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	3301      	adds	r3, #1
 8003156:	e009      	b.n	800316c <HAL_I2C_Init+0xe8>
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800315e:	fb02 f303 	mul.w	r3, r2, r3
 8003162:	4a69      	ldr	r2, [pc, #420]	; (8003308 <HAL_I2C_Init+0x284>)
 8003164:	fba2 2303 	umull	r2, r3, r2, r3
 8003168:	099b      	lsrs	r3, r3, #6
 800316a:	3301      	adds	r3, #1
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6812      	ldr	r2, [r2, #0]
 8003170:	430b      	orrs	r3, r1
 8003172:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800317e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	495c      	ldr	r1, [pc, #368]	; (80032f8 <HAL_I2C_Init+0x274>)
 8003188:	428b      	cmp	r3, r1
 800318a:	d819      	bhi.n	80031c0 <HAL_I2C_Init+0x13c>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	1e59      	subs	r1, r3, #1
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	fbb1 f3f3 	udiv	r3, r1, r3
 800319a:	1c59      	adds	r1, r3, #1
 800319c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031a0:	400b      	ands	r3, r1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <HAL_I2C_Init+0x138>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	1e59      	subs	r1, r3, #1
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80031b4:	3301      	adds	r3, #1
 80031b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ba:	e051      	b.n	8003260 <HAL_I2C_Init+0x1dc>
 80031bc:	2304      	movs	r3, #4
 80031be:	e04f      	b.n	8003260 <HAL_I2C_Init+0x1dc>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d111      	bne.n	80031ec <HAL_I2C_Init+0x168>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	1e58      	subs	r0, r3, #1
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6859      	ldr	r1, [r3, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	440b      	add	r3, r1
 80031d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031da:	3301      	adds	r3, #1
 80031dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	bf0c      	ite	eq
 80031e4:	2301      	moveq	r3, #1
 80031e6:	2300      	movne	r3, #0
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	e012      	b.n	8003212 <HAL_I2C_Init+0x18e>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	1e58      	subs	r0, r3, #1
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6859      	ldr	r1, [r3, #4]
 80031f4:	460b      	mov	r3, r1
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	0099      	lsls	r1, r3, #2
 80031fc:	440b      	add	r3, r1
 80031fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003202:	3301      	adds	r3, #1
 8003204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003208:	2b00      	cmp	r3, #0
 800320a:	bf0c      	ite	eq
 800320c:	2301      	moveq	r3, #1
 800320e:	2300      	movne	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <HAL_I2C_Init+0x196>
 8003216:	2301      	movs	r3, #1
 8003218:	e022      	b.n	8003260 <HAL_I2C_Init+0x1dc>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10e      	bne.n	8003240 <HAL_I2C_Init+0x1bc>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	1e58      	subs	r0, r3, #1
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6859      	ldr	r1, [r3, #4]
 800322a:	460b      	mov	r3, r1
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	440b      	add	r3, r1
 8003230:	fbb0 f3f3 	udiv	r3, r0, r3
 8003234:	3301      	adds	r3, #1
 8003236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800323a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800323e:	e00f      	b.n	8003260 <HAL_I2C_Init+0x1dc>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	1e58      	subs	r0, r3, #1
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6859      	ldr	r1, [r3, #4]
 8003248:	460b      	mov	r3, r1
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	0099      	lsls	r1, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	fbb0 f3f3 	udiv	r3, r0, r3
 8003256:	3301      	adds	r3, #1
 8003258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800325c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	6809      	ldr	r1, [r1, #0]
 8003264:	4313      	orrs	r3, r2
 8003266:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69da      	ldr	r2, [r3, #28]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	430a      	orrs	r2, r1
 8003282:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800328e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6911      	ldr	r1, [r2, #16]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	68d2      	ldr	r2, [r2, #12]
 800329a:	4311      	orrs	r1, r2
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6812      	ldr	r2, [r2, #0]
 80032a0:	430b      	orrs	r3, r1
 80032a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	695a      	ldr	r2, [r3, #20]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0201 	orr.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2220      	movs	r2, #32
 80032da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	000186a0 	.word	0x000186a0
 80032fc:	001e847f 	.word	0x001e847f
 8003300:	003d08ff 	.word	0x003d08ff
 8003304:	431bde83 	.word	0x431bde83
 8003308:	10624dd3 	.word	0x10624dd3

0800330c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b088      	sub	sp, #32
 8003310:	af02      	add	r7, sp, #8
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	4608      	mov	r0, r1
 8003316:	4611      	mov	r1, r2
 8003318:	461a      	mov	r2, r3
 800331a:	4603      	mov	r3, r0
 800331c:	817b      	strh	r3, [r7, #10]
 800331e:	460b      	mov	r3, r1
 8003320:	813b      	strh	r3, [r7, #8]
 8003322:	4613      	mov	r3, r2
 8003324:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003326:	f7fe fc85 	bl	8001c34 <HAL_GetTick>
 800332a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b20      	cmp	r3, #32
 8003336:	f040 80d9 	bne.w	80034ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	2319      	movs	r3, #25
 8003340:	2201      	movs	r2, #1
 8003342:	496d      	ldr	r1, [pc, #436]	; (80034f8 <HAL_I2C_Mem_Write+0x1ec>)
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 f971 	bl	800362c <I2C_WaitOnFlagUntilTimeout>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003350:	2302      	movs	r3, #2
 8003352:	e0cc      	b.n	80034ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800335a:	2b01      	cmp	r3, #1
 800335c:	d101      	bne.n	8003362 <HAL_I2C_Mem_Write+0x56>
 800335e:	2302      	movs	r3, #2
 8003360:	e0c5      	b.n	80034ee <HAL_I2C_Mem_Write+0x1e2>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b01      	cmp	r3, #1
 8003376:	d007      	beq.n	8003388 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0201 	orr.w	r2, r2, #1
 8003386:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003396:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2221      	movs	r2, #33	; 0x21
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2240      	movs	r2, #64	; 0x40
 80033a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6a3a      	ldr	r2, [r7, #32]
 80033b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80033b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4a4d      	ldr	r2, [pc, #308]	; (80034fc <HAL_I2C_Mem_Write+0x1f0>)
 80033c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033ca:	88f8      	ldrh	r0, [r7, #6]
 80033cc:	893a      	ldrh	r2, [r7, #8]
 80033ce:	8979      	ldrh	r1, [r7, #10]
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	9301      	str	r3, [sp, #4]
 80033d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	4603      	mov	r3, r0
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 f890 	bl	8003500 <I2C_RequestMemoryWrite>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d052      	beq.n	800348c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e081      	b.n	80034ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f000 f9f2 	bl	80037d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00d      	beq.n	8003416 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d107      	bne.n	8003412 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003410:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e06b      	b.n	80034ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	781a      	ldrb	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	1c5a      	adds	r2, r3, #1
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003430:	3b01      	subs	r3, #1
 8003432:	b29a      	uxth	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800343c:	b29b      	uxth	r3, r3
 800343e:	3b01      	subs	r3, #1
 8003440:	b29a      	uxth	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b04      	cmp	r3, #4
 8003452:	d11b      	bne.n	800348c <HAL_I2C_Mem_Write+0x180>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003458:	2b00      	cmp	r3, #0
 800345a:	d017      	beq.n	800348c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003460:	781a      	ldrb	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003476:	3b01      	subs	r3, #1
 8003478:	b29a      	uxth	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003482:	b29b      	uxth	r3, r3
 8003484:	3b01      	subs	r3, #1
 8003486:	b29a      	uxth	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1aa      	bne.n	80033ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 f9de 	bl	800385a <I2C_WaitOnBTFFlagUntilTimeout>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00d      	beq.n	80034c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a8:	2b04      	cmp	r3, #4
 80034aa:	d107      	bne.n	80034bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e016      	b.n	80034ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034e8:	2300      	movs	r3, #0
 80034ea:	e000      	b.n	80034ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80034ec:	2302      	movs	r3, #2
  }
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	00100002 	.word	0x00100002
 80034fc:	ffff0000 	.word	0xffff0000

08003500 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b088      	sub	sp, #32
 8003504:	af02      	add	r7, sp, #8
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	4608      	mov	r0, r1
 800350a:	4611      	mov	r1, r2
 800350c:	461a      	mov	r2, r3
 800350e:	4603      	mov	r3, r0
 8003510:	817b      	strh	r3, [r7, #10]
 8003512:	460b      	mov	r3, r1
 8003514:	813b      	strh	r3, [r7, #8]
 8003516:	4613      	mov	r3, r2
 8003518:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003528:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	2200      	movs	r2, #0
 8003532:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f000 f878 	bl	800362c <I2C_WaitOnFlagUntilTimeout>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00d      	beq.n	800355e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003550:	d103      	bne.n	800355a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003558:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e05f      	b.n	800361e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800355e:	897b      	ldrh	r3, [r7, #10]
 8003560:	b2db      	uxtb	r3, r3
 8003562:	461a      	mov	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800356c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	6a3a      	ldr	r2, [r7, #32]
 8003572:	492d      	ldr	r1, [pc, #180]	; (8003628 <I2C_RequestMemoryWrite+0x128>)
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f000 f8b0 	bl	80036da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e04c      	b.n	800361e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003584:	2300      	movs	r3, #0
 8003586:	617b      	str	r3, [r7, #20]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	617b      	str	r3, [r7, #20]
 8003598:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800359a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800359c:	6a39      	ldr	r1, [r7, #32]
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 f91a 	bl	80037d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00d      	beq.n	80035c6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d107      	bne.n	80035c2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e02b      	b.n	800361e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035c6:	88fb      	ldrh	r3, [r7, #6]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d105      	bne.n	80035d8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035cc:	893b      	ldrh	r3, [r7, #8]
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	611a      	str	r2, [r3, #16]
 80035d6:	e021      	b.n	800361c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035d8:	893b      	ldrh	r3, [r7, #8]
 80035da:	0a1b      	lsrs	r3, r3, #8
 80035dc:	b29b      	uxth	r3, r3
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e8:	6a39      	ldr	r1, [r7, #32]
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 f8f4 	bl	80037d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00d      	beq.n	8003612 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d107      	bne.n	800360e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800360c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e005      	b.n	800361e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003612:	893b      	ldrh	r3, [r7, #8]
 8003614:	b2da      	uxtb	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3718      	adds	r7, #24
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	00010002 	.word	0x00010002

0800362c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	603b      	str	r3, [r7, #0]
 8003638:	4613      	mov	r3, r2
 800363a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800363c:	e025      	b.n	800368a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003644:	d021      	beq.n	800368a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003646:	f7fe faf5 	bl	8001c34 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d302      	bcc.n	800365c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d116      	bne.n	800368a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2220      	movs	r2, #32
 8003666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	f043 0220 	orr.w	r2, r3, #32
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e023      	b.n	80036d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	0c1b      	lsrs	r3, r3, #16
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b01      	cmp	r3, #1
 8003692:	d10d      	bne.n	80036b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	43da      	mvns	r2, r3
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	4013      	ands	r3, r2
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	bf0c      	ite	eq
 80036a6:	2301      	moveq	r3, #1
 80036a8:	2300      	movne	r3, #0
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	461a      	mov	r2, r3
 80036ae:	e00c      	b.n	80036ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	43da      	mvns	r2, r3
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	4013      	ands	r3, r2
 80036bc:	b29b      	uxth	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	bf0c      	ite	eq
 80036c2:	2301      	moveq	r3, #1
 80036c4:	2300      	movne	r3, #0
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	461a      	mov	r2, r3
 80036ca:	79fb      	ldrb	r3, [r7, #7]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d0b6      	beq.n	800363e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b084      	sub	sp, #16
 80036de:	af00      	add	r7, sp, #0
 80036e0:	60f8      	str	r0, [r7, #12]
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	607a      	str	r2, [r7, #4]
 80036e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036e8:	e051      	b.n	800378e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036f8:	d123      	bne.n	8003742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003708:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003712:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2220      	movs	r2, #32
 800371e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	f043 0204 	orr.w	r2, r3, #4
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e046      	b.n	80037d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003748:	d021      	beq.n	800378e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800374a:	f7fe fa73 	bl	8001c34 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	429a      	cmp	r2, r3
 8003758:	d302      	bcc.n	8003760 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d116      	bne.n	800378e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2220      	movs	r2, #32
 800376a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	f043 0220 	orr.w	r2, r3, #32
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e020      	b.n	80037d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	0c1b      	lsrs	r3, r3, #16
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b01      	cmp	r3, #1
 8003796:	d10c      	bne.n	80037b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	43da      	mvns	r2, r3
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	4013      	ands	r3, r2
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	bf14      	ite	ne
 80037aa:	2301      	movne	r3, #1
 80037ac:	2300      	moveq	r3, #0
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	e00b      	b.n	80037ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	43da      	mvns	r2, r3
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	4013      	ands	r3, r2
 80037be:	b29b      	uxth	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	bf14      	ite	ne
 80037c4:	2301      	movne	r3, #1
 80037c6:	2300      	moveq	r3, #0
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d18d      	bne.n	80036ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037e4:	e02d      	b.n	8003842 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 f878 	bl	80038dc <I2C_IsAcknowledgeFailed>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e02d      	b.n	8003852 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fc:	d021      	beq.n	8003842 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037fe:	f7fe fa19 	bl	8001c34 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	429a      	cmp	r2, r3
 800380c:	d302      	bcc.n	8003814 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d116      	bne.n	8003842 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2220      	movs	r2, #32
 800381e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	f043 0220 	orr.w	r2, r3, #32
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e007      	b.n	8003852 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384c:	2b80      	cmp	r3, #128	; 0x80
 800384e:	d1ca      	bne.n	80037e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b084      	sub	sp, #16
 800385e:	af00      	add	r7, sp, #0
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	60b9      	str	r1, [r7, #8]
 8003864:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003866:	e02d      	b.n	80038c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 f837 	bl	80038dc <I2C_IsAcknowledgeFailed>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e02d      	b.n	80038d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800387e:	d021      	beq.n	80038c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003880:	f7fe f9d8 	bl	8001c34 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	429a      	cmp	r2, r3
 800388e:	d302      	bcc.n	8003896 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d116      	bne.n	80038c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	f043 0220 	orr.w	r2, r3, #32
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e007      	b.n	80038d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	f003 0304 	and.w	r3, r3, #4
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	d1ca      	bne.n	8003868 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038f2:	d11b      	bne.n	800392c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003918:	f043 0204 	orr.w	r2, r3, #4
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e000      	b.n	800392e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr

08003938 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e26c      	b.n	8003e24 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 8087 	beq.w	8003a66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003958:	4b92      	ldr	r3, [pc, #584]	; (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f003 030c 	and.w	r3, r3, #12
 8003960:	2b04      	cmp	r3, #4
 8003962:	d00c      	beq.n	800397e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003964:	4b8f      	ldr	r3, [pc, #572]	; (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f003 030c 	and.w	r3, r3, #12
 800396c:	2b08      	cmp	r3, #8
 800396e:	d112      	bne.n	8003996 <HAL_RCC_OscConfig+0x5e>
 8003970:	4b8c      	ldr	r3, [pc, #560]	; (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800397c:	d10b      	bne.n	8003996 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800397e:	4b89      	ldr	r3, [pc, #548]	; (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d06c      	beq.n	8003a64 <HAL_RCC_OscConfig+0x12c>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d168      	bne.n	8003a64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e246      	b.n	8003e24 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800399e:	d106      	bne.n	80039ae <HAL_RCC_OscConfig+0x76>
 80039a0:	4b80      	ldr	r3, [pc, #512]	; (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a7f      	ldr	r2, [pc, #508]	; (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 80039a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039aa:	6013      	str	r3, [r2, #0]
 80039ac:	e02e      	b.n	8003a0c <HAL_RCC_OscConfig+0xd4>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10c      	bne.n	80039d0 <HAL_RCC_OscConfig+0x98>
 80039b6:	4b7b      	ldr	r3, [pc, #492]	; (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a7a      	ldr	r2, [pc, #488]	; (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 80039bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039c0:	6013      	str	r3, [r2, #0]
 80039c2:	4b78      	ldr	r3, [pc, #480]	; (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a77      	ldr	r2, [pc, #476]	; (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 80039c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	e01d      	b.n	8003a0c <HAL_RCC_OscConfig+0xd4>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039d8:	d10c      	bne.n	80039f4 <HAL_RCC_OscConfig+0xbc>
 80039da:	4b72      	ldr	r3, [pc, #456]	; (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a71      	ldr	r2, [pc, #452]	; (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 80039e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	4b6f      	ldr	r3, [pc, #444]	; (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a6e      	ldr	r2, [pc, #440]	; (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 80039ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	e00b      	b.n	8003a0c <HAL_RCC_OscConfig+0xd4>
 80039f4:	4b6b      	ldr	r3, [pc, #428]	; (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a6a      	ldr	r2, [pc, #424]	; (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 80039fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039fe:	6013      	str	r3, [r2, #0]
 8003a00:	4b68      	ldr	r3, [pc, #416]	; (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a67      	ldr	r2, [pc, #412]	; (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 8003a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d013      	beq.n	8003a3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a14:	f7fe f90e 	bl	8001c34 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a1c:	f7fe f90a 	bl	8001c34 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b64      	cmp	r3, #100	; 0x64
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e1fa      	b.n	8003e24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a2e:	4b5d      	ldr	r3, [pc, #372]	; (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0f0      	beq.n	8003a1c <HAL_RCC_OscConfig+0xe4>
 8003a3a:	e014      	b.n	8003a66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3c:	f7fe f8fa 	bl	8001c34 <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a44:	f7fe f8f6 	bl	8001c34 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b64      	cmp	r3, #100	; 0x64
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e1e6      	b.n	8003e24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a56:	4b53      	ldr	r3, [pc, #332]	; (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1f0      	bne.n	8003a44 <HAL_RCC_OscConfig+0x10c>
 8003a62:	e000      	b.n	8003a66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d063      	beq.n	8003b3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a72:	4b4c      	ldr	r3, [pc, #304]	; (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f003 030c 	and.w	r3, r3, #12
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00b      	beq.n	8003a96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a7e:	4b49      	ldr	r3, [pc, #292]	; (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f003 030c 	and.w	r3, r3, #12
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d11c      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x18c>
 8003a8a:	4b46      	ldr	r3, [pc, #280]	; (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d116      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a96:	4b43      	ldr	r3, [pc, #268]	; (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d005      	beq.n	8003aae <HAL_RCC_OscConfig+0x176>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d001      	beq.n	8003aae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e1ba      	b.n	8003e24 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aae:	4b3d      	ldr	r3, [pc, #244]	; (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	4939      	ldr	r1, [pc, #228]	; (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ac2:	e03a      	b.n	8003b3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d020      	beq.n	8003b0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003acc:	4b36      	ldr	r3, [pc, #216]	; (8003ba8 <HAL_RCC_OscConfig+0x270>)
 8003ace:	2201      	movs	r2, #1
 8003ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad2:	f7fe f8af 	bl	8001c34 <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad8:	e008      	b.n	8003aec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ada:	f7fe f8ab 	bl	8001c34 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e19b      	b.n	8003e24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aec:	4b2d      	ldr	r3, [pc, #180]	; (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0f0      	beq.n	8003ada <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af8:	4b2a      	ldr	r3, [pc, #168]	; (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	4927      	ldr	r1, [pc, #156]	; (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	600b      	str	r3, [r1, #0]
 8003b0c:	e015      	b.n	8003b3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b0e:	4b26      	ldr	r3, [pc, #152]	; (8003ba8 <HAL_RCC_OscConfig+0x270>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b14:	f7fe f88e 	bl	8001c34 <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b1c:	f7fe f88a 	bl	8001c34 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e17a      	b.n	8003e24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b2e:	4b1d      	ldr	r3, [pc, #116]	; (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1f0      	bne.n	8003b1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d03a      	beq.n	8003bbc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d019      	beq.n	8003b82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b4e:	4b17      	ldr	r3, [pc, #92]	; (8003bac <HAL_RCC_OscConfig+0x274>)
 8003b50:	2201      	movs	r2, #1
 8003b52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b54:	f7fe f86e 	bl	8001c34 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b5c:	f7fe f86a 	bl	8001c34 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e15a      	b.n	8003e24 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b6e:	4b0d      	ldr	r3, [pc, #52]	; (8003ba4 <HAL_RCC_OscConfig+0x26c>)
 8003b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0f0      	beq.n	8003b5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b7a:	2001      	movs	r0, #1
 8003b7c:	f000 fad8 	bl	8004130 <RCC_Delay>
 8003b80:	e01c      	b.n	8003bbc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b82:	4b0a      	ldr	r3, [pc, #40]	; (8003bac <HAL_RCC_OscConfig+0x274>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b88:	f7fe f854 	bl	8001c34 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b8e:	e00f      	b.n	8003bb0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b90:	f7fe f850 	bl	8001c34 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d908      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e140      	b.n	8003e24 <HAL_RCC_OscConfig+0x4ec>
 8003ba2:	bf00      	nop
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	42420000 	.word	0x42420000
 8003bac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb0:	4b9e      	ldr	r3, [pc, #632]	; (8003e2c <HAL_RCC_OscConfig+0x4f4>)
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1e9      	bne.n	8003b90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f000 80a6 	beq.w	8003d16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bce:	4b97      	ldr	r3, [pc, #604]	; (8003e2c <HAL_RCC_OscConfig+0x4f4>)
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10d      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bda:	4b94      	ldr	r3, [pc, #592]	; (8003e2c <HAL_RCC_OscConfig+0x4f4>)
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	4a93      	ldr	r2, [pc, #588]	; (8003e2c <HAL_RCC_OscConfig+0x4f4>)
 8003be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be4:	61d3      	str	r3, [r2, #28]
 8003be6:	4b91      	ldr	r3, [pc, #580]	; (8003e2c <HAL_RCC_OscConfig+0x4f4>)
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bee:	60bb      	str	r3, [r7, #8]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf6:	4b8e      	ldr	r3, [pc, #568]	; (8003e30 <HAL_RCC_OscConfig+0x4f8>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d118      	bne.n	8003c34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c02:	4b8b      	ldr	r3, [pc, #556]	; (8003e30 <HAL_RCC_OscConfig+0x4f8>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a8a      	ldr	r2, [pc, #552]	; (8003e30 <HAL_RCC_OscConfig+0x4f8>)
 8003c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c0e:	f7fe f811 	bl	8001c34 <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c14:	e008      	b.n	8003c28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c16:	f7fe f80d 	bl	8001c34 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b64      	cmp	r3, #100	; 0x64
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e0fd      	b.n	8003e24 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c28:	4b81      	ldr	r3, [pc, #516]	; (8003e30 <HAL_RCC_OscConfig+0x4f8>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0f0      	beq.n	8003c16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d106      	bne.n	8003c4a <HAL_RCC_OscConfig+0x312>
 8003c3c:	4b7b      	ldr	r3, [pc, #492]	; (8003e2c <HAL_RCC_OscConfig+0x4f4>)
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	4a7a      	ldr	r2, [pc, #488]	; (8003e2c <HAL_RCC_OscConfig+0x4f4>)
 8003c42:	f043 0301 	orr.w	r3, r3, #1
 8003c46:	6213      	str	r3, [r2, #32]
 8003c48:	e02d      	b.n	8003ca6 <HAL_RCC_OscConfig+0x36e>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10c      	bne.n	8003c6c <HAL_RCC_OscConfig+0x334>
 8003c52:	4b76      	ldr	r3, [pc, #472]	; (8003e2c <HAL_RCC_OscConfig+0x4f4>)
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	4a75      	ldr	r2, [pc, #468]	; (8003e2c <HAL_RCC_OscConfig+0x4f4>)
 8003c58:	f023 0301 	bic.w	r3, r3, #1
 8003c5c:	6213      	str	r3, [r2, #32]
 8003c5e:	4b73      	ldr	r3, [pc, #460]	; (8003e2c <HAL_RCC_OscConfig+0x4f4>)
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	4a72      	ldr	r2, [pc, #456]	; (8003e2c <HAL_RCC_OscConfig+0x4f4>)
 8003c64:	f023 0304 	bic.w	r3, r3, #4
 8003c68:	6213      	str	r3, [r2, #32]
 8003c6a:	e01c      	b.n	8003ca6 <HAL_RCC_OscConfig+0x36e>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	2b05      	cmp	r3, #5
 8003c72:	d10c      	bne.n	8003c8e <HAL_RCC_OscConfig+0x356>
 8003c74:	4b6d      	ldr	r3, [pc, #436]	; (8003e2c <HAL_RCC_OscConfig+0x4f4>)
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	4a6c      	ldr	r2, [pc, #432]	; (8003e2c <HAL_RCC_OscConfig+0x4f4>)
 8003c7a:	f043 0304 	orr.w	r3, r3, #4
 8003c7e:	6213      	str	r3, [r2, #32]
 8003c80:	4b6a      	ldr	r3, [pc, #424]	; (8003e2c <HAL_RCC_OscConfig+0x4f4>)
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	4a69      	ldr	r2, [pc, #420]	; (8003e2c <HAL_RCC_OscConfig+0x4f4>)
 8003c86:	f043 0301 	orr.w	r3, r3, #1
 8003c8a:	6213      	str	r3, [r2, #32]
 8003c8c:	e00b      	b.n	8003ca6 <HAL_RCC_OscConfig+0x36e>
 8003c8e:	4b67      	ldr	r3, [pc, #412]	; (8003e2c <HAL_RCC_OscConfig+0x4f4>)
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	4a66      	ldr	r2, [pc, #408]	; (8003e2c <HAL_RCC_OscConfig+0x4f4>)
 8003c94:	f023 0301 	bic.w	r3, r3, #1
 8003c98:	6213      	str	r3, [r2, #32]
 8003c9a:	4b64      	ldr	r3, [pc, #400]	; (8003e2c <HAL_RCC_OscConfig+0x4f4>)
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	4a63      	ldr	r2, [pc, #396]	; (8003e2c <HAL_RCC_OscConfig+0x4f4>)
 8003ca0:	f023 0304 	bic.w	r3, r3, #4
 8003ca4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d015      	beq.n	8003cda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cae:	f7fd ffc1 	bl	8001c34 <HAL_GetTick>
 8003cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb4:	e00a      	b.n	8003ccc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cb6:	f7fd ffbd 	bl	8001c34 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e0ab      	b.n	8003e24 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ccc:	4b57      	ldr	r3, [pc, #348]	; (8003e2c <HAL_RCC_OscConfig+0x4f4>)
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0ee      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x37e>
 8003cd8:	e014      	b.n	8003d04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cda:	f7fd ffab 	bl	8001c34 <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ce0:	e00a      	b.n	8003cf8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ce2:	f7fd ffa7 	bl	8001c34 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e095      	b.n	8003e24 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cf8:	4b4c      	ldr	r3, [pc, #304]	; (8003e2c <HAL_RCC_OscConfig+0x4f4>)
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1ee      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d04:	7dfb      	ldrb	r3, [r7, #23]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d105      	bne.n	8003d16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d0a:	4b48      	ldr	r3, [pc, #288]	; (8003e2c <HAL_RCC_OscConfig+0x4f4>)
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	4a47      	ldr	r2, [pc, #284]	; (8003e2c <HAL_RCC_OscConfig+0x4f4>)
 8003d10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 8081 	beq.w	8003e22 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d20:	4b42      	ldr	r3, [pc, #264]	; (8003e2c <HAL_RCC_OscConfig+0x4f4>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f003 030c 	and.w	r3, r3, #12
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d061      	beq.n	8003df0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d146      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d34:	4b3f      	ldr	r3, [pc, #252]	; (8003e34 <HAL_RCC_OscConfig+0x4fc>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3a:	f7fd ff7b 	bl	8001c34 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d42:	f7fd ff77 	bl	8001c34 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e067      	b.n	8003e24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d54:	4b35      	ldr	r3, [pc, #212]	; (8003e2c <HAL_RCC_OscConfig+0x4f4>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1f0      	bne.n	8003d42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d68:	d108      	bne.n	8003d7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d6a:	4b30      	ldr	r3, [pc, #192]	; (8003e2c <HAL_RCC_OscConfig+0x4f4>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	492d      	ldr	r1, [pc, #180]	; (8003e2c <HAL_RCC_OscConfig+0x4f4>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d7c:	4b2b      	ldr	r3, [pc, #172]	; (8003e2c <HAL_RCC_OscConfig+0x4f4>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a19      	ldr	r1, [r3, #32]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	430b      	orrs	r3, r1
 8003d8e:	4927      	ldr	r1, [pc, #156]	; (8003e2c <HAL_RCC_OscConfig+0x4f4>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d94:	4b27      	ldr	r3, [pc, #156]	; (8003e34 <HAL_RCC_OscConfig+0x4fc>)
 8003d96:	2201      	movs	r2, #1
 8003d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9a:	f7fd ff4b 	bl	8001c34 <HAL_GetTick>
 8003d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003da0:	e008      	b.n	8003db4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003da2:	f7fd ff47 	bl	8001c34 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e037      	b.n	8003e24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003db4:	4b1d      	ldr	r3, [pc, #116]	; (8003e2c <HAL_RCC_OscConfig+0x4f4>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d0f0      	beq.n	8003da2 <HAL_RCC_OscConfig+0x46a>
 8003dc0:	e02f      	b.n	8003e22 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dc2:	4b1c      	ldr	r3, [pc, #112]	; (8003e34 <HAL_RCC_OscConfig+0x4fc>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc8:	f7fd ff34 	bl	8001c34 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd0:	f7fd ff30 	bl	8001c34 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e020      	b.n	8003e24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003de2:	4b12      	ldr	r3, [pc, #72]	; (8003e2c <HAL_RCC_OscConfig+0x4f4>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f0      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x498>
 8003dee:	e018      	b.n	8003e22 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d101      	bne.n	8003dfc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e013      	b.n	8003e24 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <HAL_RCC_OscConfig+0x4f4>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d106      	bne.n	8003e1e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d001      	beq.n	8003e22 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e000      	b.n	8003e24 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3718      	adds	r7, #24
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	40007000 	.word	0x40007000
 8003e34:	42420060 	.word	0x42420060

08003e38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d101      	bne.n	8003e4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e0d0      	b.n	8003fee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e4c:	4b6a      	ldr	r3, [pc, #424]	; (8003ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0307 	and.w	r3, r3, #7
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d910      	bls.n	8003e7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e5a:	4b67      	ldr	r3, [pc, #412]	; (8003ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f023 0207 	bic.w	r2, r3, #7
 8003e62:	4965      	ldr	r1, [pc, #404]	; (8003ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e6a:	4b63      	ldr	r3, [pc, #396]	; (8003ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d001      	beq.n	8003e7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e0b8      	b.n	8003fee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d020      	beq.n	8003eca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d005      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e94:	4b59      	ldr	r3, [pc, #356]	; (8003ffc <HAL_RCC_ClockConfig+0x1c4>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	4a58      	ldr	r2, [pc, #352]	; (8003ffc <HAL_RCC_ClockConfig+0x1c4>)
 8003e9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0308 	and.w	r3, r3, #8
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d005      	beq.n	8003eb8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003eac:	4b53      	ldr	r3, [pc, #332]	; (8003ffc <HAL_RCC_ClockConfig+0x1c4>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	4a52      	ldr	r2, [pc, #328]	; (8003ffc <HAL_RCC_ClockConfig+0x1c4>)
 8003eb2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003eb6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eb8:	4b50      	ldr	r3, [pc, #320]	; (8003ffc <HAL_RCC_ClockConfig+0x1c4>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	494d      	ldr	r1, [pc, #308]	; (8003ffc <HAL_RCC_ClockConfig+0x1c4>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d040      	beq.n	8003f58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d107      	bne.n	8003eee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ede:	4b47      	ldr	r3, [pc, #284]	; (8003ffc <HAL_RCC_ClockConfig+0x1c4>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d115      	bne.n	8003f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e07f      	b.n	8003fee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d107      	bne.n	8003f06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ef6:	4b41      	ldr	r3, [pc, #260]	; (8003ffc <HAL_RCC_ClockConfig+0x1c4>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d109      	bne.n	8003f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e073      	b.n	8003fee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f06:	4b3d      	ldr	r3, [pc, #244]	; (8003ffc <HAL_RCC_ClockConfig+0x1c4>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e06b      	b.n	8003fee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f16:	4b39      	ldr	r3, [pc, #228]	; (8003ffc <HAL_RCC_ClockConfig+0x1c4>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f023 0203 	bic.w	r2, r3, #3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	4936      	ldr	r1, [pc, #216]	; (8003ffc <HAL_RCC_ClockConfig+0x1c4>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f28:	f7fd fe84 	bl	8001c34 <HAL_GetTick>
 8003f2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f2e:	e00a      	b.n	8003f46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f30:	f7fd fe80 	bl	8001c34 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e053      	b.n	8003fee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f46:	4b2d      	ldr	r3, [pc, #180]	; (8003ffc <HAL_RCC_ClockConfig+0x1c4>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f003 020c 	and.w	r2, r3, #12
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d1eb      	bne.n	8003f30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f58:	4b27      	ldr	r3, [pc, #156]	; (8003ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d210      	bcs.n	8003f88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f66:	4b24      	ldr	r3, [pc, #144]	; (8003ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f023 0207 	bic.w	r2, r3, #7
 8003f6e:	4922      	ldr	r1, [pc, #136]	; (8003ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f76:	4b20      	ldr	r3, [pc, #128]	; (8003ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d001      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e032      	b.n	8003fee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0304 	and.w	r3, r3, #4
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d008      	beq.n	8003fa6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f94:	4b19      	ldr	r3, [pc, #100]	; (8003ffc <HAL_RCC_ClockConfig+0x1c4>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	4916      	ldr	r1, [pc, #88]	; (8003ffc <HAL_RCC_ClockConfig+0x1c4>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0308 	and.w	r3, r3, #8
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d009      	beq.n	8003fc6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003fb2:	4b12      	ldr	r3, [pc, #72]	; (8003ffc <HAL_RCC_ClockConfig+0x1c4>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	490e      	ldr	r1, [pc, #56]	; (8003ffc <HAL_RCC_ClockConfig+0x1c4>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fc6:	f000 f821 	bl	800400c <HAL_RCC_GetSysClockFreq>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <HAL_RCC_ClockConfig+0x1c4>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	091b      	lsrs	r3, r3, #4
 8003fd2:	f003 030f 	and.w	r3, r3, #15
 8003fd6:	490a      	ldr	r1, [pc, #40]	; (8004000 <HAL_RCC_ClockConfig+0x1c8>)
 8003fd8:	5ccb      	ldrb	r3, [r1, r3]
 8003fda:	fa22 f303 	lsr.w	r3, r2, r3
 8003fde:	4a09      	ldr	r2, [pc, #36]	; (8004004 <HAL_RCC_ClockConfig+0x1cc>)
 8003fe0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003fe2:	4b09      	ldr	r3, [pc, #36]	; (8004008 <HAL_RCC_ClockConfig+0x1d0>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fd fde2 	bl	8001bb0 <HAL_InitTick>

  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	40022000 	.word	0x40022000
 8003ffc:	40021000 	.word	0x40021000
 8004000:	08007e6c 	.word	0x08007e6c
 8004004:	20000018 	.word	0x20000018
 8004008:	2000001c 	.word	0x2000001c

0800400c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800400c:	b490      	push	{r4, r7}
 800400e:	b08a      	sub	sp, #40	; 0x28
 8004010:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004012:	4b2a      	ldr	r3, [pc, #168]	; (80040bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004014:	1d3c      	adds	r4, r7, #4
 8004016:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004018:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800401c:	f240 2301 	movw	r3, #513	; 0x201
 8004020:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004022:	2300      	movs	r3, #0
 8004024:	61fb      	str	r3, [r7, #28]
 8004026:	2300      	movs	r3, #0
 8004028:	61bb      	str	r3, [r7, #24]
 800402a:	2300      	movs	r3, #0
 800402c:	627b      	str	r3, [r7, #36]	; 0x24
 800402e:	2300      	movs	r3, #0
 8004030:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004032:	2300      	movs	r3, #0
 8004034:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004036:	4b22      	ldr	r3, [pc, #136]	; (80040c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	f003 030c 	and.w	r3, r3, #12
 8004042:	2b04      	cmp	r3, #4
 8004044:	d002      	beq.n	800404c <HAL_RCC_GetSysClockFreq+0x40>
 8004046:	2b08      	cmp	r3, #8
 8004048:	d003      	beq.n	8004052 <HAL_RCC_GetSysClockFreq+0x46>
 800404a:	e02d      	b.n	80040a8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800404c:	4b1d      	ldr	r3, [pc, #116]	; (80040c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800404e:	623b      	str	r3, [r7, #32]
      break;
 8004050:	e02d      	b.n	80040ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	0c9b      	lsrs	r3, r3, #18
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800405e:	4413      	add	r3, r2
 8004060:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004064:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d013      	beq.n	8004098 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004070:	4b13      	ldr	r3, [pc, #76]	; (80040c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	0c5b      	lsrs	r3, r3, #17
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800407e:	4413      	add	r3, r2
 8004080:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004084:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	4a0e      	ldr	r2, [pc, #56]	; (80040c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800408a:	fb02 f203 	mul.w	r2, r2, r3
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	fbb2 f3f3 	udiv	r3, r2, r3
 8004094:	627b      	str	r3, [r7, #36]	; 0x24
 8004096:	e004      	b.n	80040a2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	4a0b      	ldr	r2, [pc, #44]	; (80040c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800409c:	fb02 f303 	mul.w	r3, r2, r3
 80040a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	623b      	str	r3, [r7, #32]
      break;
 80040a6:	e002      	b.n	80040ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040a8:	4b06      	ldr	r3, [pc, #24]	; (80040c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040aa:	623b      	str	r3, [r7, #32]
      break;
 80040ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040ae:	6a3b      	ldr	r3, [r7, #32]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3728      	adds	r7, #40	; 0x28
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bc90      	pop	{r4, r7}
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	08007100 	.word	0x08007100
 80040c0:	40021000 	.word	0x40021000
 80040c4:	007a1200 	.word	0x007a1200
 80040c8:	003d0900 	.word	0x003d0900

080040cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040d0:	4b02      	ldr	r3, [pc, #8]	; (80040dc <HAL_RCC_GetHCLKFreq+0x10>)
 80040d2:	681b      	ldr	r3, [r3, #0]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bc80      	pop	{r7}
 80040da:	4770      	bx	lr
 80040dc:	20000018 	.word	0x20000018

080040e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040e4:	f7ff fff2 	bl	80040cc <HAL_RCC_GetHCLKFreq>
 80040e8:	4602      	mov	r2, r0
 80040ea:	4b05      	ldr	r3, [pc, #20]	; (8004100 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	0a1b      	lsrs	r3, r3, #8
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	4903      	ldr	r1, [pc, #12]	; (8004104 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040f6:	5ccb      	ldrb	r3, [r1, r3]
 80040f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40021000 	.word	0x40021000
 8004104:	08007e7c 	.word	0x08007e7c

08004108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800410c:	f7ff ffde 	bl	80040cc <HAL_RCC_GetHCLKFreq>
 8004110:	4602      	mov	r2, r0
 8004112:	4b05      	ldr	r3, [pc, #20]	; (8004128 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	0adb      	lsrs	r3, r3, #11
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	4903      	ldr	r1, [pc, #12]	; (800412c <HAL_RCC_GetPCLK2Freq+0x24>)
 800411e:	5ccb      	ldrb	r3, [r1, r3]
 8004120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004124:	4618      	mov	r0, r3
 8004126:	bd80      	pop	{r7, pc}
 8004128:	40021000 	.word	0x40021000
 800412c:	08007e7c 	.word	0x08007e7c

08004130 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004138:	4b0a      	ldr	r3, [pc, #40]	; (8004164 <RCC_Delay+0x34>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a0a      	ldr	r2, [pc, #40]	; (8004168 <RCC_Delay+0x38>)
 800413e:	fba2 2303 	umull	r2, r3, r2, r3
 8004142:	0a5b      	lsrs	r3, r3, #9
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	fb02 f303 	mul.w	r3, r2, r3
 800414a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800414c:	bf00      	nop
  }
  while (Delay --);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	1e5a      	subs	r2, r3, #1
 8004152:	60fa      	str	r2, [r7, #12]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1f9      	bne.n	800414c <RCC_Delay+0x1c>
}
 8004158:	bf00      	nop
 800415a:	bf00      	nop
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr
 8004164:	20000018 	.word	0x20000018
 8004168:	10624dd3 	.word	0x10624dd3

0800416c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e041      	b.n	8004202 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d106      	bne.n	8004198 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7fd fad2 	bl	800173c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2202      	movs	r2, #2
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3304      	adds	r3, #4
 80041a8:	4619      	mov	r1, r3
 80041aa:	4610      	mov	r0, r2
 80041ac:	f000 fb20 	bl	80047f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
	...

0800420c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b01      	cmp	r3, #1
 800421e:	d001      	beq.n	8004224 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e03a      	b.n	800429a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2202      	movs	r2, #2
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0201 	orr.w	r2, r2, #1
 800423a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a18      	ldr	r2, [pc, #96]	; (80042a4 <HAL_TIM_Base_Start_IT+0x98>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d00e      	beq.n	8004264 <HAL_TIM_Base_Start_IT+0x58>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800424e:	d009      	beq.n	8004264 <HAL_TIM_Base_Start_IT+0x58>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a14      	ldr	r2, [pc, #80]	; (80042a8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d004      	beq.n	8004264 <HAL_TIM_Base_Start_IT+0x58>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a13      	ldr	r2, [pc, #76]	; (80042ac <HAL_TIM_Base_Start_IT+0xa0>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d111      	bne.n	8004288 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2b06      	cmp	r3, #6
 8004274:	d010      	beq.n	8004298 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f042 0201 	orr.w	r2, r2, #1
 8004284:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004286:	e007      	b.n	8004298 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f042 0201 	orr.w	r2, r2, #1
 8004296:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	bc80      	pop	{r7}
 80042a2:	4770      	bx	lr
 80042a4:	40012c00 	.word	0x40012c00
 80042a8:	40000400 	.word	0x40000400
 80042ac:	40000800 	.word	0x40000800

080042b0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e041      	b.n	8004346 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d106      	bne.n	80042dc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f839 	bl	800434e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2202      	movs	r2, #2
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3304      	adds	r3, #4
 80042ec:	4619      	mov	r1, r3
 80042ee:	4610      	mov	r0, r2
 80042f0:	f000 fa7e 	bl	80047f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800434e:	b480      	push	{r7}
 8004350:	b083      	sub	sp, #12
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	bc80      	pop	{r7}
 800435e:	4770      	bx	lr

08004360 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b02      	cmp	r3, #2
 8004374:	d122      	bne.n	80043bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b02      	cmp	r3, #2
 8004382:	d11b      	bne.n	80043bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f06f 0202 	mvn.w	r2, #2
 800438c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	f003 0303 	and.w	r3, r3, #3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 fa09 	bl	80047ba <HAL_TIM_IC_CaptureCallback>
 80043a8:	e005      	b.n	80043b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f9fc 	bl	80047a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 fa0b 	bl	80047cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	f003 0304 	and.w	r3, r3, #4
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d122      	bne.n	8004410 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b04      	cmp	r3, #4
 80043d6:	d11b      	bne.n	8004410 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f06f 0204 	mvn.w	r2, #4
 80043e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2202      	movs	r2, #2
 80043e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f9df 	bl	80047ba <HAL_TIM_IC_CaptureCallback>
 80043fc:	e005      	b.n	800440a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f9d2 	bl	80047a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 f9e1 	bl	80047cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	f003 0308 	and.w	r3, r3, #8
 800441a:	2b08      	cmp	r3, #8
 800441c:	d122      	bne.n	8004464 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f003 0308 	and.w	r3, r3, #8
 8004428:	2b08      	cmp	r3, #8
 800442a:	d11b      	bne.n	8004464 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f06f 0208 	mvn.w	r2, #8
 8004434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2204      	movs	r2, #4
 800443a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	f003 0303 	and.w	r3, r3, #3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f9b5 	bl	80047ba <HAL_TIM_IC_CaptureCallback>
 8004450:	e005      	b.n	800445e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f9a8 	bl	80047a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 f9b7 	bl	80047cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	f003 0310 	and.w	r3, r3, #16
 800446e:	2b10      	cmp	r3, #16
 8004470:	d122      	bne.n	80044b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	f003 0310 	and.w	r3, r3, #16
 800447c:	2b10      	cmp	r3, #16
 800447e:	d11b      	bne.n	80044b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f06f 0210 	mvn.w	r2, #16
 8004488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2208      	movs	r2, #8
 800448e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f98b 	bl	80047ba <HAL_TIM_IC_CaptureCallback>
 80044a4:	e005      	b.n	80044b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f97e 	bl	80047a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 f98d 	bl	80047cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d10e      	bne.n	80044e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d107      	bne.n	80044e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f06f 0201 	mvn.w	r2, #1
 80044dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7fc fcfc 	bl	8000edc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ee:	2b80      	cmp	r3, #128	; 0x80
 80044f0:	d10e      	bne.n	8004510 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fc:	2b80      	cmp	r3, #128	; 0x80
 80044fe:	d107      	bne.n	8004510 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 fca8 	bl	8004e60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451a:	2b40      	cmp	r3, #64	; 0x40
 800451c:	d10e      	bne.n	800453c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004528:	2b40      	cmp	r3, #64	; 0x40
 800452a:	d107      	bne.n	800453c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f951 	bl	80047de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	f003 0320 	and.w	r3, r3, #32
 8004546:	2b20      	cmp	r3, #32
 8004548:	d10e      	bne.n	8004568 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f003 0320 	and.w	r3, r3, #32
 8004554:	2b20      	cmp	r3, #32
 8004556:	d107      	bne.n	8004568 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f06f 0220 	mvn.w	r2, #32
 8004560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 fc73 	bl	8004e4e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004568:	bf00      	nop
 800456a:	3708      	adds	r7, #8
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004582:	2b01      	cmp	r3, #1
 8004584:	d101      	bne.n	800458a <HAL_TIM_OC_ConfigChannel+0x1a>
 8004586:	2302      	movs	r3, #2
 8004588:	e046      	b.n	8004618 <HAL_TIM_OC_ConfigChannel+0xa8>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b0c      	cmp	r3, #12
 8004596:	d839      	bhi.n	800460c <HAL_TIM_OC_ConfigChannel+0x9c>
 8004598:	a201      	add	r2, pc, #4	; (adr r2, 80045a0 <HAL_TIM_OC_ConfigChannel+0x30>)
 800459a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459e:	bf00      	nop
 80045a0:	080045d5 	.word	0x080045d5
 80045a4:	0800460d 	.word	0x0800460d
 80045a8:	0800460d 	.word	0x0800460d
 80045ac:	0800460d 	.word	0x0800460d
 80045b0:	080045e3 	.word	0x080045e3
 80045b4:	0800460d 	.word	0x0800460d
 80045b8:	0800460d 	.word	0x0800460d
 80045bc:	0800460d 	.word	0x0800460d
 80045c0:	080045f1 	.word	0x080045f1
 80045c4:	0800460d 	.word	0x0800460d
 80045c8:	0800460d 	.word	0x0800460d
 80045cc:	0800460d 	.word	0x0800460d
 80045d0:	080045ff 	.word	0x080045ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68b9      	ldr	r1, [r7, #8]
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 f96a 	bl	80048b4 <TIM_OC1_SetConfig>
      break;
 80045e0:	e015      	b.n	800460e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68b9      	ldr	r1, [r7, #8]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 f9c9 	bl	8004980 <TIM_OC2_SetConfig>
      break;
 80045ee:	e00e      	b.n	800460e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68b9      	ldr	r1, [r7, #8]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 fa2c 	bl	8004a54 <TIM_OC3_SetConfig>
      break;
 80045fc:	e007      	b.n	800460e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68b9      	ldr	r1, [r7, #8]
 8004604:	4618      	mov	r0, r3
 8004606:	f000 fa8f 	bl	8004b28 <TIM_OC4_SetConfig>
      break;
 800460a:	e000      	b.n	800460e <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 800460c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004630:	2b01      	cmp	r3, #1
 8004632:	d101      	bne.n	8004638 <HAL_TIM_ConfigClockSource+0x18>
 8004634:	2302      	movs	r3, #2
 8004636:	e0b3      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x180>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004656:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800465e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004670:	d03e      	beq.n	80046f0 <HAL_TIM_ConfigClockSource+0xd0>
 8004672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004676:	f200 8087 	bhi.w	8004788 <HAL_TIM_ConfigClockSource+0x168>
 800467a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800467e:	f000 8085 	beq.w	800478c <HAL_TIM_ConfigClockSource+0x16c>
 8004682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004686:	d87f      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
 8004688:	2b70      	cmp	r3, #112	; 0x70
 800468a:	d01a      	beq.n	80046c2 <HAL_TIM_ConfigClockSource+0xa2>
 800468c:	2b70      	cmp	r3, #112	; 0x70
 800468e:	d87b      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
 8004690:	2b60      	cmp	r3, #96	; 0x60
 8004692:	d050      	beq.n	8004736 <HAL_TIM_ConfigClockSource+0x116>
 8004694:	2b60      	cmp	r3, #96	; 0x60
 8004696:	d877      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
 8004698:	2b50      	cmp	r3, #80	; 0x50
 800469a:	d03c      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0xf6>
 800469c:	2b50      	cmp	r3, #80	; 0x50
 800469e:	d873      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
 80046a0:	2b40      	cmp	r3, #64	; 0x40
 80046a2:	d058      	beq.n	8004756 <HAL_TIM_ConfigClockSource+0x136>
 80046a4:	2b40      	cmp	r3, #64	; 0x40
 80046a6:	d86f      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
 80046a8:	2b30      	cmp	r3, #48	; 0x30
 80046aa:	d064      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x156>
 80046ac:	2b30      	cmp	r3, #48	; 0x30
 80046ae:	d86b      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
 80046b0:	2b20      	cmp	r3, #32
 80046b2:	d060      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x156>
 80046b4:	2b20      	cmp	r3, #32
 80046b6:	d867      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d05c      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x156>
 80046bc:	2b10      	cmp	r3, #16
 80046be:	d05a      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80046c0:	e062      	b.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6818      	ldr	r0, [r3, #0]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	6899      	ldr	r1, [r3, #8]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f000 faee 	bl	8004cb2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046e4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	609a      	str	r2, [r3, #8]
      break;
 80046ee:	e04e      	b.n	800478e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6818      	ldr	r0, [r3, #0]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	6899      	ldr	r1, [r3, #8]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f000 fad7 	bl	8004cb2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689a      	ldr	r2, [r3, #8]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004712:	609a      	str	r2, [r3, #8]
      break;
 8004714:	e03b      	b.n	800478e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6818      	ldr	r0, [r3, #0]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	6859      	ldr	r1, [r3, #4]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	461a      	mov	r2, r3
 8004724:	f000 fa4e 	bl	8004bc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2150      	movs	r1, #80	; 0x50
 800472e:	4618      	mov	r0, r3
 8004730:	f000 faa5 	bl	8004c7e <TIM_ITRx_SetConfig>
      break;
 8004734:	e02b      	b.n	800478e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6818      	ldr	r0, [r3, #0]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	6859      	ldr	r1, [r3, #4]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	461a      	mov	r2, r3
 8004744:	f000 fa6c 	bl	8004c20 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2160      	movs	r1, #96	; 0x60
 800474e:	4618      	mov	r0, r3
 8004750:	f000 fa95 	bl	8004c7e <TIM_ITRx_SetConfig>
      break;
 8004754:	e01b      	b.n	800478e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6818      	ldr	r0, [r3, #0]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	6859      	ldr	r1, [r3, #4]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	461a      	mov	r2, r3
 8004764:	f000 fa2e 	bl	8004bc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2140      	movs	r1, #64	; 0x40
 800476e:	4618      	mov	r0, r3
 8004770:	f000 fa85 	bl	8004c7e <TIM_ITRx_SetConfig>
      break;
 8004774:	e00b      	b.n	800478e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4619      	mov	r1, r3
 8004780:	4610      	mov	r0, r2
 8004782:	f000 fa7c 	bl	8004c7e <TIM_ITRx_SetConfig>
        break;
 8004786:	e002      	b.n	800478e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004788:	bf00      	nop
 800478a:	e000      	b.n	800478e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800478c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bc80      	pop	{r7}
 80047b8:	4770      	bx	lr

080047ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047c2:	bf00      	nop
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bc80      	pop	{r7}
 80047ca:	4770      	bx	lr

080047cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	bc80      	pop	{r7}
 80047dc:	4770      	bx	lr

080047de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bc80      	pop	{r7}
 80047ee:	4770      	bx	lr

080047f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a29      	ldr	r2, [pc, #164]	; (80048a8 <TIM_Base_SetConfig+0xb8>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d00b      	beq.n	8004820 <TIM_Base_SetConfig+0x30>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800480e:	d007      	beq.n	8004820 <TIM_Base_SetConfig+0x30>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a26      	ldr	r2, [pc, #152]	; (80048ac <TIM_Base_SetConfig+0xbc>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d003      	beq.n	8004820 <TIM_Base_SetConfig+0x30>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a25      	ldr	r2, [pc, #148]	; (80048b0 <TIM_Base_SetConfig+0xc0>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d108      	bne.n	8004832 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004826:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	4313      	orrs	r3, r2
 8004830:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a1c      	ldr	r2, [pc, #112]	; (80048a8 <TIM_Base_SetConfig+0xb8>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d00b      	beq.n	8004852 <TIM_Base_SetConfig+0x62>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004840:	d007      	beq.n	8004852 <TIM_Base_SetConfig+0x62>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a19      	ldr	r2, [pc, #100]	; (80048ac <TIM_Base_SetConfig+0xbc>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d003      	beq.n	8004852 <TIM_Base_SetConfig+0x62>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a18      	ldr	r2, [pc, #96]	; (80048b0 <TIM_Base_SetConfig+0xc0>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d108      	bne.n	8004864 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004858:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	4313      	orrs	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	4313      	orrs	r3, r2
 8004870:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	689a      	ldr	r2, [r3, #8]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a07      	ldr	r2, [pc, #28]	; (80048a8 <TIM_Base_SetConfig+0xb8>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d103      	bne.n	8004898 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	691a      	ldr	r2, [r3, #16]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	615a      	str	r2, [r3, #20]
}
 800489e:	bf00      	nop
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bc80      	pop	{r7}
 80048a6:	4770      	bx	lr
 80048a8:	40012c00 	.word	0x40012c00
 80048ac:	40000400 	.word	0x40000400
 80048b0:	40000800 	.word	0x40000800

080048b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b087      	sub	sp, #28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	f023 0201 	bic.w	r2, r3, #1
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f023 0303 	bic.w	r3, r3, #3
 80048ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f023 0302 	bic.w	r3, r3, #2
 80048fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	4313      	orrs	r3, r2
 8004906:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a1c      	ldr	r2, [pc, #112]	; (800497c <TIM_OC1_SetConfig+0xc8>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d10c      	bne.n	800492a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f023 0308 	bic.w	r3, r3, #8
 8004916:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	4313      	orrs	r3, r2
 8004920:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	f023 0304 	bic.w	r3, r3, #4
 8004928:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a13      	ldr	r2, [pc, #76]	; (800497c <TIM_OC1_SetConfig+0xc8>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d111      	bne.n	8004956 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004938:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004940:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	4313      	orrs	r3, r2
 800494a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	4313      	orrs	r3, r2
 8004954:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	621a      	str	r2, [r3, #32]
}
 8004970:	bf00      	nop
 8004972:	371c      	adds	r7, #28
 8004974:	46bd      	mov	sp, r7
 8004976:	bc80      	pop	{r7}
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	40012c00 	.word	0x40012c00

08004980 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004980:	b480      	push	{r7}
 8004982:	b087      	sub	sp, #28
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	f023 0210 	bic.w	r2, r3, #16
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	021b      	lsls	r3, r3, #8
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f023 0320 	bic.w	r3, r3, #32
 80049ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	011b      	lsls	r3, r3, #4
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a1d      	ldr	r2, [pc, #116]	; (8004a50 <TIM_OC2_SetConfig+0xd0>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d10d      	bne.n	80049fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a14      	ldr	r2, [pc, #80]	; (8004a50 <TIM_OC2_SetConfig+0xd0>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d113      	bne.n	8004a2c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	695b      	ldr	r3, [r3, #20]
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	621a      	str	r2, [r3, #32]
}
 8004a46:	bf00      	nop
 8004a48:	371c      	adds	r7, #28
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bc80      	pop	{r7}
 8004a4e:	4770      	bx	lr
 8004a50:	40012c00 	.word	0x40012c00

08004a54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f023 0303 	bic.w	r3, r3, #3
 8004a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	021b      	lsls	r3, r3, #8
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a1d      	ldr	r2, [pc, #116]	; (8004b24 <TIM_OC3_SetConfig+0xd0>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d10d      	bne.n	8004ace <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ab8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	021b      	lsls	r3, r3, #8
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004acc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a14      	ldr	r2, [pc, #80]	; (8004b24 <TIM_OC3_SetConfig+0xd0>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d113      	bne.n	8004afe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004adc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	011b      	lsls	r3, r3, #4
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	011b      	lsls	r3, r3, #4
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	621a      	str	r2, [r3, #32]
}
 8004b18:	bf00      	nop
 8004b1a:	371c      	adds	r7, #28
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bc80      	pop	{r7}
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	40012c00 	.word	0x40012c00

08004b28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b087      	sub	sp, #28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	021b      	lsls	r3, r3, #8
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	031b      	lsls	r3, r3, #12
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a0f      	ldr	r2, [pc, #60]	; (8004bc0 <TIM_OC4_SetConfig+0x98>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d109      	bne.n	8004b9c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	019b      	lsls	r3, r3, #6
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	621a      	str	r2, [r3, #32]
}
 8004bb6:	bf00      	nop
 8004bb8:	371c      	adds	r7, #28
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bc80      	pop	{r7}
 8004bbe:	4770      	bx	lr
 8004bc0:	40012c00 	.word	0x40012c00

08004bc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6a1b      	ldr	r3, [r3, #32]
 8004bd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	f023 0201 	bic.w	r2, r3, #1
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	011b      	lsls	r3, r3, #4
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f023 030a 	bic.w	r3, r3, #10
 8004c00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	621a      	str	r2, [r3, #32]
}
 8004c16:	bf00      	nop
 8004c18:	371c      	adds	r7, #28
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bc80      	pop	{r7}
 8004c1e:	4770      	bx	lr

08004c20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b087      	sub	sp, #28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	f023 0210 	bic.w	r2, r3, #16
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c4a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	031b      	lsls	r3, r3, #12
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	011b      	lsls	r3, r3, #4
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	621a      	str	r2, [r3, #32]
}
 8004c74:	bf00      	nop
 8004c76:	371c      	adds	r7, #28
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bc80      	pop	{r7}
 8004c7c:	4770      	bx	lr

08004c7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b085      	sub	sp, #20
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
 8004c86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	f043 0307 	orr.w	r3, r3, #7
 8004ca0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	609a      	str	r2, [r3, #8]
}
 8004ca8:	bf00      	nop
 8004caa:	3714      	adds	r7, #20
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bc80      	pop	{r7}
 8004cb0:	4770      	bx	lr

08004cb2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b087      	sub	sp, #28
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	60f8      	str	r0, [r7, #12]
 8004cba:	60b9      	str	r1, [r7, #8]
 8004cbc:	607a      	str	r2, [r7, #4]
 8004cbe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ccc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	021a      	lsls	r2, r3, #8
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	609a      	str	r2, [r3, #8]
}
 8004ce6:	bf00      	nop
 8004ce8:	371c      	adds	r7, #28
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bc80      	pop	{r7}
 8004cee:	4770      	bx	lr

08004cf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d101      	bne.n	8004d08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d04:	2302      	movs	r3, #2
 8004d06:	e046      	b.n	8004d96 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2202      	movs	r2, #2
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a16      	ldr	r2, [pc, #88]	; (8004da0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d00e      	beq.n	8004d6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d54:	d009      	beq.n	8004d6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a12      	ldr	r2, [pc, #72]	; (8004da4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d004      	beq.n	8004d6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a10      	ldr	r2, [pc, #64]	; (8004da8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d10c      	bne.n	8004d84 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bc80      	pop	{r7}
 8004d9e:	4770      	bx	lr
 8004da0:	40012c00 	.word	0x40012c00
 8004da4:	40000400 	.word	0x40000400
 8004da8:	40000800 	.word	0x40000800

08004dac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004db6:	2300      	movs	r3, #0
 8004db8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d101      	bne.n	8004dc8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	e03d      	b.n	8004e44 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	695b      	ldr	r3, [r3, #20]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3714      	adds	r7, #20
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bc80      	pop	{r7}
 8004e4c:	4770      	bx	lr

08004e4e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b083      	sub	sp, #12
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e56:	bf00      	nop
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bc80      	pop	{r7}
 8004e5e:	4770      	bx	lr

08004e60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bc80      	pop	{r7}
 8004e70:	4770      	bx	lr

08004e72 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b082      	sub	sp, #8
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d101      	bne.n	8004e84 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e03f      	b.n	8004f04 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d106      	bne.n	8004e9e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f7fc fc97 	bl	80017cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2224      	movs	r2, #36	; 0x24
 8004ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68da      	ldr	r2, [r3, #12]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004eb4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 fd26 	bl	8005908 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	691a      	ldr	r2, [r3, #16]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004eca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	695a      	ldr	r2, [r3, #20]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004eda:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68da      	ldr	r2, [r3, #12]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004eea:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2220      	movs	r2, #32
 8004efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3708      	adds	r7, #8
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b08a      	sub	sp, #40	; 0x28
 8004f10:	af02      	add	r7, sp, #8
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	603b      	str	r3, [r7, #0]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	2b20      	cmp	r3, #32
 8004f2a:	d17c      	bne.n	8005026 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <HAL_UART_Transmit+0x2c>
 8004f32:	88fb      	ldrh	r3, [r7, #6]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d101      	bne.n	8004f3c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e075      	b.n	8005028 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d101      	bne.n	8004f4a <HAL_UART_Transmit+0x3e>
 8004f46:	2302      	movs	r3, #2
 8004f48:	e06e      	b.n	8005028 <HAL_UART_Transmit+0x11c>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2221      	movs	r2, #33	; 0x21
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f60:	f7fc fe68 	bl	8001c34 <HAL_GetTick>
 8004f64:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	88fa      	ldrh	r2, [r7, #6]
 8004f6a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	88fa      	ldrh	r2, [r7, #6]
 8004f70:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f7a:	d108      	bne.n	8004f8e <HAL_UART_Transmit+0x82>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d104      	bne.n	8004f8e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004f84:	2300      	movs	r3, #0
 8004f86:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	61bb      	str	r3, [r7, #24]
 8004f8c:	e003      	b.n	8004f96 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f92:	2300      	movs	r3, #0
 8004f94:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004f9e:	e02a      	b.n	8004ff6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	9300      	str	r3, [sp, #0]
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	2180      	movs	r1, #128	; 0x80
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f000 fad9 	bl	8005562 <UART_WaitOnFlagUntilTimeout>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e036      	b.n	8005028 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10b      	bne.n	8004fd8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	881b      	ldrh	r3, [r3, #0]
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fce:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	3302      	adds	r3, #2
 8004fd4:	61bb      	str	r3, [r7, #24]
 8004fd6:	e007      	b.n	8004fe8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	781a      	ldrb	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1cf      	bne.n	8004fa0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	2200      	movs	r2, #0
 8005008:	2140      	movs	r1, #64	; 0x40
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f000 faa9 	bl	8005562 <UART_WaitOnFlagUntilTimeout>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e006      	b.n	8005028 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2220      	movs	r2, #32
 800501e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005022:	2300      	movs	r3, #0
 8005024:	e000      	b.n	8005028 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005026:	2302      	movs	r3, #2
  }
}
 8005028:	4618      	mov	r0, r3
 800502a:	3720      	adds	r7, #32
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b08a      	sub	sp, #40	; 0x28
 8005034:	af02      	add	r7, sp, #8
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	603b      	str	r3, [r7, #0]
 800503c:	4613      	mov	r3, r2
 800503e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005040:	2300      	movs	r3, #0
 8005042:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b20      	cmp	r3, #32
 800504e:	f040 808c 	bne.w	800516a <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d002      	beq.n	800505e <HAL_UART_Receive+0x2e>
 8005058:	88fb      	ldrh	r3, [r7, #6]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e084      	b.n	800516c <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005068:	2b01      	cmp	r3, #1
 800506a:	d101      	bne.n	8005070 <HAL_UART_Receive+0x40>
 800506c:	2302      	movs	r3, #2
 800506e:	e07d      	b.n	800516c <HAL_UART_Receive+0x13c>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2222      	movs	r2, #34	; 0x22
 8005082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800508c:	f7fc fdd2 	bl	8001c34 <HAL_GetTick>
 8005090:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	88fa      	ldrh	r2, [r7, #6]
 8005096:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	88fa      	ldrh	r2, [r7, #6]
 800509c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050a6:	d108      	bne.n	80050ba <HAL_UART_Receive+0x8a>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d104      	bne.n	80050ba <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80050b0:	2300      	movs	r3, #0
 80050b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	61bb      	str	r3, [r7, #24]
 80050b8:	e003      	b.n	80050c2 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050be:	2300      	movs	r3, #0
 80050c0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80050ca:	e043      	b.n	8005154 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	2200      	movs	r2, #0
 80050d4:	2120      	movs	r1, #32
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f000 fa43 	bl	8005562 <UART_WaitOnFlagUntilTimeout>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d001      	beq.n	80050e6 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e042      	b.n	800516c <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10c      	bne.n	8005106 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	3302      	adds	r3, #2
 8005102:	61bb      	str	r3, [r7, #24]
 8005104:	e01f      	b.n	8005146 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800510e:	d007      	beq.n	8005120 <HAL_UART_Receive+0xf0>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10a      	bne.n	800512e <HAL_UART_Receive+0xfe>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d106      	bne.n	800512e <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	b2da      	uxtb	r2, r3
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	701a      	strb	r2, [r3, #0]
 800512c:	e008      	b.n	8005140 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	b2db      	uxtb	r3, r3
 8005136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800513a:	b2da      	uxtb	r2, r3
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	3301      	adds	r3, #1
 8005144:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800514a:	b29b      	uxth	r3, r3
 800514c:	3b01      	subs	r3, #1
 800514e:	b29a      	uxth	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005158:	b29b      	uxth	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1b6      	bne.n	80050cc <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2220      	movs	r2, #32
 8005162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005166:	2300      	movs	r3, #0
 8005168:	e000      	b.n	800516c <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800516a:	2302      	movs	r3, #2
  }
}
 800516c:	4618      	mov	r0, r3
 800516e:	3720      	adds	r7, #32
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	4613      	mov	r3, r2
 8005180:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b20      	cmp	r3, #32
 800518c:	d11d      	bne.n	80051ca <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d002      	beq.n	800519a <HAL_UART_Receive_IT+0x26>
 8005194:	88fb      	ldrh	r3, [r7, #6]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e016      	b.n	80051cc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d101      	bne.n	80051ac <HAL_UART_Receive_IT+0x38>
 80051a8:	2302      	movs	r3, #2
 80051aa:	e00f      	b.n	80051cc <HAL_UART_Receive_IT+0x58>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80051ba:	88fb      	ldrh	r3, [r7, #6]
 80051bc:	461a      	mov	r2, r3
 80051be:	68b9      	ldr	r1, [r7, #8]
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f000 fa18 	bl	80055f6 <UART_Start_Receive_IT>
 80051c6:	4603      	mov	r3, r0
 80051c8:	e000      	b.n	80051cc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80051ca:	2302      	movs	r3, #2
  }
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b08a      	sub	sp, #40	; 0x28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80051f4:	2300      	movs	r3, #0
 80051f6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80051f8:	2300      	movs	r3, #0
 80051fa:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	f003 030f 	and.w	r3, r3, #15
 8005202:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10d      	bne.n	8005226 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520c:	f003 0320 	and.w	r3, r3, #32
 8005210:	2b00      	cmp	r3, #0
 8005212:	d008      	beq.n	8005226 <HAL_UART_IRQHandler+0x52>
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	f003 0320 	and.w	r3, r3, #32
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 fac9 	bl	80057b6 <UART_Receive_IT>
      return;
 8005224:	e17b      	b.n	800551e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 80b1 	beq.w	8005390 <HAL_UART_IRQHandler+0x1bc>
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	f003 0301 	and.w	r3, r3, #1
 8005234:	2b00      	cmp	r3, #0
 8005236:	d105      	bne.n	8005244 <HAL_UART_IRQHandler+0x70>
 8005238:	6a3b      	ldr	r3, [r7, #32]
 800523a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 80a6 	beq.w	8005390 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00a      	beq.n	8005264 <HAL_UART_IRQHandler+0x90>
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005254:	2b00      	cmp	r3, #0
 8005256:	d005      	beq.n	8005264 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525c:	f043 0201 	orr.w	r2, r3, #1
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	f003 0304 	and.w	r3, r3, #4
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00a      	beq.n	8005284 <HAL_UART_IRQHandler+0xb0>
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	f003 0301 	and.w	r3, r3, #1
 8005274:	2b00      	cmp	r3, #0
 8005276:	d005      	beq.n	8005284 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527c:	f043 0202 	orr.w	r2, r3, #2
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00a      	beq.n	80052a4 <HAL_UART_IRQHandler+0xd0>
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b00      	cmp	r3, #0
 8005296:	d005      	beq.n	80052a4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529c:	f043 0204 	orr.w	r2, r3, #4
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	f003 0308 	and.w	r3, r3, #8
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00f      	beq.n	80052ce <HAL_UART_IRQHandler+0xfa>
 80052ae:	6a3b      	ldr	r3, [r7, #32]
 80052b0:	f003 0320 	and.w	r3, r3, #32
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d104      	bne.n	80052c2 <HAL_UART_IRQHandler+0xee>
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d005      	beq.n	80052ce <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c6:	f043 0208 	orr.w	r2, r3, #8
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f000 811e 	beq.w	8005514 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052da:	f003 0320 	and.w	r3, r3, #32
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d007      	beq.n	80052f2 <HAL_UART_IRQHandler+0x11e>
 80052e2:	6a3b      	ldr	r3, [r7, #32]
 80052e4:	f003 0320 	and.w	r3, r3, #32
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d002      	beq.n	80052f2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 fa62 	bl	80057b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	695b      	ldr	r3, [r3, #20]
 80052f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	bf14      	ite	ne
 8005300:	2301      	movne	r3, #1
 8005302:	2300      	moveq	r3, #0
 8005304:	b2db      	uxtb	r3, r3
 8005306:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530c:	f003 0308 	and.w	r3, r3, #8
 8005310:	2b00      	cmp	r3, #0
 8005312:	d102      	bne.n	800531a <HAL_UART_IRQHandler+0x146>
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d031      	beq.n	800537e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 f9a4 	bl	8005668 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532a:	2b00      	cmp	r3, #0
 800532c:	d023      	beq.n	8005376 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	695a      	ldr	r2, [r3, #20]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800533c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005342:	2b00      	cmp	r3, #0
 8005344:	d013      	beq.n	800536e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534a:	4a76      	ldr	r2, [pc, #472]	; (8005524 <HAL_UART_IRQHandler+0x350>)
 800534c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005352:	4618      	mov	r0, r3
 8005354:	f7fd fc54 	bl	8002c00 <HAL_DMA_Abort_IT>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d016      	beq.n	800538c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005368:	4610      	mov	r0, r2
 800536a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800536c:	e00e      	b.n	800538c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f8e3 	bl	800553a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005374:	e00a      	b.n	800538c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f8df 	bl	800553a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800537c:	e006      	b.n	800538c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f8db 	bl	800553a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800538a:	e0c3      	b.n	8005514 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800538c:	bf00      	nop
    return;
 800538e:	e0c1      	b.n	8005514 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005394:	2b01      	cmp	r3, #1
 8005396:	f040 80a1 	bne.w	80054dc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	f003 0310 	and.w	r3, r3, #16
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f000 809b 	beq.w	80054dc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	f003 0310 	and.w	r3, r3, #16
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 8095 	beq.w	80054dc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053b2:	2300      	movs	r3, #0
 80053b4:	60fb      	str	r3, [r7, #12]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	60fb      	str	r3, [r7, #12]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	60fb      	str	r3, [r7, #12]
 80053c6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d04e      	beq.n	8005474 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80053e0:	8a3b      	ldrh	r3, [r7, #16]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f000 8098 	beq.w	8005518 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053ec:	8a3a      	ldrh	r2, [r7, #16]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	f080 8092 	bcs.w	8005518 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	8a3a      	ldrh	r2, [r7, #16]
 80053f8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	2b20      	cmp	r3, #32
 8005402:	d02b      	beq.n	800545c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68da      	ldr	r2, [r3, #12]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005412:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	695a      	ldr	r2, [r3, #20]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 0201 	bic.w	r2, r2, #1
 8005422:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	695a      	ldr	r2, [r3, #20]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005432:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2220      	movs	r2, #32
 8005438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68da      	ldr	r2, [r3, #12]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f022 0210 	bic.w	r2, r2, #16
 8005450:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005456:	4618      	mov	r0, r3
 8005458:	f7fd fb97 	bl	8002b8a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005464:	b29b      	uxth	r3, r3
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	b29b      	uxth	r3, r3
 800546a:	4619      	mov	r1, r3
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 f86d 	bl	800554c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005472:	e051      	b.n	8005518 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800547c:	b29b      	uxth	r3, r3
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005486:	b29b      	uxth	r3, r3
 8005488:	2b00      	cmp	r3, #0
 800548a:	d047      	beq.n	800551c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800548c:	8a7b      	ldrh	r3, [r7, #18]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d044      	beq.n	800551c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68da      	ldr	r2, [r3, #12]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80054a0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	695a      	ldr	r2, [r3, #20]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 0201 	bic.w	r2, r2, #1
 80054b0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2220      	movs	r2, #32
 80054b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68da      	ldr	r2, [r3, #12]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f022 0210 	bic.w	r2, r2, #16
 80054ce:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054d0:	8a7b      	ldrh	r3, [r7, #18]
 80054d2:	4619      	mov	r1, r3
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 f839 	bl	800554c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80054da:	e01f      	b.n	800551c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d008      	beq.n	80054f8 <HAL_UART_IRQHandler+0x324>
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d003      	beq.n	80054f8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 f8f9 	bl	80056e8 <UART_Transmit_IT>
    return;
 80054f6:	e012      	b.n	800551e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80054f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00d      	beq.n	800551e <HAL_UART_IRQHandler+0x34a>
 8005502:	6a3b      	ldr	r3, [r7, #32]
 8005504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005508:	2b00      	cmp	r3, #0
 800550a:	d008      	beq.n	800551e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f93a 	bl	8005786 <UART_EndTransmit_IT>
    return;
 8005512:	e004      	b.n	800551e <HAL_UART_IRQHandler+0x34a>
    return;
 8005514:	bf00      	nop
 8005516:	e002      	b.n	800551e <HAL_UART_IRQHandler+0x34a>
      return;
 8005518:	bf00      	nop
 800551a:	e000      	b.n	800551e <HAL_UART_IRQHandler+0x34a>
      return;
 800551c:	bf00      	nop
  }
}
 800551e:	3728      	adds	r7, #40	; 0x28
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	080056c1 	.word	0x080056c1

08005528 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	bc80      	pop	{r7}
 8005538:	4770      	bx	lr

0800553a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800553a:	b480      	push	{r7}
 800553c:	b083      	sub	sp, #12
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005542:	bf00      	nop
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	bc80      	pop	{r7}
 800554a:	4770      	bx	lr

0800554c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	460b      	mov	r3, r1
 8005556:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	bc80      	pop	{r7}
 8005560:	4770      	bx	lr

08005562 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b084      	sub	sp, #16
 8005566:	af00      	add	r7, sp, #0
 8005568:	60f8      	str	r0, [r7, #12]
 800556a:	60b9      	str	r1, [r7, #8]
 800556c:	603b      	str	r3, [r7, #0]
 800556e:	4613      	mov	r3, r2
 8005570:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005572:	e02c      	b.n	80055ce <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557a:	d028      	beq.n	80055ce <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d007      	beq.n	8005592 <UART_WaitOnFlagUntilTimeout+0x30>
 8005582:	f7fc fb57 	bl	8001c34 <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	429a      	cmp	r2, r3
 8005590:	d21d      	bcs.n	80055ce <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68da      	ldr	r2, [r3, #12]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80055a0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	695a      	ldr	r2, [r3, #20]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f022 0201 	bic.w	r2, r2, #1
 80055b0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2220      	movs	r2, #32
 80055be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e00f      	b.n	80055ee <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	4013      	ands	r3, r2
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	429a      	cmp	r2, r3
 80055dc:	bf0c      	ite	eq
 80055de:	2301      	moveq	r3, #1
 80055e0:	2300      	movne	r3, #0
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	461a      	mov	r2, r3
 80055e6:	79fb      	ldrb	r3, [r7, #7]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d0c3      	beq.n	8005574 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b085      	sub	sp, #20
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	60f8      	str	r0, [r7, #12]
 80055fe:	60b9      	str	r1, [r7, #8]
 8005600:	4613      	mov	r3, r2
 8005602:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	88fa      	ldrh	r2, [r7, #6]
 800560e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	88fa      	ldrh	r2, [r7, #6]
 8005614:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2222      	movs	r2, #34	; 0x22
 8005620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68da      	ldr	r2, [r3, #12]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800563a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	695a      	ldr	r2, [r3, #20]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0201 	orr.w	r2, r2, #1
 800564a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68da      	ldr	r2, [r3, #12]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f042 0220 	orr.w	r2, r2, #32
 800565a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3714      	adds	r7, #20
 8005662:	46bd      	mov	sp, r7
 8005664:	bc80      	pop	{r7}
 8005666:	4770      	bx	lr

08005668 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68da      	ldr	r2, [r3, #12]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800567e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	695a      	ldr	r2, [r3, #20]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 0201 	bic.w	r2, r2, #1
 800568e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005694:	2b01      	cmp	r3, #1
 8005696:	d107      	bne.n	80056a8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f022 0210 	bic.w	r2, r2, #16
 80056a6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2220      	movs	r2, #32
 80056ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80056b6:	bf00      	nop
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bc80      	pop	{r7}
 80056be:	4770      	bx	lr

080056c0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f7ff ff2d 	bl	800553a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056e0:	bf00      	nop
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b21      	cmp	r3, #33	; 0x21
 80056fa:	d13e      	bne.n	800577a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005704:	d114      	bne.n	8005730 <UART_Transmit_IT+0x48>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d110      	bne.n	8005730 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	881b      	ldrh	r3, [r3, #0]
 8005718:	461a      	mov	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005722:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	1c9a      	adds	r2, r3, #2
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	621a      	str	r2, [r3, #32]
 800572e:	e008      	b.n	8005742 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a1b      	ldr	r3, [r3, #32]
 8005734:	1c59      	adds	r1, r3, #1
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	6211      	str	r1, [r2, #32]
 800573a:	781a      	ldrb	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005746:	b29b      	uxth	r3, r3
 8005748:	3b01      	subs	r3, #1
 800574a:	b29b      	uxth	r3, r3
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	4619      	mov	r1, r3
 8005750:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10f      	bne.n	8005776 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68da      	ldr	r2, [r3, #12]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005764:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68da      	ldr	r2, [r3, #12]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005774:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005776:	2300      	movs	r3, #0
 8005778:	e000      	b.n	800577c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800577a:	2302      	movs	r3, #2
  }
}
 800577c:	4618      	mov	r0, r3
 800577e:	3714      	adds	r7, #20
 8005780:	46bd      	mov	sp, r7
 8005782:	bc80      	pop	{r7}
 8005784:	4770      	bx	lr

08005786 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b082      	sub	sp, #8
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68da      	ldr	r2, [r3, #12]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800579c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2220      	movs	r2, #32
 80057a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7ff febe 	bl	8005528 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3708      	adds	r7, #8
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b086      	sub	sp, #24
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b22      	cmp	r3, #34	; 0x22
 80057c8:	f040 8099 	bne.w	80058fe <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057d4:	d117      	bne.n	8005806 <UART_Receive_IT+0x50>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d113      	bne.n	8005806 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80057de:	2300      	movs	r3, #0
 80057e0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fe:	1c9a      	adds	r2, r3, #2
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	629a      	str	r2, [r3, #40]	; 0x28
 8005804:	e026      	b.n	8005854 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800580c:	2300      	movs	r3, #0
 800580e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005818:	d007      	beq.n	800582a <UART_Receive_IT+0x74>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10a      	bne.n	8005838 <UART_Receive_IT+0x82>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d106      	bne.n	8005838 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	b2da      	uxtb	r2, r3
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	701a      	strb	r2, [r3, #0]
 8005836:	e008      	b.n	800584a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	b2db      	uxtb	r3, r3
 8005840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005844:	b2da      	uxtb	r2, r3
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584e:	1c5a      	adds	r2, r3, #1
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005858:	b29b      	uxth	r3, r3
 800585a:	3b01      	subs	r3, #1
 800585c:	b29b      	uxth	r3, r3
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	4619      	mov	r1, r3
 8005862:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005864:	2b00      	cmp	r3, #0
 8005866:	d148      	bne.n	80058fa <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68da      	ldr	r2, [r3, #12]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f022 0220 	bic.w	r2, r2, #32
 8005876:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68da      	ldr	r2, [r3, #12]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005886:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	695a      	ldr	r2, [r3, #20]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f022 0201 	bic.w	r2, r2, #1
 8005896:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2220      	movs	r2, #32
 800589c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d123      	bne.n	80058f0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68da      	ldr	r2, [r3, #12]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f022 0210 	bic.w	r2, r2, #16
 80058bc:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0310 	and.w	r3, r3, #16
 80058c8:	2b10      	cmp	r3, #16
 80058ca:	d10a      	bne.n	80058e2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058cc:	2300      	movs	r3, #0
 80058ce:	60fb      	str	r3, [r7, #12]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	60fb      	str	r3, [r7, #12]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	60fb      	str	r3, [r7, #12]
 80058e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058e6:	4619      	mov	r1, r3
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f7ff fe2f 	bl	800554c <HAL_UARTEx_RxEventCallback>
 80058ee:	e002      	b.n	80058f6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f7fc f8a9 	bl	8001a48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80058f6:	2300      	movs	r3, #0
 80058f8:	e002      	b.n	8005900 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80058fa:	2300      	movs	r3, #0
 80058fc:	e000      	b.n	8005900 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80058fe:	2302      	movs	r3, #2
  }
}
 8005900:	4618      	mov	r0, r3
 8005902:	3718      	adds	r7, #24
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	68da      	ldr	r2, [r3, #12]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	430a      	orrs	r2, r1
 8005924:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	689a      	ldr	r2, [r3, #8]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	431a      	orrs	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	4313      	orrs	r3, r2
 8005936:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005942:	f023 030c 	bic.w	r3, r3, #12
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	6812      	ldr	r2, [r2, #0]
 800594a:	68b9      	ldr	r1, [r7, #8]
 800594c:	430b      	orrs	r3, r1
 800594e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	699a      	ldr	r2, [r3, #24]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	430a      	orrs	r2, r1
 8005964:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a2c      	ldr	r2, [pc, #176]	; (8005a1c <UART_SetConfig+0x114>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d103      	bne.n	8005978 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005970:	f7fe fbca 	bl	8004108 <HAL_RCC_GetPCLK2Freq>
 8005974:	60f8      	str	r0, [r7, #12]
 8005976:	e002      	b.n	800597e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005978:	f7fe fbb2 	bl	80040e0 <HAL_RCC_GetPCLK1Freq>
 800597c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	4613      	mov	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	009a      	lsls	r2, r3, #2
 8005988:	441a      	add	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	fbb2 f3f3 	udiv	r3, r2, r3
 8005994:	4a22      	ldr	r2, [pc, #136]	; (8005a20 <UART_SetConfig+0x118>)
 8005996:	fba2 2303 	umull	r2, r3, r2, r3
 800599a:	095b      	lsrs	r3, r3, #5
 800599c:	0119      	lsls	r1, r3, #4
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	4613      	mov	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4413      	add	r3, r2
 80059a6:	009a      	lsls	r2, r3, #2
 80059a8:	441a      	add	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80059b4:	4b1a      	ldr	r3, [pc, #104]	; (8005a20 <UART_SetConfig+0x118>)
 80059b6:	fba3 0302 	umull	r0, r3, r3, r2
 80059ba:	095b      	lsrs	r3, r3, #5
 80059bc:	2064      	movs	r0, #100	; 0x64
 80059be:	fb00 f303 	mul.w	r3, r0, r3
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	011b      	lsls	r3, r3, #4
 80059c6:	3332      	adds	r3, #50	; 0x32
 80059c8:	4a15      	ldr	r2, [pc, #84]	; (8005a20 <UART_SetConfig+0x118>)
 80059ca:	fba2 2303 	umull	r2, r3, r2, r3
 80059ce:	095b      	lsrs	r3, r3, #5
 80059d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059d4:	4419      	add	r1, r3
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4613      	mov	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	009a      	lsls	r2, r3, #2
 80059e0:	441a      	add	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80059ec:	4b0c      	ldr	r3, [pc, #48]	; (8005a20 <UART_SetConfig+0x118>)
 80059ee:	fba3 0302 	umull	r0, r3, r3, r2
 80059f2:	095b      	lsrs	r3, r3, #5
 80059f4:	2064      	movs	r0, #100	; 0x64
 80059f6:	fb00 f303 	mul.w	r3, r0, r3
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	011b      	lsls	r3, r3, #4
 80059fe:	3332      	adds	r3, #50	; 0x32
 8005a00:	4a07      	ldr	r2, [pc, #28]	; (8005a20 <UART_SetConfig+0x118>)
 8005a02:	fba2 2303 	umull	r2, r3, r2, r3
 8005a06:	095b      	lsrs	r3, r3, #5
 8005a08:	f003 020f 	and.w	r2, r3, #15
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	440a      	add	r2, r1
 8005a12:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005a14:	bf00      	nop
 8005a16:	3710      	adds	r7, #16
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	40013800 	.word	0x40013800
 8005a20:	51eb851f 	.word	0x51eb851f

08005a24 <__errno>:
 8005a24:	4b01      	ldr	r3, [pc, #4]	; (8005a2c <__errno+0x8>)
 8005a26:	6818      	ldr	r0, [r3, #0]
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	20000024 	.word	0x20000024

08005a30 <__libc_init_array>:
 8005a30:	b570      	push	{r4, r5, r6, lr}
 8005a32:	2600      	movs	r6, #0
 8005a34:	4d0c      	ldr	r5, [pc, #48]	; (8005a68 <__libc_init_array+0x38>)
 8005a36:	4c0d      	ldr	r4, [pc, #52]	; (8005a6c <__libc_init_array+0x3c>)
 8005a38:	1b64      	subs	r4, r4, r5
 8005a3a:	10a4      	asrs	r4, r4, #2
 8005a3c:	42a6      	cmp	r6, r4
 8005a3e:	d109      	bne.n	8005a54 <__libc_init_array+0x24>
 8005a40:	f001 fab8 	bl	8006fb4 <_init>
 8005a44:	2600      	movs	r6, #0
 8005a46:	4d0a      	ldr	r5, [pc, #40]	; (8005a70 <__libc_init_array+0x40>)
 8005a48:	4c0a      	ldr	r4, [pc, #40]	; (8005a74 <__libc_init_array+0x44>)
 8005a4a:	1b64      	subs	r4, r4, r5
 8005a4c:	10a4      	asrs	r4, r4, #2
 8005a4e:	42a6      	cmp	r6, r4
 8005a50:	d105      	bne.n	8005a5e <__libc_init_array+0x2e>
 8005a52:	bd70      	pop	{r4, r5, r6, pc}
 8005a54:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a58:	4798      	blx	r3
 8005a5a:	3601      	adds	r6, #1
 8005a5c:	e7ee      	b.n	8005a3c <__libc_init_array+0xc>
 8005a5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a62:	4798      	blx	r3
 8005a64:	3601      	adds	r6, #1
 8005a66:	e7f2      	b.n	8005a4e <__libc_init_array+0x1e>
 8005a68:	08007f1c 	.word	0x08007f1c
 8005a6c:	08007f1c 	.word	0x08007f1c
 8005a70:	08007f1c 	.word	0x08007f1c
 8005a74:	08007f20 	.word	0x08007f20

08005a78 <memcpy>:
 8005a78:	440a      	add	r2, r1
 8005a7a:	4291      	cmp	r1, r2
 8005a7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a80:	d100      	bne.n	8005a84 <memcpy+0xc>
 8005a82:	4770      	bx	lr
 8005a84:	b510      	push	{r4, lr}
 8005a86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a8a:	4291      	cmp	r1, r2
 8005a8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a90:	d1f9      	bne.n	8005a86 <memcpy+0xe>
 8005a92:	bd10      	pop	{r4, pc}

08005a94 <memmove>:
 8005a94:	4288      	cmp	r0, r1
 8005a96:	b510      	push	{r4, lr}
 8005a98:	eb01 0402 	add.w	r4, r1, r2
 8005a9c:	d902      	bls.n	8005aa4 <memmove+0x10>
 8005a9e:	4284      	cmp	r4, r0
 8005aa0:	4623      	mov	r3, r4
 8005aa2:	d807      	bhi.n	8005ab4 <memmove+0x20>
 8005aa4:	1e43      	subs	r3, r0, #1
 8005aa6:	42a1      	cmp	r1, r4
 8005aa8:	d008      	beq.n	8005abc <memmove+0x28>
 8005aaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005aae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ab2:	e7f8      	b.n	8005aa6 <memmove+0x12>
 8005ab4:	4601      	mov	r1, r0
 8005ab6:	4402      	add	r2, r0
 8005ab8:	428a      	cmp	r2, r1
 8005aba:	d100      	bne.n	8005abe <memmove+0x2a>
 8005abc:	bd10      	pop	{r4, pc}
 8005abe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ac2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ac6:	e7f7      	b.n	8005ab8 <memmove+0x24>

08005ac8 <memset>:
 8005ac8:	4603      	mov	r3, r0
 8005aca:	4402      	add	r2, r0
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d100      	bne.n	8005ad2 <memset+0xa>
 8005ad0:	4770      	bx	lr
 8005ad2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ad6:	e7f9      	b.n	8005acc <memset+0x4>

08005ad8 <iprintf>:
 8005ad8:	b40f      	push	{r0, r1, r2, r3}
 8005ada:	4b0a      	ldr	r3, [pc, #40]	; (8005b04 <iprintf+0x2c>)
 8005adc:	b513      	push	{r0, r1, r4, lr}
 8005ade:	681c      	ldr	r4, [r3, #0]
 8005ae0:	b124      	cbz	r4, 8005aec <iprintf+0x14>
 8005ae2:	69a3      	ldr	r3, [r4, #24]
 8005ae4:	b913      	cbnz	r3, 8005aec <iprintf+0x14>
 8005ae6:	4620      	mov	r0, r4
 8005ae8:	f000 fa5c 	bl	8005fa4 <__sinit>
 8005aec:	ab05      	add	r3, sp, #20
 8005aee:	4620      	mov	r0, r4
 8005af0:	9a04      	ldr	r2, [sp, #16]
 8005af2:	68a1      	ldr	r1, [r4, #8]
 8005af4:	9301      	str	r3, [sp, #4]
 8005af6:	f000 fd8b 	bl	8006610 <_vfiprintf_r>
 8005afa:	b002      	add	sp, #8
 8005afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b00:	b004      	add	sp, #16
 8005b02:	4770      	bx	lr
 8005b04:	20000024 	.word	0x20000024

08005b08 <putchar>:
 8005b08:	b538      	push	{r3, r4, r5, lr}
 8005b0a:	4b08      	ldr	r3, [pc, #32]	; (8005b2c <putchar+0x24>)
 8005b0c:	4605      	mov	r5, r0
 8005b0e:	681c      	ldr	r4, [r3, #0]
 8005b10:	b124      	cbz	r4, 8005b1c <putchar+0x14>
 8005b12:	69a3      	ldr	r3, [r4, #24]
 8005b14:	b913      	cbnz	r3, 8005b1c <putchar+0x14>
 8005b16:	4620      	mov	r0, r4
 8005b18:	f000 fa44 	bl	8005fa4 <__sinit>
 8005b1c:	4629      	mov	r1, r5
 8005b1e:	4620      	mov	r0, r4
 8005b20:	68a2      	ldr	r2, [r4, #8]
 8005b22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b26:	f001 b839 	b.w	8006b9c <_putc_r>
 8005b2a:	bf00      	nop
 8005b2c:	20000024 	.word	0x20000024

08005b30 <setvbuf>:
 8005b30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005b34:	461d      	mov	r5, r3
 8005b36:	4b5d      	ldr	r3, [pc, #372]	; (8005cac <setvbuf+0x17c>)
 8005b38:	4604      	mov	r4, r0
 8005b3a:	681f      	ldr	r7, [r3, #0]
 8005b3c:	460e      	mov	r6, r1
 8005b3e:	4690      	mov	r8, r2
 8005b40:	b127      	cbz	r7, 8005b4c <setvbuf+0x1c>
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	b913      	cbnz	r3, 8005b4c <setvbuf+0x1c>
 8005b46:	4638      	mov	r0, r7
 8005b48:	f000 fa2c 	bl	8005fa4 <__sinit>
 8005b4c:	4b58      	ldr	r3, [pc, #352]	; (8005cb0 <setvbuf+0x180>)
 8005b4e:	429c      	cmp	r4, r3
 8005b50:	d167      	bne.n	8005c22 <setvbuf+0xf2>
 8005b52:	687c      	ldr	r4, [r7, #4]
 8005b54:	f1b8 0f02 	cmp.w	r8, #2
 8005b58:	d006      	beq.n	8005b68 <setvbuf+0x38>
 8005b5a:	f1b8 0f01 	cmp.w	r8, #1
 8005b5e:	f200 809f 	bhi.w	8005ca0 <setvbuf+0x170>
 8005b62:	2d00      	cmp	r5, #0
 8005b64:	f2c0 809c 	blt.w	8005ca0 <setvbuf+0x170>
 8005b68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b6a:	07db      	lsls	r3, r3, #31
 8005b6c:	d405      	bmi.n	8005b7a <setvbuf+0x4a>
 8005b6e:	89a3      	ldrh	r3, [r4, #12]
 8005b70:	0598      	lsls	r0, r3, #22
 8005b72:	d402      	bmi.n	8005b7a <setvbuf+0x4a>
 8005b74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b76:	f000 fab3 	bl	80060e0 <__retarget_lock_acquire_recursive>
 8005b7a:	4621      	mov	r1, r4
 8005b7c:	4638      	mov	r0, r7
 8005b7e:	f000 f97d 	bl	8005e7c <_fflush_r>
 8005b82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b84:	b141      	cbz	r1, 8005b98 <setvbuf+0x68>
 8005b86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b8a:	4299      	cmp	r1, r3
 8005b8c:	d002      	beq.n	8005b94 <setvbuf+0x64>
 8005b8e:	4638      	mov	r0, r7
 8005b90:	f000 fb14 	bl	80061bc <_free_r>
 8005b94:	2300      	movs	r3, #0
 8005b96:	6363      	str	r3, [r4, #52]	; 0x34
 8005b98:	2300      	movs	r3, #0
 8005b9a:	61a3      	str	r3, [r4, #24]
 8005b9c:	6063      	str	r3, [r4, #4]
 8005b9e:	89a3      	ldrh	r3, [r4, #12]
 8005ba0:	0619      	lsls	r1, r3, #24
 8005ba2:	d503      	bpl.n	8005bac <setvbuf+0x7c>
 8005ba4:	4638      	mov	r0, r7
 8005ba6:	6921      	ldr	r1, [r4, #16]
 8005ba8:	f000 fb08 	bl	80061bc <_free_r>
 8005bac:	89a3      	ldrh	r3, [r4, #12]
 8005bae:	f1b8 0f02 	cmp.w	r8, #2
 8005bb2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005bb6:	f023 0303 	bic.w	r3, r3, #3
 8005bba:	81a3      	strh	r3, [r4, #12]
 8005bbc:	d06c      	beq.n	8005c98 <setvbuf+0x168>
 8005bbe:	ab01      	add	r3, sp, #4
 8005bc0:	466a      	mov	r2, sp
 8005bc2:	4621      	mov	r1, r4
 8005bc4:	4638      	mov	r0, r7
 8005bc6:	f000 fa8d 	bl	80060e4 <__swhatbuf_r>
 8005bca:	89a3      	ldrh	r3, [r4, #12]
 8005bcc:	4318      	orrs	r0, r3
 8005bce:	81a0      	strh	r0, [r4, #12]
 8005bd0:	2d00      	cmp	r5, #0
 8005bd2:	d130      	bne.n	8005c36 <setvbuf+0x106>
 8005bd4:	9d00      	ldr	r5, [sp, #0]
 8005bd6:	4628      	mov	r0, r5
 8005bd8:	f000 fae8 	bl	80061ac <malloc>
 8005bdc:	4606      	mov	r6, r0
 8005bde:	2800      	cmp	r0, #0
 8005be0:	d155      	bne.n	8005c8e <setvbuf+0x15e>
 8005be2:	f8dd 9000 	ldr.w	r9, [sp]
 8005be6:	45a9      	cmp	r9, r5
 8005be8:	d14a      	bne.n	8005c80 <setvbuf+0x150>
 8005bea:	f04f 35ff 	mov.w	r5, #4294967295
 8005bee:	2200      	movs	r2, #0
 8005bf0:	60a2      	str	r2, [r4, #8]
 8005bf2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8005bf6:	6022      	str	r2, [r4, #0]
 8005bf8:	6122      	str	r2, [r4, #16]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c00:	6162      	str	r2, [r4, #20]
 8005c02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c04:	f043 0302 	orr.w	r3, r3, #2
 8005c08:	07d2      	lsls	r2, r2, #31
 8005c0a:	81a3      	strh	r3, [r4, #12]
 8005c0c:	d405      	bmi.n	8005c1a <setvbuf+0xea>
 8005c0e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005c12:	d102      	bne.n	8005c1a <setvbuf+0xea>
 8005c14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c16:	f000 fa64 	bl	80060e2 <__retarget_lock_release_recursive>
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	b003      	add	sp, #12
 8005c1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c22:	4b24      	ldr	r3, [pc, #144]	; (8005cb4 <setvbuf+0x184>)
 8005c24:	429c      	cmp	r4, r3
 8005c26:	d101      	bne.n	8005c2c <setvbuf+0xfc>
 8005c28:	68bc      	ldr	r4, [r7, #8]
 8005c2a:	e793      	b.n	8005b54 <setvbuf+0x24>
 8005c2c:	4b22      	ldr	r3, [pc, #136]	; (8005cb8 <setvbuf+0x188>)
 8005c2e:	429c      	cmp	r4, r3
 8005c30:	bf08      	it	eq
 8005c32:	68fc      	ldreq	r4, [r7, #12]
 8005c34:	e78e      	b.n	8005b54 <setvbuf+0x24>
 8005c36:	2e00      	cmp	r6, #0
 8005c38:	d0cd      	beq.n	8005bd6 <setvbuf+0xa6>
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	b913      	cbnz	r3, 8005c44 <setvbuf+0x114>
 8005c3e:	4638      	mov	r0, r7
 8005c40:	f000 f9b0 	bl	8005fa4 <__sinit>
 8005c44:	f1b8 0f01 	cmp.w	r8, #1
 8005c48:	bf08      	it	eq
 8005c4a:	89a3      	ldrheq	r3, [r4, #12]
 8005c4c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005c50:	bf04      	itt	eq
 8005c52:	f043 0301 	orreq.w	r3, r3, #1
 8005c56:	81a3      	strheq	r3, [r4, #12]
 8005c58:	89a2      	ldrh	r2, [r4, #12]
 8005c5a:	6026      	str	r6, [r4, #0]
 8005c5c:	f012 0308 	ands.w	r3, r2, #8
 8005c60:	d01c      	beq.n	8005c9c <setvbuf+0x16c>
 8005c62:	07d3      	lsls	r3, r2, #31
 8005c64:	bf41      	itttt	mi
 8005c66:	2300      	movmi	r3, #0
 8005c68:	426d      	negmi	r5, r5
 8005c6a:	60a3      	strmi	r3, [r4, #8]
 8005c6c:	61a5      	strmi	r5, [r4, #24]
 8005c6e:	bf58      	it	pl
 8005c70:	60a5      	strpl	r5, [r4, #8]
 8005c72:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005c74:	f015 0501 	ands.w	r5, r5, #1
 8005c78:	d115      	bne.n	8005ca6 <setvbuf+0x176>
 8005c7a:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005c7e:	e7c8      	b.n	8005c12 <setvbuf+0xe2>
 8005c80:	4648      	mov	r0, r9
 8005c82:	f000 fa93 	bl	80061ac <malloc>
 8005c86:	4606      	mov	r6, r0
 8005c88:	2800      	cmp	r0, #0
 8005c8a:	d0ae      	beq.n	8005bea <setvbuf+0xba>
 8005c8c:	464d      	mov	r5, r9
 8005c8e:	89a3      	ldrh	r3, [r4, #12]
 8005c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c94:	81a3      	strh	r3, [r4, #12]
 8005c96:	e7d0      	b.n	8005c3a <setvbuf+0x10a>
 8005c98:	2500      	movs	r5, #0
 8005c9a:	e7a8      	b.n	8005bee <setvbuf+0xbe>
 8005c9c:	60a3      	str	r3, [r4, #8]
 8005c9e:	e7e8      	b.n	8005c72 <setvbuf+0x142>
 8005ca0:	f04f 35ff 	mov.w	r5, #4294967295
 8005ca4:	e7b9      	b.n	8005c1a <setvbuf+0xea>
 8005ca6:	2500      	movs	r5, #0
 8005ca8:	e7b7      	b.n	8005c1a <setvbuf+0xea>
 8005caa:	bf00      	nop
 8005cac:	20000024 	.word	0x20000024
 8005cb0:	08007ea8 	.word	0x08007ea8
 8005cb4:	08007ec8 	.word	0x08007ec8
 8005cb8:	08007e88 	.word	0x08007e88

08005cbc <siprintf>:
 8005cbc:	b40e      	push	{r1, r2, r3}
 8005cbe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005cc2:	b500      	push	{lr}
 8005cc4:	b09c      	sub	sp, #112	; 0x70
 8005cc6:	ab1d      	add	r3, sp, #116	; 0x74
 8005cc8:	9002      	str	r0, [sp, #8]
 8005cca:	9006      	str	r0, [sp, #24]
 8005ccc:	9107      	str	r1, [sp, #28]
 8005cce:	9104      	str	r1, [sp, #16]
 8005cd0:	4808      	ldr	r0, [pc, #32]	; (8005cf4 <siprintf+0x38>)
 8005cd2:	4909      	ldr	r1, [pc, #36]	; (8005cf8 <siprintf+0x3c>)
 8005cd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cd8:	9105      	str	r1, [sp, #20]
 8005cda:	6800      	ldr	r0, [r0, #0]
 8005cdc:	a902      	add	r1, sp, #8
 8005cde:	9301      	str	r3, [sp, #4]
 8005ce0:	f000 fb6e 	bl	80063c0 <_svfiprintf_r>
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	9b02      	ldr	r3, [sp, #8]
 8005ce8:	701a      	strb	r2, [r3, #0]
 8005cea:	b01c      	add	sp, #112	; 0x70
 8005cec:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cf0:	b003      	add	sp, #12
 8005cf2:	4770      	bx	lr
 8005cf4:	20000024 	.word	0x20000024
 8005cf8:	ffff0208 	.word	0xffff0208

08005cfc <_vsniprintf_r>:
 8005cfc:	b530      	push	{r4, r5, lr}
 8005cfe:	1e14      	subs	r4, r2, #0
 8005d00:	4605      	mov	r5, r0
 8005d02:	b09b      	sub	sp, #108	; 0x6c
 8005d04:	4618      	mov	r0, r3
 8005d06:	da05      	bge.n	8005d14 <_vsniprintf_r+0x18>
 8005d08:	238b      	movs	r3, #139	; 0x8b
 8005d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d0e:	602b      	str	r3, [r5, #0]
 8005d10:	b01b      	add	sp, #108	; 0x6c
 8005d12:	bd30      	pop	{r4, r5, pc}
 8005d14:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005d18:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005d1c:	bf0c      	ite	eq
 8005d1e:	4623      	moveq	r3, r4
 8005d20:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005d24:	9302      	str	r3, [sp, #8]
 8005d26:	9305      	str	r3, [sp, #20]
 8005d28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	9100      	str	r1, [sp, #0]
 8005d30:	9104      	str	r1, [sp, #16]
 8005d32:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005d36:	4669      	mov	r1, sp
 8005d38:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	f000 fb40 	bl	80063c0 <_svfiprintf_r>
 8005d40:	1c43      	adds	r3, r0, #1
 8005d42:	bfbc      	itt	lt
 8005d44:	238b      	movlt	r3, #139	; 0x8b
 8005d46:	602b      	strlt	r3, [r5, #0]
 8005d48:	2c00      	cmp	r4, #0
 8005d4a:	d0e1      	beq.n	8005d10 <_vsniprintf_r+0x14>
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	9b00      	ldr	r3, [sp, #0]
 8005d50:	701a      	strb	r2, [r3, #0]
 8005d52:	e7dd      	b.n	8005d10 <_vsniprintf_r+0x14>

08005d54 <vsniprintf>:
 8005d54:	b507      	push	{r0, r1, r2, lr}
 8005d56:	9300      	str	r3, [sp, #0]
 8005d58:	4613      	mov	r3, r2
 8005d5a:	460a      	mov	r2, r1
 8005d5c:	4601      	mov	r1, r0
 8005d5e:	4803      	ldr	r0, [pc, #12]	; (8005d6c <vsniprintf+0x18>)
 8005d60:	6800      	ldr	r0, [r0, #0]
 8005d62:	f7ff ffcb 	bl	8005cfc <_vsniprintf_r>
 8005d66:	b003      	add	sp, #12
 8005d68:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d6c:	20000024 	.word	0x20000024

08005d70 <__sflush_r>:
 8005d70:	898a      	ldrh	r2, [r1, #12]
 8005d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d76:	4605      	mov	r5, r0
 8005d78:	0710      	lsls	r0, r2, #28
 8005d7a:	460c      	mov	r4, r1
 8005d7c:	d458      	bmi.n	8005e30 <__sflush_r+0xc0>
 8005d7e:	684b      	ldr	r3, [r1, #4]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	dc05      	bgt.n	8005d90 <__sflush_r+0x20>
 8005d84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	dc02      	bgt.n	8005d90 <__sflush_r+0x20>
 8005d8a:	2000      	movs	r0, #0
 8005d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d92:	2e00      	cmp	r6, #0
 8005d94:	d0f9      	beq.n	8005d8a <__sflush_r+0x1a>
 8005d96:	2300      	movs	r3, #0
 8005d98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d9c:	682f      	ldr	r7, [r5, #0]
 8005d9e:	602b      	str	r3, [r5, #0]
 8005da0:	d032      	beq.n	8005e08 <__sflush_r+0x98>
 8005da2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005da4:	89a3      	ldrh	r3, [r4, #12]
 8005da6:	075a      	lsls	r2, r3, #29
 8005da8:	d505      	bpl.n	8005db6 <__sflush_r+0x46>
 8005daa:	6863      	ldr	r3, [r4, #4]
 8005dac:	1ac0      	subs	r0, r0, r3
 8005dae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005db0:	b10b      	cbz	r3, 8005db6 <__sflush_r+0x46>
 8005db2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005db4:	1ac0      	subs	r0, r0, r3
 8005db6:	2300      	movs	r3, #0
 8005db8:	4602      	mov	r2, r0
 8005dba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	6a21      	ldr	r1, [r4, #32]
 8005dc0:	47b0      	blx	r6
 8005dc2:	1c43      	adds	r3, r0, #1
 8005dc4:	89a3      	ldrh	r3, [r4, #12]
 8005dc6:	d106      	bne.n	8005dd6 <__sflush_r+0x66>
 8005dc8:	6829      	ldr	r1, [r5, #0]
 8005dca:	291d      	cmp	r1, #29
 8005dcc:	d82c      	bhi.n	8005e28 <__sflush_r+0xb8>
 8005dce:	4a2a      	ldr	r2, [pc, #168]	; (8005e78 <__sflush_r+0x108>)
 8005dd0:	40ca      	lsrs	r2, r1
 8005dd2:	07d6      	lsls	r6, r2, #31
 8005dd4:	d528      	bpl.n	8005e28 <__sflush_r+0xb8>
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	6062      	str	r2, [r4, #4]
 8005dda:	6922      	ldr	r2, [r4, #16]
 8005ddc:	04d9      	lsls	r1, r3, #19
 8005dde:	6022      	str	r2, [r4, #0]
 8005de0:	d504      	bpl.n	8005dec <__sflush_r+0x7c>
 8005de2:	1c42      	adds	r2, r0, #1
 8005de4:	d101      	bne.n	8005dea <__sflush_r+0x7a>
 8005de6:	682b      	ldr	r3, [r5, #0]
 8005de8:	b903      	cbnz	r3, 8005dec <__sflush_r+0x7c>
 8005dea:	6560      	str	r0, [r4, #84]	; 0x54
 8005dec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005dee:	602f      	str	r7, [r5, #0]
 8005df0:	2900      	cmp	r1, #0
 8005df2:	d0ca      	beq.n	8005d8a <__sflush_r+0x1a>
 8005df4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005df8:	4299      	cmp	r1, r3
 8005dfa:	d002      	beq.n	8005e02 <__sflush_r+0x92>
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	f000 f9dd 	bl	80061bc <_free_r>
 8005e02:	2000      	movs	r0, #0
 8005e04:	6360      	str	r0, [r4, #52]	; 0x34
 8005e06:	e7c1      	b.n	8005d8c <__sflush_r+0x1c>
 8005e08:	6a21      	ldr	r1, [r4, #32]
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	4628      	mov	r0, r5
 8005e0e:	47b0      	blx	r6
 8005e10:	1c41      	adds	r1, r0, #1
 8005e12:	d1c7      	bne.n	8005da4 <__sflush_r+0x34>
 8005e14:	682b      	ldr	r3, [r5, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d0c4      	beq.n	8005da4 <__sflush_r+0x34>
 8005e1a:	2b1d      	cmp	r3, #29
 8005e1c:	d001      	beq.n	8005e22 <__sflush_r+0xb2>
 8005e1e:	2b16      	cmp	r3, #22
 8005e20:	d101      	bne.n	8005e26 <__sflush_r+0xb6>
 8005e22:	602f      	str	r7, [r5, #0]
 8005e24:	e7b1      	b.n	8005d8a <__sflush_r+0x1a>
 8005e26:	89a3      	ldrh	r3, [r4, #12]
 8005e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e2c:	81a3      	strh	r3, [r4, #12]
 8005e2e:	e7ad      	b.n	8005d8c <__sflush_r+0x1c>
 8005e30:	690f      	ldr	r7, [r1, #16]
 8005e32:	2f00      	cmp	r7, #0
 8005e34:	d0a9      	beq.n	8005d8a <__sflush_r+0x1a>
 8005e36:	0793      	lsls	r3, r2, #30
 8005e38:	bf18      	it	ne
 8005e3a:	2300      	movne	r3, #0
 8005e3c:	680e      	ldr	r6, [r1, #0]
 8005e3e:	bf08      	it	eq
 8005e40:	694b      	ldreq	r3, [r1, #20]
 8005e42:	eba6 0807 	sub.w	r8, r6, r7
 8005e46:	600f      	str	r7, [r1, #0]
 8005e48:	608b      	str	r3, [r1, #8]
 8005e4a:	f1b8 0f00 	cmp.w	r8, #0
 8005e4e:	dd9c      	ble.n	8005d8a <__sflush_r+0x1a>
 8005e50:	4643      	mov	r3, r8
 8005e52:	463a      	mov	r2, r7
 8005e54:	4628      	mov	r0, r5
 8005e56:	6a21      	ldr	r1, [r4, #32]
 8005e58:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e5a:	47b0      	blx	r6
 8005e5c:	2800      	cmp	r0, #0
 8005e5e:	dc06      	bgt.n	8005e6e <__sflush_r+0xfe>
 8005e60:	89a3      	ldrh	r3, [r4, #12]
 8005e62:	f04f 30ff 	mov.w	r0, #4294967295
 8005e66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e6a:	81a3      	strh	r3, [r4, #12]
 8005e6c:	e78e      	b.n	8005d8c <__sflush_r+0x1c>
 8005e6e:	4407      	add	r7, r0
 8005e70:	eba8 0800 	sub.w	r8, r8, r0
 8005e74:	e7e9      	b.n	8005e4a <__sflush_r+0xda>
 8005e76:	bf00      	nop
 8005e78:	20400001 	.word	0x20400001

08005e7c <_fflush_r>:
 8005e7c:	b538      	push	{r3, r4, r5, lr}
 8005e7e:	690b      	ldr	r3, [r1, #16]
 8005e80:	4605      	mov	r5, r0
 8005e82:	460c      	mov	r4, r1
 8005e84:	b913      	cbnz	r3, 8005e8c <_fflush_r+0x10>
 8005e86:	2500      	movs	r5, #0
 8005e88:	4628      	mov	r0, r5
 8005e8a:	bd38      	pop	{r3, r4, r5, pc}
 8005e8c:	b118      	cbz	r0, 8005e96 <_fflush_r+0x1a>
 8005e8e:	6983      	ldr	r3, [r0, #24]
 8005e90:	b90b      	cbnz	r3, 8005e96 <_fflush_r+0x1a>
 8005e92:	f000 f887 	bl	8005fa4 <__sinit>
 8005e96:	4b14      	ldr	r3, [pc, #80]	; (8005ee8 <_fflush_r+0x6c>)
 8005e98:	429c      	cmp	r4, r3
 8005e9a:	d11b      	bne.n	8005ed4 <_fflush_r+0x58>
 8005e9c:	686c      	ldr	r4, [r5, #4]
 8005e9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d0ef      	beq.n	8005e86 <_fflush_r+0xa>
 8005ea6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ea8:	07d0      	lsls	r0, r2, #31
 8005eaa:	d404      	bmi.n	8005eb6 <_fflush_r+0x3a>
 8005eac:	0599      	lsls	r1, r3, #22
 8005eae:	d402      	bmi.n	8005eb6 <_fflush_r+0x3a>
 8005eb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005eb2:	f000 f915 	bl	80060e0 <__retarget_lock_acquire_recursive>
 8005eb6:	4628      	mov	r0, r5
 8005eb8:	4621      	mov	r1, r4
 8005eba:	f7ff ff59 	bl	8005d70 <__sflush_r>
 8005ebe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ec0:	4605      	mov	r5, r0
 8005ec2:	07da      	lsls	r2, r3, #31
 8005ec4:	d4e0      	bmi.n	8005e88 <_fflush_r+0xc>
 8005ec6:	89a3      	ldrh	r3, [r4, #12]
 8005ec8:	059b      	lsls	r3, r3, #22
 8005eca:	d4dd      	bmi.n	8005e88 <_fflush_r+0xc>
 8005ecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ece:	f000 f908 	bl	80060e2 <__retarget_lock_release_recursive>
 8005ed2:	e7d9      	b.n	8005e88 <_fflush_r+0xc>
 8005ed4:	4b05      	ldr	r3, [pc, #20]	; (8005eec <_fflush_r+0x70>)
 8005ed6:	429c      	cmp	r4, r3
 8005ed8:	d101      	bne.n	8005ede <_fflush_r+0x62>
 8005eda:	68ac      	ldr	r4, [r5, #8]
 8005edc:	e7df      	b.n	8005e9e <_fflush_r+0x22>
 8005ede:	4b04      	ldr	r3, [pc, #16]	; (8005ef0 <_fflush_r+0x74>)
 8005ee0:	429c      	cmp	r4, r3
 8005ee2:	bf08      	it	eq
 8005ee4:	68ec      	ldreq	r4, [r5, #12]
 8005ee6:	e7da      	b.n	8005e9e <_fflush_r+0x22>
 8005ee8:	08007ea8 	.word	0x08007ea8
 8005eec:	08007ec8 	.word	0x08007ec8
 8005ef0:	08007e88 	.word	0x08007e88

08005ef4 <std>:
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	b510      	push	{r4, lr}
 8005ef8:	4604      	mov	r4, r0
 8005efa:	e9c0 3300 	strd	r3, r3, [r0]
 8005efe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f02:	6083      	str	r3, [r0, #8]
 8005f04:	8181      	strh	r1, [r0, #12]
 8005f06:	6643      	str	r3, [r0, #100]	; 0x64
 8005f08:	81c2      	strh	r2, [r0, #14]
 8005f0a:	6183      	str	r3, [r0, #24]
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	2208      	movs	r2, #8
 8005f10:	305c      	adds	r0, #92	; 0x5c
 8005f12:	f7ff fdd9 	bl	8005ac8 <memset>
 8005f16:	4b05      	ldr	r3, [pc, #20]	; (8005f2c <std+0x38>)
 8005f18:	6224      	str	r4, [r4, #32]
 8005f1a:	6263      	str	r3, [r4, #36]	; 0x24
 8005f1c:	4b04      	ldr	r3, [pc, #16]	; (8005f30 <std+0x3c>)
 8005f1e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f20:	4b04      	ldr	r3, [pc, #16]	; (8005f34 <std+0x40>)
 8005f22:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f24:	4b04      	ldr	r3, [pc, #16]	; (8005f38 <std+0x44>)
 8005f26:	6323      	str	r3, [r4, #48]	; 0x30
 8005f28:	bd10      	pop	{r4, pc}
 8005f2a:	bf00      	nop
 8005f2c:	08006c4d 	.word	0x08006c4d
 8005f30:	08006c6f 	.word	0x08006c6f
 8005f34:	08006ca7 	.word	0x08006ca7
 8005f38:	08006ccb 	.word	0x08006ccb

08005f3c <_cleanup_r>:
 8005f3c:	4901      	ldr	r1, [pc, #4]	; (8005f44 <_cleanup_r+0x8>)
 8005f3e:	f000 b8af 	b.w	80060a0 <_fwalk_reent>
 8005f42:	bf00      	nop
 8005f44:	08005e7d 	.word	0x08005e7d

08005f48 <__sfmoreglue>:
 8005f48:	b570      	push	{r4, r5, r6, lr}
 8005f4a:	2568      	movs	r5, #104	; 0x68
 8005f4c:	1e4a      	subs	r2, r1, #1
 8005f4e:	4355      	muls	r5, r2
 8005f50:	460e      	mov	r6, r1
 8005f52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005f56:	f000 f97d 	bl	8006254 <_malloc_r>
 8005f5a:	4604      	mov	r4, r0
 8005f5c:	b140      	cbz	r0, 8005f70 <__sfmoreglue+0x28>
 8005f5e:	2100      	movs	r1, #0
 8005f60:	e9c0 1600 	strd	r1, r6, [r0]
 8005f64:	300c      	adds	r0, #12
 8005f66:	60a0      	str	r0, [r4, #8]
 8005f68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005f6c:	f7ff fdac 	bl	8005ac8 <memset>
 8005f70:	4620      	mov	r0, r4
 8005f72:	bd70      	pop	{r4, r5, r6, pc}

08005f74 <__sfp_lock_acquire>:
 8005f74:	4801      	ldr	r0, [pc, #4]	; (8005f7c <__sfp_lock_acquire+0x8>)
 8005f76:	f000 b8b3 	b.w	80060e0 <__retarget_lock_acquire_recursive>
 8005f7a:	bf00      	nop
 8005f7c:	20000948 	.word	0x20000948

08005f80 <__sfp_lock_release>:
 8005f80:	4801      	ldr	r0, [pc, #4]	; (8005f88 <__sfp_lock_release+0x8>)
 8005f82:	f000 b8ae 	b.w	80060e2 <__retarget_lock_release_recursive>
 8005f86:	bf00      	nop
 8005f88:	20000948 	.word	0x20000948

08005f8c <__sinit_lock_acquire>:
 8005f8c:	4801      	ldr	r0, [pc, #4]	; (8005f94 <__sinit_lock_acquire+0x8>)
 8005f8e:	f000 b8a7 	b.w	80060e0 <__retarget_lock_acquire_recursive>
 8005f92:	bf00      	nop
 8005f94:	20000943 	.word	0x20000943

08005f98 <__sinit_lock_release>:
 8005f98:	4801      	ldr	r0, [pc, #4]	; (8005fa0 <__sinit_lock_release+0x8>)
 8005f9a:	f000 b8a2 	b.w	80060e2 <__retarget_lock_release_recursive>
 8005f9e:	bf00      	nop
 8005fa0:	20000943 	.word	0x20000943

08005fa4 <__sinit>:
 8005fa4:	b510      	push	{r4, lr}
 8005fa6:	4604      	mov	r4, r0
 8005fa8:	f7ff fff0 	bl	8005f8c <__sinit_lock_acquire>
 8005fac:	69a3      	ldr	r3, [r4, #24]
 8005fae:	b11b      	cbz	r3, 8005fb8 <__sinit+0x14>
 8005fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fb4:	f7ff bff0 	b.w	8005f98 <__sinit_lock_release>
 8005fb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005fbc:	6523      	str	r3, [r4, #80]	; 0x50
 8005fbe:	4b13      	ldr	r3, [pc, #76]	; (800600c <__sinit+0x68>)
 8005fc0:	4a13      	ldr	r2, [pc, #76]	; (8006010 <__sinit+0x6c>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	62a2      	str	r2, [r4, #40]	; 0x28
 8005fc6:	42a3      	cmp	r3, r4
 8005fc8:	bf08      	it	eq
 8005fca:	2301      	moveq	r3, #1
 8005fcc:	4620      	mov	r0, r4
 8005fce:	bf08      	it	eq
 8005fd0:	61a3      	streq	r3, [r4, #24]
 8005fd2:	f000 f81f 	bl	8006014 <__sfp>
 8005fd6:	6060      	str	r0, [r4, #4]
 8005fd8:	4620      	mov	r0, r4
 8005fda:	f000 f81b 	bl	8006014 <__sfp>
 8005fde:	60a0      	str	r0, [r4, #8]
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	f000 f817 	bl	8006014 <__sfp>
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	2104      	movs	r1, #4
 8005fea:	60e0      	str	r0, [r4, #12]
 8005fec:	6860      	ldr	r0, [r4, #4]
 8005fee:	f7ff ff81 	bl	8005ef4 <std>
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	2109      	movs	r1, #9
 8005ff6:	68a0      	ldr	r0, [r4, #8]
 8005ff8:	f7ff ff7c 	bl	8005ef4 <std>
 8005ffc:	2202      	movs	r2, #2
 8005ffe:	2112      	movs	r1, #18
 8006000:	68e0      	ldr	r0, [r4, #12]
 8006002:	f7ff ff77 	bl	8005ef4 <std>
 8006006:	2301      	movs	r3, #1
 8006008:	61a3      	str	r3, [r4, #24]
 800600a:	e7d1      	b.n	8005fb0 <__sinit+0xc>
 800600c:	08007e84 	.word	0x08007e84
 8006010:	08005f3d 	.word	0x08005f3d

08006014 <__sfp>:
 8006014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006016:	4607      	mov	r7, r0
 8006018:	f7ff ffac 	bl	8005f74 <__sfp_lock_acquire>
 800601c:	4b1e      	ldr	r3, [pc, #120]	; (8006098 <__sfp+0x84>)
 800601e:	681e      	ldr	r6, [r3, #0]
 8006020:	69b3      	ldr	r3, [r6, #24]
 8006022:	b913      	cbnz	r3, 800602a <__sfp+0x16>
 8006024:	4630      	mov	r0, r6
 8006026:	f7ff ffbd 	bl	8005fa4 <__sinit>
 800602a:	3648      	adds	r6, #72	; 0x48
 800602c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006030:	3b01      	subs	r3, #1
 8006032:	d503      	bpl.n	800603c <__sfp+0x28>
 8006034:	6833      	ldr	r3, [r6, #0]
 8006036:	b30b      	cbz	r3, 800607c <__sfp+0x68>
 8006038:	6836      	ldr	r6, [r6, #0]
 800603a:	e7f7      	b.n	800602c <__sfp+0x18>
 800603c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006040:	b9d5      	cbnz	r5, 8006078 <__sfp+0x64>
 8006042:	4b16      	ldr	r3, [pc, #88]	; (800609c <__sfp+0x88>)
 8006044:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006048:	60e3      	str	r3, [r4, #12]
 800604a:	6665      	str	r5, [r4, #100]	; 0x64
 800604c:	f000 f847 	bl	80060de <__retarget_lock_init_recursive>
 8006050:	f7ff ff96 	bl	8005f80 <__sfp_lock_release>
 8006054:	2208      	movs	r2, #8
 8006056:	4629      	mov	r1, r5
 8006058:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800605c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006060:	6025      	str	r5, [r4, #0]
 8006062:	61a5      	str	r5, [r4, #24]
 8006064:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006068:	f7ff fd2e 	bl	8005ac8 <memset>
 800606c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006070:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006074:	4620      	mov	r0, r4
 8006076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006078:	3468      	adds	r4, #104	; 0x68
 800607a:	e7d9      	b.n	8006030 <__sfp+0x1c>
 800607c:	2104      	movs	r1, #4
 800607e:	4638      	mov	r0, r7
 8006080:	f7ff ff62 	bl	8005f48 <__sfmoreglue>
 8006084:	4604      	mov	r4, r0
 8006086:	6030      	str	r0, [r6, #0]
 8006088:	2800      	cmp	r0, #0
 800608a:	d1d5      	bne.n	8006038 <__sfp+0x24>
 800608c:	f7ff ff78 	bl	8005f80 <__sfp_lock_release>
 8006090:	230c      	movs	r3, #12
 8006092:	603b      	str	r3, [r7, #0]
 8006094:	e7ee      	b.n	8006074 <__sfp+0x60>
 8006096:	bf00      	nop
 8006098:	08007e84 	.word	0x08007e84
 800609c:	ffff0001 	.word	0xffff0001

080060a0 <_fwalk_reent>:
 80060a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060a4:	4606      	mov	r6, r0
 80060a6:	4688      	mov	r8, r1
 80060a8:	2700      	movs	r7, #0
 80060aa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80060ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80060b2:	f1b9 0901 	subs.w	r9, r9, #1
 80060b6:	d505      	bpl.n	80060c4 <_fwalk_reent+0x24>
 80060b8:	6824      	ldr	r4, [r4, #0]
 80060ba:	2c00      	cmp	r4, #0
 80060bc:	d1f7      	bne.n	80060ae <_fwalk_reent+0xe>
 80060be:	4638      	mov	r0, r7
 80060c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060c4:	89ab      	ldrh	r3, [r5, #12]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d907      	bls.n	80060da <_fwalk_reent+0x3a>
 80060ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060ce:	3301      	adds	r3, #1
 80060d0:	d003      	beq.n	80060da <_fwalk_reent+0x3a>
 80060d2:	4629      	mov	r1, r5
 80060d4:	4630      	mov	r0, r6
 80060d6:	47c0      	blx	r8
 80060d8:	4307      	orrs	r7, r0
 80060da:	3568      	adds	r5, #104	; 0x68
 80060dc:	e7e9      	b.n	80060b2 <_fwalk_reent+0x12>

080060de <__retarget_lock_init_recursive>:
 80060de:	4770      	bx	lr

080060e0 <__retarget_lock_acquire_recursive>:
 80060e0:	4770      	bx	lr

080060e2 <__retarget_lock_release_recursive>:
 80060e2:	4770      	bx	lr

080060e4 <__swhatbuf_r>:
 80060e4:	b570      	push	{r4, r5, r6, lr}
 80060e6:	460e      	mov	r6, r1
 80060e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060ec:	4614      	mov	r4, r2
 80060ee:	2900      	cmp	r1, #0
 80060f0:	461d      	mov	r5, r3
 80060f2:	b096      	sub	sp, #88	; 0x58
 80060f4:	da07      	bge.n	8006106 <__swhatbuf_r+0x22>
 80060f6:	2300      	movs	r3, #0
 80060f8:	602b      	str	r3, [r5, #0]
 80060fa:	89b3      	ldrh	r3, [r6, #12]
 80060fc:	061a      	lsls	r2, r3, #24
 80060fe:	d410      	bmi.n	8006122 <__swhatbuf_r+0x3e>
 8006100:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006104:	e00e      	b.n	8006124 <__swhatbuf_r+0x40>
 8006106:	466a      	mov	r2, sp
 8006108:	f000 fec6 	bl	8006e98 <_fstat_r>
 800610c:	2800      	cmp	r0, #0
 800610e:	dbf2      	blt.n	80060f6 <__swhatbuf_r+0x12>
 8006110:	9a01      	ldr	r2, [sp, #4]
 8006112:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006116:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800611a:	425a      	negs	r2, r3
 800611c:	415a      	adcs	r2, r3
 800611e:	602a      	str	r2, [r5, #0]
 8006120:	e7ee      	b.n	8006100 <__swhatbuf_r+0x1c>
 8006122:	2340      	movs	r3, #64	; 0x40
 8006124:	2000      	movs	r0, #0
 8006126:	6023      	str	r3, [r4, #0]
 8006128:	b016      	add	sp, #88	; 0x58
 800612a:	bd70      	pop	{r4, r5, r6, pc}

0800612c <__smakebuf_r>:
 800612c:	898b      	ldrh	r3, [r1, #12]
 800612e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006130:	079d      	lsls	r5, r3, #30
 8006132:	4606      	mov	r6, r0
 8006134:	460c      	mov	r4, r1
 8006136:	d507      	bpl.n	8006148 <__smakebuf_r+0x1c>
 8006138:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800613c:	6023      	str	r3, [r4, #0]
 800613e:	6123      	str	r3, [r4, #16]
 8006140:	2301      	movs	r3, #1
 8006142:	6163      	str	r3, [r4, #20]
 8006144:	b002      	add	sp, #8
 8006146:	bd70      	pop	{r4, r5, r6, pc}
 8006148:	466a      	mov	r2, sp
 800614a:	ab01      	add	r3, sp, #4
 800614c:	f7ff ffca 	bl	80060e4 <__swhatbuf_r>
 8006150:	9900      	ldr	r1, [sp, #0]
 8006152:	4605      	mov	r5, r0
 8006154:	4630      	mov	r0, r6
 8006156:	f000 f87d 	bl	8006254 <_malloc_r>
 800615a:	b948      	cbnz	r0, 8006170 <__smakebuf_r+0x44>
 800615c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006160:	059a      	lsls	r2, r3, #22
 8006162:	d4ef      	bmi.n	8006144 <__smakebuf_r+0x18>
 8006164:	f023 0303 	bic.w	r3, r3, #3
 8006168:	f043 0302 	orr.w	r3, r3, #2
 800616c:	81a3      	strh	r3, [r4, #12]
 800616e:	e7e3      	b.n	8006138 <__smakebuf_r+0xc>
 8006170:	4b0d      	ldr	r3, [pc, #52]	; (80061a8 <__smakebuf_r+0x7c>)
 8006172:	62b3      	str	r3, [r6, #40]	; 0x28
 8006174:	89a3      	ldrh	r3, [r4, #12]
 8006176:	6020      	str	r0, [r4, #0]
 8006178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800617c:	81a3      	strh	r3, [r4, #12]
 800617e:	9b00      	ldr	r3, [sp, #0]
 8006180:	6120      	str	r0, [r4, #16]
 8006182:	6163      	str	r3, [r4, #20]
 8006184:	9b01      	ldr	r3, [sp, #4]
 8006186:	b15b      	cbz	r3, 80061a0 <__smakebuf_r+0x74>
 8006188:	4630      	mov	r0, r6
 800618a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800618e:	f000 fe95 	bl	8006ebc <_isatty_r>
 8006192:	b128      	cbz	r0, 80061a0 <__smakebuf_r+0x74>
 8006194:	89a3      	ldrh	r3, [r4, #12]
 8006196:	f023 0303 	bic.w	r3, r3, #3
 800619a:	f043 0301 	orr.w	r3, r3, #1
 800619e:	81a3      	strh	r3, [r4, #12]
 80061a0:	89a0      	ldrh	r0, [r4, #12]
 80061a2:	4305      	orrs	r5, r0
 80061a4:	81a5      	strh	r5, [r4, #12]
 80061a6:	e7cd      	b.n	8006144 <__smakebuf_r+0x18>
 80061a8:	08005f3d 	.word	0x08005f3d

080061ac <malloc>:
 80061ac:	4b02      	ldr	r3, [pc, #8]	; (80061b8 <malloc+0xc>)
 80061ae:	4601      	mov	r1, r0
 80061b0:	6818      	ldr	r0, [r3, #0]
 80061b2:	f000 b84f 	b.w	8006254 <_malloc_r>
 80061b6:	bf00      	nop
 80061b8:	20000024 	.word	0x20000024

080061bc <_free_r>:
 80061bc:	b538      	push	{r3, r4, r5, lr}
 80061be:	4605      	mov	r5, r0
 80061c0:	2900      	cmp	r1, #0
 80061c2:	d043      	beq.n	800624c <_free_r+0x90>
 80061c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061c8:	1f0c      	subs	r4, r1, #4
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	bfb8      	it	lt
 80061ce:	18e4      	addlt	r4, r4, r3
 80061d0:	f000 fea4 	bl	8006f1c <__malloc_lock>
 80061d4:	4a1e      	ldr	r2, [pc, #120]	; (8006250 <_free_r+0x94>)
 80061d6:	6813      	ldr	r3, [r2, #0]
 80061d8:	4610      	mov	r0, r2
 80061da:	b933      	cbnz	r3, 80061ea <_free_r+0x2e>
 80061dc:	6063      	str	r3, [r4, #4]
 80061de:	6014      	str	r4, [r2, #0]
 80061e0:	4628      	mov	r0, r5
 80061e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061e6:	f000 be9f 	b.w	8006f28 <__malloc_unlock>
 80061ea:	42a3      	cmp	r3, r4
 80061ec:	d90a      	bls.n	8006204 <_free_r+0x48>
 80061ee:	6821      	ldr	r1, [r4, #0]
 80061f0:	1862      	adds	r2, r4, r1
 80061f2:	4293      	cmp	r3, r2
 80061f4:	bf01      	itttt	eq
 80061f6:	681a      	ldreq	r2, [r3, #0]
 80061f8:	685b      	ldreq	r3, [r3, #4]
 80061fa:	1852      	addeq	r2, r2, r1
 80061fc:	6022      	streq	r2, [r4, #0]
 80061fe:	6063      	str	r3, [r4, #4]
 8006200:	6004      	str	r4, [r0, #0]
 8006202:	e7ed      	b.n	80061e0 <_free_r+0x24>
 8006204:	461a      	mov	r2, r3
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	b10b      	cbz	r3, 800620e <_free_r+0x52>
 800620a:	42a3      	cmp	r3, r4
 800620c:	d9fa      	bls.n	8006204 <_free_r+0x48>
 800620e:	6811      	ldr	r1, [r2, #0]
 8006210:	1850      	adds	r0, r2, r1
 8006212:	42a0      	cmp	r0, r4
 8006214:	d10b      	bne.n	800622e <_free_r+0x72>
 8006216:	6820      	ldr	r0, [r4, #0]
 8006218:	4401      	add	r1, r0
 800621a:	1850      	adds	r0, r2, r1
 800621c:	4283      	cmp	r3, r0
 800621e:	6011      	str	r1, [r2, #0]
 8006220:	d1de      	bne.n	80061e0 <_free_r+0x24>
 8006222:	6818      	ldr	r0, [r3, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	4401      	add	r1, r0
 8006228:	6011      	str	r1, [r2, #0]
 800622a:	6053      	str	r3, [r2, #4]
 800622c:	e7d8      	b.n	80061e0 <_free_r+0x24>
 800622e:	d902      	bls.n	8006236 <_free_r+0x7a>
 8006230:	230c      	movs	r3, #12
 8006232:	602b      	str	r3, [r5, #0]
 8006234:	e7d4      	b.n	80061e0 <_free_r+0x24>
 8006236:	6820      	ldr	r0, [r4, #0]
 8006238:	1821      	adds	r1, r4, r0
 800623a:	428b      	cmp	r3, r1
 800623c:	bf01      	itttt	eq
 800623e:	6819      	ldreq	r1, [r3, #0]
 8006240:	685b      	ldreq	r3, [r3, #4]
 8006242:	1809      	addeq	r1, r1, r0
 8006244:	6021      	streq	r1, [r4, #0]
 8006246:	6063      	str	r3, [r4, #4]
 8006248:	6054      	str	r4, [r2, #4]
 800624a:	e7c9      	b.n	80061e0 <_free_r+0x24>
 800624c:	bd38      	pop	{r3, r4, r5, pc}
 800624e:	bf00      	nop
 8006250:	200004e0 	.word	0x200004e0

08006254 <_malloc_r>:
 8006254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006256:	1ccd      	adds	r5, r1, #3
 8006258:	f025 0503 	bic.w	r5, r5, #3
 800625c:	3508      	adds	r5, #8
 800625e:	2d0c      	cmp	r5, #12
 8006260:	bf38      	it	cc
 8006262:	250c      	movcc	r5, #12
 8006264:	2d00      	cmp	r5, #0
 8006266:	4606      	mov	r6, r0
 8006268:	db01      	blt.n	800626e <_malloc_r+0x1a>
 800626a:	42a9      	cmp	r1, r5
 800626c:	d903      	bls.n	8006276 <_malloc_r+0x22>
 800626e:	230c      	movs	r3, #12
 8006270:	6033      	str	r3, [r6, #0]
 8006272:	2000      	movs	r0, #0
 8006274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006276:	f000 fe51 	bl	8006f1c <__malloc_lock>
 800627a:	4921      	ldr	r1, [pc, #132]	; (8006300 <_malloc_r+0xac>)
 800627c:	680a      	ldr	r2, [r1, #0]
 800627e:	4614      	mov	r4, r2
 8006280:	b99c      	cbnz	r4, 80062aa <_malloc_r+0x56>
 8006282:	4f20      	ldr	r7, [pc, #128]	; (8006304 <_malloc_r+0xb0>)
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	b923      	cbnz	r3, 8006292 <_malloc_r+0x3e>
 8006288:	4621      	mov	r1, r4
 800628a:	4630      	mov	r0, r6
 800628c:	f000 fcce 	bl	8006c2c <_sbrk_r>
 8006290:	6038      	str	r0, [r7, #0]
 8006292:	4629      	mov	r1, r5
 8006294:	4630      	mov	r0, r6
 8006296:	f000 fcc9 	bl	8006c2c <_sbrk_r>
 800629a:	1c43      	adds	r3, r0, #1
 800629c:	d123      	bne.n	80062e6 <_malloc_r+0x92>
 800629e:	230c      	movs	r3, #12
 80062a0:	4630      	mov	r0, r6
 80062a2:	6033      	str	r3, [r6, #0]
 80062a4:	f000 fe40 	bl	8006f28 <__malloc_unlock>
 80062a8:	e7e3      	b.n	8006272 <_malloc_r+0x1e>
 80062aa:	6823      	ldr	r3, [r4, #0]
 80062ac:	1b5b      	subs	r3, r3, r5
 80062ae:	d417      	bmi.n	80062e0 <_malloc_r+0x8c>
 80062b0:	2b0b      	cmp	r3, #11
 80062b2:	d903      	bls.n	80062bc <_malloc_r+0x68>
 80062b4:	6023      	str	r3, [r4, #0]
 80062b6:	441c      	add	r4, r3
 80062b8:	6025      	str	r5, [r4, #0]
 80062ba:	e004      	b.n	80062c6 <_malloc_r+0x72>
 80062bc:	6863      	ldr	r3, [r4, #4]
 80062be:	42a2      	cmp	r2, r4
 80062c0:	bf0c      	ite	eq
 80062c2:	600b      	streq	r3, [r1, #0]
 80062c4:	6053      	strne	r3, [r2, #4]
 80062c6:	4630      	mov	r0, r6
 80062c8:	f000 fe2e 	bl	8006f28 <__malloc_unlock>
 80062cc:	f104 000b 	add.w	r0, r4, #11
 80062d0:	1d23      	adds	r3, r4, #4
 80062d2:	f020 0007 	bic.w	r0, r0, #7
 80062d6:	1ac2      	subs	r2, r0, r3
 80062d8:	d0cc      	beq.n	8006274 <_malloc_r+0x20>
 80062da:	1a1b      	subs	r3, r3, r0
 80062dc:	50a3      	str	r3, [r4, r2]
 80062de:	e7c9      	b.n	8006274 <_malloc_r+0x20>
 80062e0:	4622      	mov	r2, r4
 80062e2:	6864      	ldr	r4, [r4, #4]
 80062e4:	e7cc      	b.n	8006280 <_malloc_r+0x2c>
 80062e6:	1cc4      	adds	r4, r0, #3
 80062e8:	f024 0403 	bic.w	r4, r4, #3
 80062ec:	42a0      	cmp	r0, r4
 80062ee:	d0e3      	beq.n	80062b8 <_malloc_r+0x64>
 80062f0:	1a21      	subs	r1, r4, r0
 80062f2:	4630      	mov	r0, r6
 80062f4:	f000 fc9a 	bl	8006c2c <_sbrk_r>
 80062f8:	3001      	adds	r0, #1
 80062fa:	d1dd      	bne.n	80062b8 <_malloc_r+0x64>
 80062fc:	e7cf      	b.n	800629e <_malloc_r+0x4a>
 80062fe:	bf00      	nop
 8006300:	200004e0 	.word	0x200004e0
 8006304:	200004e4 	.word	0x200004e4

08006308 <__ssputs_r>:
 8006308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800630c:	688e      	ldr	r6, [r1, #8]
 800630e:	4682      	mov	sl, r0
 8006310:	429e      	cmp	r6, r3
 8006312:	460c      	mov	r4, r1
 8006314:	4690      	mov	r8, r2
 8006316:	461f      	mov	r7, r3
 8006318:	d838      	bhi.n	800638c <__ssputs_r+0x84>
 800631a:	898a      	ldrh	r2, [r1, #12]
 800631c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006320:	d032      	beq.n	8006388 <__ssputs_r+0x80>
 8006322:	6825      	ldr	r5, [r4, #0]
 8006324:	6909      	ldr	r1, [r1, #16]
 8006326:	3301      	adds	r3, #1
 8006328:	eba5 0901 	sub.w	r9, r5, r1
 800632c:	6965      	ldr	r5, [r4, #20]
 800632e:	444b      	add	r3, r9
 8006330:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006334:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006338:	106d      	asrs	r5, r5, #1
 800633a:	429d      	cmp	r5, r3
 800633c:	bf38      	it	cc
 800633e:	461d      	movcc	r5, r3
 8006340:	0553      	lsls	r3, r2, #21
 8006342:	d531      	bpl.n	80063a8 <__ssputs_r+0xa0>
 8006344:	4629      	mov	r1, r5
 8006346:	f7ff ff85 	bl	8006254 <_malloc_r>
 800634a:	4606      	mov	r6, r0
 800634c:	b950      	cbnz	r0, 8006364 <__ssputs_r+0x5c>
 800634e:	230c      	movs	r3, #12
 8006350:	f04f 30ff 	mov.w	r0, #4294967295
 8006354:	f8ca 3000 	str.w	r3, [sl]
 8006358:	89a3      	ldrh	r3, [r4, #12]
 800635a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800635e:	81a3      	strh	r3, [r4, #12]
 8006360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006364:	464a      	mov	r2, r9
 8006366:	6921      	ldr	r1, [r4, #16]
 8006368:	f7ff fb86 	bl	8005a78 <memcpy>
 800636c:	89a3      	ldrh	r3, [r4, #12]
 800636e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006376:	81a3      	strh	r3, [r4, #12]
 8006378:	6126      	str	r6, [r4, #16]
 800637a:	444e      	add	r6, r9
 800637c:	6026      	str	r6, [r4, #0]
 800637e:	463e      	mov	r6, r7
 8006380:	6165      	str	r5, [r4, #20]
 8006382:	eba5 0509 	sub.w	r5, r5, r9
 8006386:	60a5      	str	r5, [r4, #8]
 8006388:	42be      	cmp	r6, r7
 800638a:	d900      	bls.n	800638e <__ssputs_r+0x86>
 800638c:	463e      	mov	r6, r7
 800638e:	4632      	mov	r2, r6
 8006390:	4641      	mov	r1, r8
 8006392:	6820      	ldr	r0, [r4, #0]
 8006394:	f7ff fb7e 	bl	8005a94 <memmove>
 8006398:	68a3      	ldr	r3, [r4, #8]
 800639a:	6822      	ldr	r2, [r4, #0]
 800639c:	1b9b      	subs	r3, r3, r6
 800639e:	4432      	add	r2, r6
 80063a0:	2000      	movs	r0, #0
 80063a2:	60a3      	str	r3, [r4, #8]
 80063a4:	6022      	str	r2, [r4, #0]
 80063a6:	e7db      	b.n	8006360 <__ssputs_r+0x58>
 80063a8:	462a      	mov	r2, r5
 80063aa:	f000 fdc3 	bl	8006f34 <_realloc_r>
 80063ae:	4606      	mov	r6, r0
 80063b0:	2800      	cmp	r0, #0
 80063b2:	d1e1      	bne.n	8006378 <__ssputs_r+0x70>
 80063b4:	4650      	mov	r0, sl
 80063b6:	6921      	ldr	r1, [r4, #16]
 80063b8:	f7ff ff00 	bl	80061bc <_free_r>
 80063bc:	e7c7      	b.n	800634e <__ssputs_r+0x46>
	...

080063c0 <_svfiprintf_r>:
 80063c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c4:	4698      	mov	r8, r3
 80063c6:	898b      	ldrh	r3, [r1, #12]
 80063c8:	4607      	mov	r7, r0
 80063ca:	061b      	lsls	r3, r3, #24
 80063cc:	460d      	mov	r5, r1
 80063ce:	4614      	mov	r4, r2
 80063d0:	b09d      	sub	sp, #116	; 0x74
 80063d2:	d50e      	bpl.n	80063f2 <_svfiprintf_r+0x32>
 80063d4:	690b      	ldr	r3, [r1, #16]
 80063d6:	b963      	cbnz	r3, 80063f2 <_svfiprintf_r+0x32>
 80063d8:	2140      	movs	r1, #64	; 0x40
 80063da:	f7ff ff3b 	bl	8006254 <_malloc_r>
 80063de:	6028      	str	r0, [r5, #0]
 80063e0:	6128      	str	r0, [r5, #16]
 80063e2:	b920      	cbnz	r0, 80063ee <_svfiprintf_r+0x2e>
 80063e4:	230c      	movs	r3, #12
 80063e6:	603b      	str	r3, [r7, #0]
 80063e8:	f04f 30ff 	mov.w	r0, #4294967295
 80063ec:	e0d1      	b.n	8006592 <_svfiprintf_r+0x1d2>
 80063ee:	2340      	movs	r3, #64	; 0x40
 80063f0:	616b      	str	r3, [r5, #20]
 80063f2:	2300      	movs	r3, #0
 80063f4:	9309      	str	r3, [sp, #36]	; 0x24
 80063f6:	2320      	movs	r3, #32
 80063f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063fc:	2330      	movs	r3, #48	; 0x30
 80063fe:	f04f 0901 	mov.w	r9, #1
 8006402:	f8cd 800c 	str.w	r8, [sp, #12]
 8006406:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80065ac <_svfiprintf_r+0x1ec>
 800640a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800640e:	4623      	mov	r3, r4
 8006410:	469a      	mov	sl, r3
 8006412:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006416:	b10a      	cbz	r2, 800641c <_svfiprintf_r+0x5c>
 8006418:	2a25      	cmp	r2, #37	; 0x25
 800641a:	d1f9      	bne.n	8006410 <_svfiprintf_r+0x50>
 800641c:	ebba 0b04 	subs.w	fp, sl, r4
 8006420:	d00b      	beq.n	800643a <_svfiprintf_r+0x7a>
 8006422:	465b      	mov	r3, fp
 8006424:	4622      	mov	r2, r4
 8006426:	4629      	mov	r1, r5
 8006428:	4638      	mov	r0, r7
 800642a:	f7ff ff6d 	bl	8006308 <__ssputs_r>
 800642e:	3001      	adds	r0, #1
 8006430:	f000 80aa 	beq.w	8006588 <_svfiprintf_r+0x1c8>
 8006434:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006436:	445a      	add	r2, fp
 8006438:	9209      	str	r2, [sp, #36]	; 0x24
 800643a:	f89a 3000 	ldrb.w	r3, [sl]
 800643e:	2b00      	cmp	r3, #0
 8006440:	f000 80a2 	beq.w	8006588 <_svfiprintf_r+0x1c8>
 8006444:	2300      	movs	r3, #0
 8006446:	f04f 32ff 	mov.w	r2, #4294967295
 800644a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800644e:	f10a 0a01 	add.w	sl, sl, #1
 8006452:	9304      	str	r3, [sp, #16]
 8006454:	9307      	str	r3, [sp, #28]
 8006456:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800645a:	931a      	str	r3, [sp, #104]	; 0x68
 800645c:	4654      	mov	r4, sl
 800645e:	2205      	movs	r2, #5
 8006460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006464:	4851      	ldr	r0, [pc, #324]	; (80065ac <_svfiprintf_r+0x1ec>)
 8006466:	f000 fd4b 	bl	8006f00 <memchr>
 800646a:	9a04      	ldr	r2, [sp, #16]
 800646c:	b9d8      	cbnz	r0, 80064a6 <_svfiprintf_r+0xe6>
 800646e:	06d0      	lsls	r0, r2, #27
 8006470:	bf44      	itt	mi
 8006472:	2320      	movmi	r3, #32
 8006474:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006478:	0711      	lsls	r1, r2, #28
 800647a:	bf44      	itt	mi
 800647c:	232b      	movmi	r3, #43	; 0x2b
 800647e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006482:	f89a 3000 	ldrb.w	r3, [sl]
 8006486:	2b2a      	cmp	r3, #42	; 0x2a
 8006488:	d015      	beq.n	80064b6 <_svfiprintf_r+0xf6>
 800648a:	4654      	mov	r4, sl
 800648c:	2000      	movs	r0, #0
 800648e:	f04f 0c0a 	mov.w	ip, #10
 8006492:	9a07      	ldr	r2, [sp, #28]
 8006494:	4621      	mov	r1, r4
 8006496:	f811 3b01 	ldrb.w	r3, [r1], #1
 800649a:	3b30      	subs	r3, #48	; 0x30
 800649c:	2b09      	cmp	r3, #9
 800649e:	d94e      	bls.n	800653e <_svfiprintf_r+0x17e>
 80064a0:	b1b0      	cbz	r0, 80064d0 <_svfiprintf_r+0x110>
 80064a2:	9207      	str	r2, [sp, #28]
 80064a4:	e014      	b.n	80064d0 <_svfiprintf_r+0x110>
 80064a6:	eba0 0308 	sub.w	r3, r0, r8
 80064aa:	fa09 f303 	lsl.w	r3, r9, r3
 80064ae:	4313      	orrs	r3, r2
 80064b0:	46a2      	mov	sl, r4
 80064b2:	9304      	str	r3, [sp, #16]
 80064b4:	e7d2      	b.n	800645c <_svfiprintf_r+0x9c>
 80064b6:	9b03      	ldr	r3, [sp, #12]
 80064b8:	1d19      	adds	r1, r3, #4
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	9103      	str	r1, [sp, #12]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	bfbb      	ittet	lt
 80064c2:	425b      	neglt	r3, r3
 80064c4:	f042 0202 	orrlt.w	r2, r2, #2
 80064c8:	9307      	strge	r3, [sp, #28]
 80064ca:	9307      	strlt	r3, [sp, #28]
 80064cc:	bfb8      	it	lt
 80064ce:	9204      	strlt	r2, [sp, #16]
 80064d0:	7823      	ldrb	r3, [r4, #0]
 80064d2:	2b2e      	cmp	r3, #46	; 0x2e
 80064d4:	d10c      	bne.n	80064f0 <_svfiprintf_r+0x130>
 80064d6:	7863      	ldrb	r3, [r4, #1]
 80064d8:	2b2a      	cmp	r3, #42	; 0x2a
 80064da:	d135      	bne.n	8006548 <_svfiprintf_r+0x188>
 80064dc:	9b03      	ldr	r3, [sp, #12]
 80064de:	3402      	adds	r4, #2
 80064e0:	1d1a      	adds	r2, r3, #4
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	9203      	str	r2, [sp, #12]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	bfb8      	it	lt
 80064ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80064ee:	9305      	str	r3, [sp, #20]
 80064f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80065bc <_svfiprintf_r+0x1fc>
 80064f4:	2203      	movs	r2, #3
 80064f6:	4650      	mov	r0, sl
 80064f8:	7821      	ldrb	r1, [r4, #0]
 80064fa:	f000 fd01 	bl	8006f00 <memchr>
 80064fe:	b140      	cbz	r0, 8006512 <_svfiprintf_r+0x152>
 8006500:	2340      	movs	r3, #64	; 0x40
 8006502:	eba0 000a 	sub.w	r0, r0, sl
 8006506:	fa03 f000 	lsl.w	r0, r3, r0
 800650a:	9b04      	ldr	r3, [sp, #16]
 800650c:	3401      	adds	r4, #1
 800650e:	4303      	orrs	r3, r0
 8006510:	9304      	str	r3, [sp, #16]
 8006512:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006516:	2206      	movs	r2, #6
 8006518:	4825      	ldr	r0, [pc, #148]	; (80065b0 <_svfiprintf_r+0x1f0>)
 800651a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800651e:	f000 fcef 	bl	8006f00 <memchr>
 8006522:	2800      	cmp	r0, #0
 8006524:	d038      	beq.n	8006598 <_svfiprintf_r+0x1d8>
 8006526:	4b23      	ldr	r3, [pc, #140]	; (80065b4 <_svfiprintf_r+0x1f4>)
 8006528:	bb1b      	cbnz	r3, 8006572 <_svfiprintf_r+0x1b2>
 800652a:	9b03      	ldr	r3, [sp, #12]
 800652c:	3307      	adds	r3, #7
 800652e:	f023 0307 	bic.w	r3, r3, #7
 8006532:	3308      	adds	r3, #8
 8006534:	9303      	str	r3, [sp, #12]
 8006536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006538:	4433      	add	r3, r6
 800653a:	9309      	str	r3, [sp, #36]	; 0x24
 800653c:	e767      	b.n	800640e <_svfiprintf_r+0x4e>
 800653e:	460c      	mov	r4, r1
 8006540:	2001      	movs	r0, #1
 8006542:	fb0c 3202 	mla	r2, ip, r2, r3
 8006546:	e7a5      	b.n	8006494 <_svfiprintf_r+0xd4>
 8006548:	2300      	movs	r3, #0
 800654a:	f04f 0c0a 	mov.w	ip, #10
 800654e:	4619      	mov	r1, r3
 8006550:	3401      	adds	r4, #1
 8006552:	9305      	str	r3, [sp, #20]
 8006554:	4620      	mov	r0, r4
 8006556:	f810 2b01 	ldrb.w	r2, [r0], #1
 800655a:	3a30      	subs	r2, #48	; 0x30
 800655c:	2a09      	cmp	r2, #9
 800655e:	d903      	bls.n	8006568 <_svfiprintf_r+0x1a8>
 8006560:	2b00      	cmp	r3, #0
 8006562:	d0c5      	beq.n	80064f0 <_svfiprintf_r+0x130>
 8006564:	9105      	str	r1, [sp, #20]
 8006566:	e7c3      	b.n	80064f0 <_svfiprintf_r+0x130>
 8006568:	4604      	mov	r4, r0
 800656a:	2301      	movs	r3, #1
 800656c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006570:	e7f0      	b.n	8006554 <_svfiprintf_r+0x194>
 8006572:	ab03      	add	r3, sp, #12
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	462a      	mov	r2, r5
 8006578:	4638      	mov	r0, r7
 800657a:	4b0f      	ldr	r3, [pc, #60]	; (80065b8 <_svfiprintf_r+0x1f8>)
 800657c:	a904      	add	r1, sp, #16
 800657e:	f3af 8000 	nop.w
 8006582:	1c42      	adds	r2, r0, #1
 8006584:	4606      	mov	r6, r0
 8006586:	d1d6      	bne.n	8006536 <_svfiprintf_r+0x176>
 8006588:	89ab      	ldrh	r3, [r5, #12]
 800658a:	065b      	lsls	r3, r3, #25
 800658c:	f53f af2c 	bmi.w	80063e8 <_svfiprintf_r+0x28>
 8006590:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006592:	b01d      	add	sp, #116	; 0x74
 8006594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006598:	ab03      	add	r3, sp, #12
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	462a      	mov	r2, r5
 800659e:	4638      	mov	r0, r7
 80065a0:	4b05      	ldr	r3, [pc, #20]	; (80065b8 <_svfiprintf_r+0x1f8>)
 80065a2:	a904      	add	r1, sp, #16
 80065a4:	f000 f9d4 	bl	8006950 <_printf_i>
 80065a8:	e7eb      	b.n	8006582 <_svfiprintf_r+0x1c2>
 80065aa:	bf00      	nop
 80065ac:	08007ee8 	.word	0x08007ee8
 80065b0:	08007ef2 	.word	0x08007ef2
 80065b4:	00000000 	.word	0x00000000
 80065b8:	08006309 	.word	0x08006309
 80065bc:	08007eee 	.word	0x08007eee

080065c0 <__sfputc_r>:
 80065c0:	6893      	ldr	r3, [r2, #8]
 80065c2:	b410      	push	{r4}
 80065c4:	3b01      	subs	r3, #1
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	6093      	str	r3, [r2, #8]
 80065ca:	da07      	bge.n	80065dc <__sfputc_r+0x1c>
 80065cc:	6994      	ldr	r4, [r2, #24]
 80065ce:	42a3      	cmp	r3, r4
 80065d0:	db01      	blt.n	80065d6 <__sfputc_r+0x16>
 80065d2:	290a      	cmp	r1, #10
 80065d4:	d102      	bne.n	80065dc <__sfputc_r+0x1c>
 80065d6:	bc10      	pop	{r4}
 80065d8:	f000 bb7c 	b.w	8006cd4 <__swbuf_r>
 80065dc:	6813      	ldr	r3, [r2, #0]
 80065de:	1c58      	adds	r0, r3, #1
 80065e0:	6010      	str	r0, [r2, #0]
 80065e2:	7019      	strb	r1, [r3, #0]
 80065e4:	4608      	mov	r0, r1
 80065e6:	bc10      	pop	{r4}
 80065e8:	4770      	bx	lr

080065ea <__sfputs_r>:
 80065ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ec:	4606      	mov	r6, r0
 80065ee:	460f      	mov	r7, r1
 80065f0:	4614      	mov	r4, r2
 80065f2:	18d5      	adds	r5, r2, r3
 80065f4:	42ac      	cmp	r4, r5
 80065f6:	d101      	bne.n	80065fc <__sfputs_r+0x12>
 80065f8:	2000      	movs	r0, #0
 80065fa:	e007      	b.n	800660c <__sfputs_r+0x22>
 80065fc:	463a      	mov	r2, r7
 80065fe:	4630      	mov	r0, r6
 8006600:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006604:	f7ff ffdc 	bl	80065c0 <__sfputc_r>
 8006608:	1c43      	adds	r3, r0, #1
 800660a:	d1f3      	bne.n	80065f4 <__sfputs_r+0xa>
 800660c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006610 <_vfiprintf_r>:
 8006610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006614:	460d      	mov	r5, r1
 8006616:	4614      	mov	r4, r2
 8006618:	4698      	mov	r8, r3
 800661a:	4606      	mov	r6, r0
 800661c:	b09d      	sub	sp, #116	; 0x74
 800661e:	b118      	cbz	r0, 8006628 <_vfiprintf_r+0x18>
 8006620:	6983      	ldr	r3, [r0, #24]
 8006622:	b90b      	cbnz	r3, 8006628 <_vfiprintf_r+0x18>
 8006624:	f7ff fcbe 	bl	8005fa4 <__sinit>
 8006628:	4b89      	ldr	r3, [pc, #548]	; (8006850 <_vfiprintf_r+0x240>)
 800662a:	429d      	cmp	r5, r3
 800662c:	d11b      	bne.n	8006666 <_vfiprintf_r+0x56>
 800662e:	6875      	ldr	r5, [r6, #4]
 8006630:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006632:	07d9      	lsls	r1, r3, #31
 8006634:	d405      	bmi.n	8006642 <_vfiprintf_r+0x32>
 8006636:	89ab      	ldrh	r3, [r5, #12]
 8006638:	059a      	lsls	r2, r3, #22
 800663a:	d402      	bmi.n	8006642 <_vfiprintf_r+0x32>
 800663c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800663e:	f7ff fd4f 	bl	80060e0 <__retarget_lock_acquire_recursive>
 8006642:	89ab      	ldrh	r3, [r5, #12]
 8006644:	071b      	lsls	r3, r3, #28
 8006646:	d501      	bpl.n	800664c <_vfiprintf_r+0x3c>
 8006648:	692b      	ldr	r3, [r5, #16]
 800664a:	b9eb      	cbnz	r3, 8006688 <_vfiprintf_r+0x78>
 800664c:	4629      	mov	r1, r5
 800664e:	4630      	mov	r0, r6
 8006650:	f000 fba4 	bl	8006d9c <__swsetup_r>
 8006654:	b1c0      	cbz	r0, 8006688 <_vfiprintf_r+0x78>
 8006656:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006658:	07dc      	lsls	r4, r3, #31
 800665a:	d50e      	bpl.n	800667a <_vfiprintf_r+0x6a>
 800665c:	f04f 30ff 	mov.w	r0, #4294967295
 8006660:	b01d      	add	sp, #116	; 0x74
 8006662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006666:	4b7b      	ldr	r3, [pc, #492]	; (8006854 <_vfiprintf_r+0x244>)
 8006668:	429d      	cmp	r5, r3
 800666a:	d101      	bne.n	8006670 <_vfiprintf_r+0x60>
 800666c:	68b5      	ldr	r5, [r6, #8]
 800666e:	e7df      	b.n	8006630 <_vfiprintf_r+0x20>
 8006670:	4b79      	ldr	r3, [pc, #484]	; (8006858 <_vfiprintf_r+0x248>)
 8006672:	429d      	cmp	r5, r3
 8006674:	bf08      	it	eq
 8006676:	68f5      	ldreq	r5, [r6, #12]
 8006678:	e7da      	b.n	8006630 <_vfiprintf_r+0x20>
 800667a:	89ab      	ldrh	r3, [r5, #12]
 800667c:	0598      	lsls	r0, r3, #22
 800667e:	d4ed      	bmi.n	800665c <_vfiprintf_r+0x4c>
 8006680:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006682:	f7ff fd2e 	bl	80060e2 <__retarget_lock_release_recursive>
 8006686:	e7e9      	b.n	800665c <_vfiprintf_r+0x4c>
 8006688:	2300      	movs	r3, #0
 800668a:	9309      	str	r3, [sp, #36]	; 0x24
 800668c:	2320      	movs	r3, #32
 800668e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006692:	2330      	movs	r3, #48	; 0x30
 8006694:	f04f 0901 	mov.w	r9, #1
 8006698:	f8cd 800c 	str.w	r8, [sp, #12]
 800669c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800685c <_vfiprintf_r+0x24c>
 80066a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066a4:	4623      	mov	r3, r4
 80066a6:	469a      	mov	sl, r3
 80066a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066ac:	b10a      	cbz	r2, 80066b2 <_vfiprintf_r+0xa2>
 80066ae:	2a25      	cmp	r2, #37	; 0x25
 80066b0:	d1f9      	bne.n	80066a6 <_vfiprintf_r+0x96>
 80066b2:	ebba 0b04 	subs.w	fp, sl, r4
 80066b6:	d00b      	beq.n	80066d0 <_vfiprintf_r+0xc0>
 80066b8:	465b      	mov	r3, fp
 80066ba:	4622      	mov	r2, r4
 80066bc:	4629      	mov	r1, r5
 80066be:	4630      	mov	r0, r6
 80066c0:	f7ff ff93 	bl	80065ea <__sfputs_r>
 80066c4:	3001      	adds	r0, #1
 80066c6:	f000 80aa 	beq.w	800681e <_vfiprintf_r+0x20e>
 80066ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066cc:	445a      	add	r2, fp
 80066ce:	9209      	str	r2, [sp, #36]	; 0x24
 80066d0:	f89a 3000 	ldrb.w	r3, [sl]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f000 80a2 	beq.w	800681e <_vfiprintf_r+0x20e>
 80066da:	2300      	movs	r3, #0
 80066dc:	f04f 32ff 	mov.w	r2, #4294967295
 80066e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066e4:	f10a 0a01 	add.w	sl, sl, #1
 80066e8:	9304      	str	r3, [sp, #16]
 80066ea:	9307      	str	r3, [sp, #28]
 80066ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066f0:	931a      	str	r3, [sp, #104]	; 0x68
 80066f2:	4654      	mov	r4, sl
 80066f4:	2205      	movs	r2, #5
 80066f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066fa:	4858      	ldr	r0, [pc, #352]	; (800685c <_vfiprintf_r+0x24c>)
 80066fc:	f000 fc00 	bl	8006f00 <memchr>
 8006700:	9a04      	ldr	r2, [sp, #16]
 8006702:	b9d8      	cbnz	r0, 800673c <_vfiprintf_r+0x12c>
 8006704:	06d1      	lsls	r1, r2, #27
 8006706:	bf44      	itt	mi
 8006708:	2320      	movmi	r3, #32
 800670a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800670e:	0713      	lsls	r3, r2, #28
 8006710:	bf44      	itt	mi
 8006712:	232b      	movmi	r3, #43	; 0x2b
 8006714:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006718:	f89a 3000 	ldrb.w	r3, [sl]
 800671c:	2b2a      	cmp	r3, #42	; 0x2a
 800671e:	d015      	beq.n	800674c <_vfiprintf_r+0x13c>
 8006720:	4654      	mov	r4, sl
 8006722:	2000      	movs	r0, #0
 8006724:	f04f 0c0a 	mov.w	ip, #10
 8006728:	9a07      	ldr	r2, [sp, #28]
 800672a:	4621      	mov	r1, r4
 800672c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006730:	3b30      	subs	r3, #48	; 0x30
 8006732:	2b09      	cmp	r3, #9
 8006734:	d94e      	bls.n	80067d4 <_vfiprintf_r+0x1c4>
 8006736:	b1b0      	cbz	r0, 8006766 <_vfiprintf_r+0x156>
 8006738:	9207      	str	r2, [sp, #28]
 800673a:	e014      	b.n	8006766 <_vfiprintf_r+0x156>
 800673c:	eba0 0308 	sub.w	r3, r0, r8
 8006740:	fa09 f303 	lsl.w	r3, r9, r3
 8006744:	4313      	orrs	r3, r2
 8006746:	46a2      	mov	sl, r4
 8006748:	9304      	str	r3, [sp, #16]
 800674a:	e7d2      	b.n	80066f2 <_vfiprintf_r+0xe2>
 800674c:	9b03      	ldr	r3, [sp, #12]
 800674e:	1d19      	adds	r1, r3, #4
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	9103      	str	r1, [sp, #12]
 8006754:	2b00      	cmp	r3, #0
 8006756:	bfbb      	ittet	lt
 8006758:	425b      	neglt	r3, r3
 800675a:	f042 0202 	orrlt.w	r2, r2, #2
 800675e:	9307      	strge	r3, [sp, #28]
 8006760:	9307      	strlt	r3, [sp, #28]
 8006762:	bfb8      	it	lt
 8006764:	9204      	strlt	r2, [sp, #16]
 8006766:	7823      	ldrb	r3, [r4, #0]
 8006768:	2b2e      	cmp	r3, #46	; 0x2e
 800676a:	d10c      	bne.n	8006786 <_vfiprintf_r+0x176>
 800676c:	7863      	ldrb	r3, [r4, #1]
 800676e:	2b2a      	cmp	r3, #42	; 0x2a
 8006770:	d135      	bne.n	80067de <_vfiprintf_r+0x1ce>
 8006772:	9b03      	ldr	r3, [sp, #12]
 8006774:	3402      	adds	r4, #2
 8006776:	1d1a      	adds	r2, r3, #4
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	9203      	str	r2, [sp, #12]
 800677c:	2b00      	cmp	r3, #0
 800677e:	bfb8      	it	lt
 8006780:	f04f 33ff 	movlt.w	r3, #4294967295
 8006784:	9305      	str	r3, [sp, #20]
 8006786:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800686c <_vfiprintf_r+0x25c>
 800678a:	2203      	movs	r2, #3
 800678c:	4650      	mov	r0, sl
 800678e:	7821      	ldrb	r1, [r4, #0]
 8006790:	f000 fbb6 	bl	8006f00 <memchr>
 8006794:	b140      	cbz	r0, 80067a8 <_vfiprintf_r+0x198>
 8006796:	2340      	movs	r3, #64	; 0x40
 8006798:	eba0 000a 	sub.w	r0, r0, sl
 800679c:	fa03 f000 	lsl.w	r0, r3, r0
 80067a0:	9b04      	ldr	r3, [sp, #16]
 80067a2:	3401      	adds	r4, #1
 80067a4:	4303      	orrs	r3, r0
 80067a6:	9304      	str	r3, [sp, #16]
 80067a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067ac:	2206      	movs	r2, #6
 80067ae:	482c      	ldr	r0, [pc, #176]	; (8006860 <_vfiprintf_r+0x250>)
 80067b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067b4:	f000 fba4 	bl	8006f00 <memchr>
 80067b8:	2800      	cmp	r0, #0
 80067ba:	d03f      	beq.n	800683c <_vfiprintf_r+0x22c>
 80067bc:	4b29      	ldr	r3, [pc, #164]	; (8006864 <_vfiprintf_r+0x254>)
 80067be:	bb1b      	cbnz	r3, 8006808 <_vfiprintf_r+0x1f8>
 80067c0:	9b03      	ldr	r3, [sp, #12]
 80067c2:	3307      	adds	r3, #7
 80067c4:	f023 0307 	bic.w	r3, r3, #7
 80067c8:	3308      	adds	r3, #8
 80067ca:	9303      	str	r3, [sp, #12]
 80067cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067ce:	443b      	add	r3, r7
 80067d0:	9309      	str	r3, [sp, #36]	; 0x24
 80067d2:	e767      	b.n	80066a4 <_vfiprintf_r+0x94>
 80067d4:	460c      	mov	r4, r1
 80067d6:	2001      	movs	r0, #1
 80067d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80067dc:	e7a5      	b.n	800672a <_vfiprintf_r+0x11a>
 80067de:	2300      	movs	r3, #0
 80067e0:	f04f 0c0a 	mov.w	ip, #10
 80067e4:	4619      	mov	r1, r3
 80067e6:	3401      	adds	r4, #1
 80067e8:	9305      	str	r3, [sp, #20]
 80067ea:	4620      	mov	r0, r4
 80067ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067f0:	3a30      	subs	r2, #48	; 0x30
 80067f2:	2a09      	cmp	r2, #9
 80067f4:	d903      	bls.n	80067fe <_vfiprintf_r+0x1ee>
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d0c5      	beq.n	8006786 <_vfiprintf_r+0x176>
 80067fa:	9105      	str	r1, [sp, #20]
 80067fc:	e7c3      	b.n	8006786 <_vfiprintf_r+0x176>
 80067fe:	4604      	mov	r4, r0
 8006800:	2301      	movs	r3, #1
 8006802:	fb0c 2101 	mla	r1, ip, r1, r2
 8006806:	e7f0      	b.n	80067ea <_vfiprintf_r+0x1da>
 8006808:	ab03      	add	r3, sp, #12
 800680a:	9300      	str	r3, [sp, #0]
 800680c:	462a      	mov	r2, r5
 800680e:	4630      	mov	r0, r6
 8006810:	4b15      	ldr	r3, [pc, #84]	; (8006868 <_vfiprintf_r+0x258>)
 8006812:	a904      	add	r1, sp, #16
 8006814:	f3af 8000 	nop.w
 8006818:	4607      	mov	r7, r0
 800681a:	1c78      	adds	r0, r7, #1
 800681c:	d1d6      	bne.n	80067cc <_vfiprintf_r+0x1bc>
 800681e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006820:	07d9      	lsls	r1, r3, #31
 8006822:	d405      	bmi.n	8006830 <_vfiprintf_r+0x220>
 8006824:	89ab      	ldrh	r3, [r5, #12]
 8006826:	059a      	lsls	r2, r3, #22
 8006828:	d402      	bmi.n	8006830 <_vfiprintf_r+0x220>
 800682a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800682c:	f7ff fc59 	bl	80060e2 <__retarget_lock_release_recursive>
 8006830:	89ab      	ldrh	r3, [r5, #12]
 8006832:	065b      	lsls	r3, r3, #25
 8006834:	f53f af12 	bmi.w	800665c <_vfiprintf_r+0x4c>
 8006838:	9809      	ldr	r0, [sp, #36]	; 0x24
 800683a:	e711      	b.n	8006660 <_vfiprintf_r+0x50>
 800683c:	ab03      	add	r3, sp, #12
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	462a      	mov	r2, r5
 8006842:	4630      	mov	r0, r6
 8006844:	4b08      	ldr	r3, [pc, #32]	; (8006868 <_vfiprintf_r+0x258>)
 8006846:	a904      	add	r1, sp, #16
 8006848:	f000 f882 	bl	8006950 <_printf_i>
 800684c:	e7e4      	b.n	8006818 <_vfiprintf_r+0x208>
 800684e:	bf00      	nop
 8006850:	08007ea8 	.word	0x08007ea8
 8006854:	08007ec8 	.word	0x08007ec8
 8006858:	08007e88 	.word	0x08007e88
 800685c:	08007ee8 	.word	0x08007ee8
 8006860:	08007ef2 	.word	0x08007ef2
 8006864:	00000000 	.word	0x00000000
 8006868:	080065eb 	.word	0x080065eb
 800686c:	08007eee 	.word	0x08007eee

08006870 <_printf_common>:
 8006870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006874:	4616      	mov	r6, r2
 8006876:	4699      	mov	r9, r3
 8006878:	688a      	ldr	r2, [r1, #8]
 800687a:	690b      	ldr	r3, [r1, #16]
 800687c:	4607      	mov	r7, r0
 800687e:	4293      	cmp	r3, r2
 8006880:	bfb8      	it	lt
 8006882:	4613      	movlt	r3, r2
 8006884:	6033      	str	r3, [r6, #0]
 8006886:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800688a:	460c      	mov	r4, r1
 800688c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006890:	b10a      	cbz	r2, 8006896 <_printf_common+0x26>
 8006892:	3301      	adds	r3, #1
 8006894:	6033      	str	r3, [r6, #0]
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	0699      	lsls	r1, r3, #26
 800689a:	bf42      	ittt	mi
 800689c:	6833      	ldrmi	r3, [r6, #0]
 800689e:	3302      	addmi	r3, #2
 80068a0:	6033      	strmi	r3, [r6, #0]
 80068a2:	6825      	ldr	r5, [r4, #0]
 80068a4:	f015 0506 	ands.w	r5, r5, #6
 80068a8:	d106      	bne.n	80068b8 <_printf_common+0x48>
 80068aa:	f104 0a19 	add.w	sl, r4, #25
 80068ae:	68e3      	ldr	r3, [r4, #12]
 80068b0:	6832      	ldr	r2, [r6, #0]
 80068b2:	1a9b      	subs	r3, r3, r2
 80068b4:	42ab      	cmp	r3, r5
 80068b6:	dc28      	bgt.n	800690a <_printf_common+0x9a>
 80068b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068bc:	1e13      	subs	r3, r2, #0
 80068be:	6822      	ldr	r2, [r4, #0]
 80068c0:	bf18      	it	ne
 80068c2:	2301      	movne	r3, #1
 80068c4:	0692      	lsls	r2, r2, #26
 80068c6:	d42d      	bmi.n	8006924 <_printf_common+0xb4>
 80068c8:	4649      	mov	r1, r9
 80068ca:	4638      	mov	r0, r7
 80068cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068d0:	47c0      	blx	r8
 80068d2:	3001      	adds	r0, #1
 80068d4:	d020      	beq.n	8006918 <_printf_common+0xa8>
 80068d6:	6823      	ldr	r3, [r4, #0]
 80068d8:	68e5      	ldr	r5, [r4, #12]
 80068da:	f003 0306 	and.w	r3, r3, #6
 80068de:	2b04      	cmp	r3, #4
 80068e0:	bf18      	it	ne
 80068e2:	2500      	movne	r5, #0
 80068e4:	6832      	ldr	r2, [r6, #0]
 80068e6:	f04f 0600 	mov.w	r6, #0
 80068ea:	68a3      	ldr	r3, [r4, #8]
 80068ec:	bf08      	it	eq
 80068ee:	1aad      	subeq	r5, r5, r2
 80068f0:	6922      	ldr	r2, [r4, #16]
 80068f2:	bf08      	it	eq
 80068f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068f8:	4293      	cmp	r3, r2
 80068fa:	bfc4      	itt	gt
 80068fc:	1a9b      	subgt	r3, r3, r2
 80068fe:	18ed      	addgt	r5, r5, r3
 8006900:	341a      	adds	r4, #26
 8006902:	42b5      	cmp	r5, r6
 8006904:	d11a      	bne.n	800693c <_printf_common+0xcc>
 8006906:	2000      	movs	r0, #0
 8006908:	e008      	b.n	800691c <_printf_common+0xac>
 800690a:	2301      	movs	r3, #1
 800690c:	4652      	mov	r2, sl
 800690e:	4649      	mov	r1, r9
 8006910:	4638      	mov	r0, r7
 8006912:	47c0      	blx	r8
 8006914:	3001      	adds	r0, #1
 8006916:	d103      	bne.n	8006920 <_printf_common+0xb0>
 8006918:	f04f 30ff 	mov.w	r0, #4294967295
 800691c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006920:	3501      	adds	r5, #1
 8006922:	e7c4      	b.n	80068ae <_printf_common+0x3e>
 8006924:	2030      	movs	r0, #48	; 0x30
 8006926:	18e1      	adds	r1, r4, r3
 8006928:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800692c:	1c5a      	adds	r2, r3, #1
 800692e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006932:	4422      	add	r2, r4
 8006934:	3302      	adds	r3, #2
 8006936:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800693a:	e7c5      	b.n	80068c8 <_printf_common+0x58>
 800693c:	2301      	movs	r3, #1
 800693e:	4622      	mov	r2, r4
 8006940:	4649      	mov	r1, r9
 8006942:	4638      	mov	r0, r7
 8006944:	47c0      	blx	r8
 8006946:	3001      	adds	r0, #1
 8006948:	d0e6      	beq.n	8006918 <_printf_common+0xa8>
 800694a:	3601      	adds	r6, #1
 800694c:	e7d9      	b.n	8006902 <_printf_common+0x92>
	...

08006950 <_printf_i>:
 8006950:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006954:	460c      	mov	r4, r1
 8006956:	7e27      	ldrb	r7, [r4, #24]
 8006958:	4691      	mov	r9, r2
 800695a:	2f78      	cmp	r7, #120	; 0x78
 800695c:	4680      	mov	r8, r0
 800695e:	469a      	mov	sl, r3
 8006960:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006962:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006966:	d807      	bhi.n	8006978 <_printf_i+0x28>
 8006968:	2f62      	cmp	r7, #98	; 0x62
 800696a:	d80a      	bhi.n	8006982 <_printf_i+0x32>
 800696c:	2f00      	cmp	r7, #0
 800696e:	f000 80d9 	beq.w	8006b24 <_printf_i+0x1d4>
 8006972:	2f58      	cmp	r7, #88	; 0x58
 8006974:	f000 80a4 	beq.w	8006ac0 <_printf_i+0x170>
 8006978:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800697c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006980:	e03a      	b.n	80069f8 <_printf_i+0xa8>
 8006982:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006986:	2b15      	cmp	r3, #21
 8006988:	d8f6      	bhi.n	8006978 <_printf_i+0x28>
 800698a:	a001      	add	r0, pc, #4	; (adr r0, 8006990 <_printf_i+0x40>)
 800698c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006990:	080069e9 	.word	0x080069e9
 8006994:	080069fd 	.word	0x080069fd
 8006998:	08006979 	.word	0x08006979
 800699c:	08006979 	.word	0x08006979
 80069a0:	08006979 	.word	0x08006979
 80069a4:	08006979 	.word	0x08006979
 80069a8:	080069fd 	.word	0x080069fd
 80069ac:	08006979 	.word	0x08006979
 80069b0:	08006979 	.word	0x08006979
 80069b4:	08006979 	.word	0x08006979
 80069b8:	08006979 	.word	0x08006979
 80069bc:	08006b0b 	.word	0x08006b0b
 80069c0:	08006a2d 	.word	0x08006a2d
 80069c4:	08006aed 	.word	0x08006aed
 80069c8:	08006979 	.word	0x08006979
 80069cc:	08006979 	.word	0x08006979
 80069d0:	08006b2d 	.word	0x08006b2d
 80069d4:	08006979 	.word	0x08006979
 80069d8:	08006a2d 	.word	0x08006a2d
 80069dc:	08006979 	.word	0x08006979
 80069e0:	08006979 	.word	0x08006979
 80069e4:	08006af5 	.word	0x08006af5
 80069e8:	680b      	ldr	r3, [r1, #0]
 80069ea:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80069ee:	1d1a      	adds	r2, r3, #4
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	600a      	str	r2, [r1, #0]
 80069f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069f8:	2301      	movs	r3, #1
 80069fa:	e0a4      	b.n	8006b46 <_printf_i+0x1f6>
 80069fc:	6825      	ldr	r5, [r4, #0]
 80069fe:	6808      	ldr	r0, [r1, #0]
 8006a00:	062e      	lsls	r6, r5, #24
 8006a02:	f100 0304 	add.w	r3, r0, #4
 8006a06:	d50a      	bpl.n	8006a1e <_printf_i+0xce>
 8006a08:	6805      	ldr	r5, [r0, #0]
 8006a0a:	600b      	str	r3, [r1, #0]
 8006a0c:	2d00      	cmp	r5, #0
 8006a0e:	da03      	bge.n	8006a18 <_printf_i+0xc8>
 8006a10:	232d      	movs	r3, #45	; 0x2d
 8006a12:	426d      	negs	r5, r5
 8006a14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a18:	230a      	movs	r3, #10
 8006a1a:	485e      	ldr	r0, [pc, #376]	; (8006b94 <_printf_i+0x244>)
 8006a1c:	e019      	b.n	8006a52 <_printf_i+0x102>
 8006a1e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006a22:	6805      	ldr	r5, [r0, #0]
 8006a24:	600b      	str	r3, [r1, #0]
 8006a26:	bf18      	it	ne
 8006a28:	b22d      	sxthne	r5, r5
 8006a2a:	e7ef      	b.n	8006a0c <_printf_i+0xbc>
 8006a2c:	680b      	ldr	r3, [r1, #0]
 8006a2e:	6825      	ldr	r5, [r4, #0]
 8006a30:	1d18      	adds	r0, r3, #4
 8006a32:	6008      	str	r0, [r1, #0]
 8006a34:	0628      	lsls	r0, r5, #24
 8006a36:	d501      	bpl.n	8006a3c <_printf_i+0xec>
 8006a38:	681d      	ldr	r5, [r3, #0]
 8006a3a:	e002      	b.n	8006a42 <_printf_i+0xf2>
 8006a3c:	0669      	lsls	r1, r5, #25
 8006a3e:	d5fb      	bpl.n	8006a38 <_printf_i+0xe8>
 8006a40:	881d      	ldrh	r5, [r3, #0]
 8006a42:	2f6f      	cmp	r7, #111	; 0x6f
 8006a44:	bf0c      	ite	eq
 8006a46:	2308      	moveq	r3, #8
 8006a48:	230a      	movne	r3, #10
 8006a4a:	4852      	ldr	r0, [pc, #328]	; (8006b94 <_printf_i+0x244>)
 8006a4c:	2100      	movs	r1, #0
 8006a4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a52:	6866      	ldr	r6, [r4, #4]
 8006a54:	2e00      	cmp	r6, #0
 8006a56:	bfa8      	it	ge
 8006a58:	6821      	ldrge	r1, [r4, #0]
 8006a5a:	60a6      	str	r6, [r4, #8]
 8006a5c:	bfa4      	itt	ge
 8006a5e:	f021 0104 	bicge.w	r1, r1, #4
 8006a62:	6021      	strge	r1, [r4, #0]
 8006a64:	b90d      	cbnz	r5, 8006a6a <_printf_i+0x11a>
 8006a66:	2e00      	cmp	r6, #0
 8006a68:	d04d      	beq.n	8006b06 <_printf_i+0x1b6>
 8006a6a:	4616      	mov	r6, r2
 8006a6c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a70:	fb03 5711 	mls	r7, r3, r1, r5
 8006a74:	5dc7      	ldrb	r7, [r0, r7]
 8006a76:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a7a:	462f      	mov	r7, r5
 8006a7c:	42bb      	cmp	r3, r7
 8006a7e:	460d      	mov	r5, r1
 8006a80:	d9f4      	bls.n	8006a6c <_printf_i+0x11c>
 8006a82:	2b08      	cmp	r3, #8
 8006a84:	d10b      	bne.n	8006a9e <_printf_i+0x14e>
 8006a86:	6823      	ldr	r3, [r4, #0]
 8006a88:	07df      	lsls	r7, r3, #31
 8006a8a:	d508      	bpl.n	8006a9e <_printf_i+0x14e>
 8006a8c:	6923      	ldr	r3, [r4, #16]
 8006a8e:	6861      	ldr	r1, [r4, #4]
 8006a90:	4299      	cmp	r1, r3
 8006a92:	bfde      	ittt	le
 8006a94:	2330      	movle	r3, #48	; 0x30
 8006a96:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a9a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a9e:	1b92      	subs	r2, r2, r6
 8006aa0:	6122      	str	r2, [r4, #16]
 8006aa2:	464b      	mov	r3, r9
 8006aa4:	4621      	mov	r1, r4
 8006aa6:	4640      	mov	r0, r8
 8006aa8:	f8cd a000 	str.w	sl, [sp]
 8006aac:	aa03      	add	r2, sp, #12
 8006aae:	f7ff fedf 	bl	8006870 <_printf_common>
 8006ab2:	3001      	adds	r0, #1
 8006ab4:	d14c      	bne.n	8006b50 <_printf_i+0x200>
 8006ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8006aba:	b004      	add	sp, #16
 8006abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ac0:	4834      	ldr	r0, [pc, #208]	; (8006b94 <_printf_i+0x244>)
 8006ac2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ac6:	680e      	ldr	r6, [r1, #0]
 8006ac8:	6823      	ldr	r3, [r4, #0]
 8006aca:	f856 5b04 	ldr.w	r5, [r6], #4
 8006ace:	061f      	lsls	r7, r3, #24
 8006ad0:	600e      	str	r6, [r1, #0]
 8006ad2:	d514      	bpl.n	8006afe <_printf_i+0x1ae>
 8006ad4:	07d9      	lsls	r1, r3, #31
 8006ad6:	bf44      	itt	mi
 8006ad8:	f043 0320 	orrmi.w	r3, r3, #32
 8006adc:	6023      	strmi	r3, [r4, #0]
 8006ade:	b91d      	cbnz	r5, 8006ae8 <_printf_i+0x198>
 8006ae0:	6823      	ldr	r3, [r4, #0]
 8006ae2:	f023 0320 	bic.w	r3, r3, #32
 8006ae6:	6023      	str	r3, [r4, #0]
 8006ae8:	2310      	movs	r3, #16
 8006aea:	e7af      	b.n	8006a4c <_printf_i+0xfc>
 8006aec:	6823      	ldr	r3, [r4, #0]
 8006aee:	f043 0320 	orr.w	r3, r3, #32
 8006af2:	6023      	str	r3, [r4, #0]
 8006af4:	2378      	movs	r3, #120	; 0x78
 8006af6:	4828      	ldr	r0, [pc, #160]	; (8006b98 <_printf_i+0x248>)
 8006af8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006afc:	e7e3      	b.n	8006ac6 <_printf_i+0x176>
 8006afe:	065e      	lsls	r6, r3, #25
 8006b00:	bf48      	it	mi
 8006b02:	b2ad      	uxthmi	r5, r5
 8006b04:	e7e6      	b.n	8006ad4 <_printf_i+0x184>
 8006b06:	4616      	mov	r6, r2
 8006b08:	e7bb      	b.n	8006a82 <_printf_i+0x132>
 8006b0a:	680b      	ldr	r3, [r1, #0]
 8006b0c:	6826      	ldr	r6, [r4, #0]
 8006b0e:	1d1d      	adds	r5, r3, #4
 8006b10:	6960      	ldr	r0, [r4, #20]
 8006b12:	600d      	str	r5, [r1, #0]
 8006b14:	0635      	lsls	r5, r6, #24
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	d501      	bpl.n	8006b1e <_printf_i+0x1ce>
 8006b1a:	6018      	str	r0, [r3, #0]
 8006b1c:	e002      	b.n	8006b24 <_printf_i+0x1d4>
 8006b1e:	0671      	lsls	r1, r6, #25
 8006b20:	d5fb      	bpl.n	8006b1a <_printf_i+0x1ca>
 8006b22:	8018      	strh	r0, [r3, #0]
 8006b24:	2300      	movs	r3, #0
 8006b26:	4616      	mov	r6, r2
 8006b28:	6123      	str	r3, [r4, #16]
 8006b2a:	e7ba      	b.n	8006aa2 <_printf_i+0x152>
 8006b2c:	680b      	ldr	r3, [r1, #0]
 8006b2e:	1d1a      	adds	r2, r3, #4
 8006b30:	600a      	str	r2, [r1, #0]
 8006b32:	681e      	ldr	r6, [r3, #0]
 8006b34:	2100      	movs	r1, #0
 8006b36:	4630      	mov	r0, r6
 8006b38:	6862      	ldr	r2, [r4, #4]
 8006b3a:	f000 f9e1 	bl	8006f00 <memchr>
 8006b3e:	b108      	cbz	r0, 8006b44 <_printf_i+0x1f4>
 8006b40:	1b80      	subs	r0, r0, r6
 8006b42:	6060      	str	r0, [r4, #4]
 8006b44:	6863      	ldr	r3, [r4, #4]
 8006b46:	6123      	str	r3, [r4, #16]
 8006b48:	2300      	movs	r3, #0
 8006b4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b4e:	e7a8      	b.n	8006aa2 <_printf_i+0x152>
 8006b50:	4632      	mov	r2, r6
 8006b52:	4649      	mov	r1, r9
 8006b54:	4640      	mov	r0, r8
 8006b56:	6923      	ldr	r3, [r4, #16]
 8006b58:	47d0      	blx	sl
 8006b5a:	3001      	adds	r0, #1
 8006b5c:	d0ab      	beq.n	8006ab6 <_printf_i+0x166>
 8006b5e:	6823      	ldr	r3, [r4, #0]
 8006b60:	079b      	lsls	r3, r3, #30
 8006b62:	d413      	bmi.n	8006b8c <_printf_i+0x23c>
 8006b64:	68e0      	ldr	r0, [r4, #12]
 8006b66:	9b03      	ldr	r3, [sp, #12]
 8006b68:	4298      	cmp	r0, r3
 8006b6a:	bfb8      	it	lt
 8006b6c:	4618      	movlt	r0, r3
 8006b6e:	e7a4      	b.n	8006aba <_printf_i+0x16a>
 8006b70:	2301      	movs	r3, #1
 8006b72:	4632      	mov	r2, r6
 8006b74:	4649      	mov	r1, r9
 8006b76:	4640      	mov	r0, r8
 8006b78:	47d0      	blx	sl
 8006b7a:	3001      	adds	r0, #1
 8006b7c:	d09b      	beq.n	8006ab6 <_printf_i+0x166>
 8006b7e:	3501      	adds	r5, #1
 8006b80:	68e3      	ldr	r3, [r4, #12]
 8006b82:	9903      	ldr	r1, [sp, #12]
 8006b84:	1a5b      	subs	r3, r3, r1
 8006b86:	42ab      	cmp	r3, r5
 8006b88:	dcf2      	bgt.n	8006b70 <_printf_i+0x220>
 8006b8a:	e7eb      	b.n	8006b64 <_printf_i+0x214>
 8006b8c:	2500      	movs	r5, #0
 8006b8e:	f104 0619 	add.w	r6, r4, #25
 8006b92:	e7f5      	b.n	8006b80 <_printf_i+0x230>
 8006b94:	08007ef9 	.word	0x08007ef9
 8006b98:	08007f0a 	.word	0x08007f0a

08006b9c <_putc_r>:
 8006b9c:	b570      	push	{r4, r5, r6, lr}
 8006b9e:	460d      	mov	r5, r1
 8006ba0:	4614      	mov	r4, r2
 8006ba2:	4606      	mov	r6, r0
 8006ba4:	b118      	cbz	r0, 8006bae <_putc_r+0x12>
 8006ba6:	6983      	ldr	r3, [r0, #24]
 8006ba8:	b90b      	cbnz	r3, 8006bae <_putc_r+0x12>
 8006baa:	f7ff f9fb 	bl	8005fa4 <__sinit>
 8006bae:	4b1c      	ldr	r3, [pc, #112]	; (8006c20 <_putc_r+0x84>)
 8006bb0:	429c      	cmp	r4, r3
 8006bb2:	d124      	bne.n	8006bfe <_putc_r+0x62>
 8006bb4:	6874      	ldr	r4, [r6, #4]
 8006bb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bb8:	07d8      	lsls	r0, r3, #31
 8006bba:	d405      	bmi.n	8006bc8 <_putc_r+0x2c>
 8006bbc:	89a3      	ldrh	r3, [r4, #12]
 8006bbe:	0599      	lsls	r1, r3, #22
 8006bc0:	d402      	bmi.n	8006bc8 <_putc_r+0x2c>
 8006bc2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bc4:	f7ff fa8c 	bl	80060e0 <__retarget_lock_acquire_recursive>
 8006bc8:	68a3      	ldr	r3, [r4, #8]
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	60a3      	str	r3, [r4, #8]
 8006bd0:	da05      	bge.n	8006bde <_putc_r+0x42>
 8006bd2:	69a2      	ldr	r2, [r4, #24]
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	db1c      	blt.n	8006c12 <_putc_r+0x76>
 8006bd8:	b2eb      	uxtb	r3, r5
 8006bda:	2b0a      	cmp	r3, #10
 8006bdc:	d019      	beq.n	8006c12 <_putc_r+0x76>
 8006bde:	6823      	ldr	r3, [r4, #0]
 8006be0:	1c5a      	adds	r2, r3, #1
 8006be2:	6022      	str	r2, [r4, #0]
 8006be4:	701d      	strb	r5, [r3, #0]
 8006be6:	b2ed      	uxtb	r5, r5
 8006be8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bea:	07da      	lsls	r2, r3, #31
 8006bec:	d405      	bmi.n	8006bfa <_putc_r+0x5e>
 8006bee:	89a3      	ldrh	r3, [r4, #12]
 8006bf0:	059b      	lsls	r3, r3, #22
 8006bf2:	d402      	bmi.n	8006bfa <_putc_r+0x5e>
 8006bf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bf6:	f7ff fa74 	bl	80060e2 <__retarget_lock_release_recursive>
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	bd70      	pop	{r4, r5, r6, pc}
 8006bfe:	4b09      	ldr	r3, [pc, #36]	; (8006c24 <_putc_r+0x88>)
 8006c00:	429c      	cmp	r4, r3
 8006c02:	d101      	bne.n	8006c08 <_putc_r+0x6c>
 8006c04:	68b4      	ldr	r4, [r6, #8]
 8006c06:	e7d6      	b.n	8006bb6 <_putc_r+0x1a>
 8006c08:	4b07      	ldr	r3, [pc, #28]	; (8006c28 <_putc_r+0x8c>)
 8006c0a:	429c      	cmp	r4, r3
 8006c0c:	bf08      	it	eq
 8006c0e:	68f4      	ldreq	r4, [r6, #12]
 8006c10:	e7d1      	b.n	8006bb6 <_putc_r+0x1a>
 8006c12:	4629      	mov	r1, r5
 8006c14:	4622      	mov	r2, r4
 8006c16:	4630      	mov	r0, r6
 8006c18:	f000 f85c 	bl	8006cd4 <__swbuf_r>
 8006c1c:	4605      	mov	r5, r0
 8006c1e:	e7e3      	b.n	8006be8 <_putc_r+0x4c>
 8006c20:	08007ea8 	.word	0x08007ea8
 8006c24:	08007ec8 	.word	0x08007ec8
 8006c28:	08007e88 	.word	0x08007e88

08006c2c <_sbrk_r>:
 8006c2c:	b538      	push	{r3, r4, r5, lr}
 8006c2e:	2300      	movs	r3, #0
 8006c30:	4d05      	ldr	r5, [pc, #20]	; (8006c48 <_sbrk_r+0x1c>)
 8006c32:	4604      	mov	r4, r0
 8006c34:	4608      	mov	r0, r1
 8006c36:	602b      	str	r3, [r5, #0]
 8006c38:	f7fa feca 	bl	80019d0 <_sbrk>
 8006c3c:	1c43      	adds	r3, r0, #1
 8006c3e:	d102      	bne.n	8006c46 <_sbrk_r+0x1a>
 8006c40:	682b      	ldr	r3, [r5, #0]
 8006c42:	b103      	cbz	r3, 8006c46 <_sbrk_r+0x1a>
 8006c44:	6023      	str	r3, [r4, #0]
 8006c46:	bd38      	pop	{r3, r4, r5, pc}
 8006c48:	2000094c 	.word	0x2000094c

08006c4c <__sread>:
 8006c4c:	b510      	push	{r4, lr}
 8006c4e:	460c      	mov	r4, r1
 8006c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c54:	f000 f994 	bl	8006f80 <_read_r>
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	bfab      	itete	ge
 8006c5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c5e:	89a3      	ldrhlt	r3, [r4, #12]
 8006c60:	181b      	addge	r3, r3, r0
 8006c62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c66:	bfac      	ite	ge
 8006c68:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c6a:	81a3      	strhlt	r3, [r4, #12]
 8006c6c:	bd10      	pop	{r4, pc}

08006c6e <__swrite>:
 8006c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c72:	461f      	mov	r7, r3
 8006c74:	898b      	ldrh	r3, [r1, #12]
 8006c76:	4605      	mov	r5, r0
 8006c78:	05db      	lsls	r3, r3, #23
 8006c7a:	460c      	mov	r4, r1
 8006c7c:	4616      	mov	r6, r2
 8006c7e:	d505      	bpl.n	8006c8c <__swrite+0x1e>
 8006c80:	2302      	movs	r3, #2
 8006c82:	2200      	movs	r2, #0
 8006c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c88:	f000 f928 	bl	8006edc <_lseek_r>
 8006c8c:	89a3      	ldrh	r3, [r4, #12]
 8006c8e:	4632      	mov	r2, r6
 8006c90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c94:	81a3      	strh	r3, [r4, #12]
 8006c96:	4628      	mov	r0, r5
 8006c98:	463b      	mov	r3, r7
 8006c9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca2:	f000 b869 	b.w	8006d78 <_write_r>

08006ca6 <__sseek>:
 8006ca6:	b510      	push	{r4, lr}
 8006ca8:	460c      	mov	r4, r1
 8006caa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cae:	f000 f915 	bl	8006edc <_lseek_r>
 8006cb2:	1c43      	adds	r3, r0, #1
 8006cb4:	89a3      	ldrh	r3, [r4, #12]
 8006cb6:	bf15      	itete	ne
 8006cb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006cba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006cbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006cc2:	81a3      	strheq	r3, [r4, #12]
 8006cc4:	bf18      	it	ne
 8006cc6:	81a3      	strhne	r3, [r4, #12]
 8006cc8:	bd10      	pop	{r4, pc}

08006cca <__sclose>:
 8006cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cce:	f000 b8d3 	b.w	8006e78 <_close_r>
	...

08006cd4 <__swbuf_r>:
 8006cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd6:	460e      	mov	r6, r1
 8006cd8:	4614      	mov	r4, r2
 8006cda:	4605      	mov	r5, r0
 8006cdc:	b118      	cbz	r0, 8006ce6 <__swbuf_r+0x12>
 8006cde:	6983      	ldr	r3, [r0, #24]
 8006ce0:	b90b      	cbnz	r3, 8006ce6 <__swbuf_r+0x12>
 8006ce2:	f7ff f95f 	bl	8005fa4 <__sinit>
 8006ce6:	4b21      	ldr	r3, [pc, #132]	; (8006d6c <__swbuf_r+0x98>)
 8006ce8:	429c      	cmp	r4, r3
 8006cea:	d12b      	bne.n	8006d44 <__swbuf_r+0x70>
 8006cec:	686c      	ldr	r4, [r5, #4]
 8006cee:	69a3      	ldr	r3, [r4, #24]
 8006cf0:	60a3      	str	r3, [r4, #8]
 8006cf2:	89a3      	ldrh	r3, [r4, #12]
 8006cf4:	071a      	lsls	r2, r3, #28
 8006cf6:	d52f      	bpl.n	8006d58 <__swbuf_r+0x84>
 8006cf8:	6923      	ldr	r3, [r4, #16]
 8006cfa:	b36b      	cbz	r3, 8006d58 <__swbuf_r+0x84>
 8006cfc:	6923      	ldr	r3, [r4, #16]
 8006cfe:	6820      	ldr	r0, [r4, #0]
 8006d00:	b2f6      	uxtb	r6, r6
 8006d02:	1ac0      	subs	r0, r0, r3
 8006d04:	6963      	ldr	r3, [r4, #20]
 8006d06:	4637      	mov	r7, r6
 8006d08:	4283      	cmp	r3, r0
 8006d0a:	dc04      	bgt.n	8006d16 <__swbuf_r+0x42>
 8006d0c:	4621      	mov	r1, r4
 8006d0e:	4628      	mov	r0, r5
 8006d10:	f7ff f8b4 	bl	8005e7c <_fflush_r>
 8006d14:	bb30      	cbnz	r0, 8006d64 <__swbuf_r+0x90>
 8006d16:	68a3      	ldr	r3, [r4, #8]
 8006d18:	3001      	adds	r0, #1
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	60a3      	str	r3, [r4, #8]
 8006d1e:	6823      	ldr	r3, [r4, #0]
 8006d20:	1c5a      	adds	r2, r3, #1
 8006d22:	6022      	str	r2, [r4, #0]
 8006d24:	701e      	strb	r6, [r3, #0]
 8006d26:	6963      	ldr	r3, [r4, #20]
 8006d28:	4283      	cmp	r3, r0
 8006d2a:	d004      	beq.n	8006d36 <__swbuf_r+0x62>
 8006d2c:	89a3      	ldrh	r3, [r4, #12]
 8006d2e:	07db      	lsls	r3, r3, #31
 8006d30:	d506      	bpl.n	8006d40 <__swbuf_r+0x6c>
 8006d32:	2e0a      	cmp	r6, #10
 8006d34:	d104      	bne.n	8006d40 <__swbuf_r+0x6c>
 8006d36:	4621      	mov	r1, r4
 8006d38:	4628      	mov	r0, r5
 8006d3a:	f7ff f89f 	bl	8005e7c <_fflush_r>
 8006d3e:	b988      	cbnz	r0, 8006d64 <__swbuf_r+0x90>
 8006d40:	4638      	mov	r0, r7
 8006d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d44:	4b0a      	ldr	r3, [pc, #40]	; (8006d70 <__swbuf_r+0x9c>)
 8006d46:	429c      	cmp	r4, r3
 8006d48:	d101      	bne.n	8006d4e <__swbuf_r+0x7a>
 8006d4a:	68ac      	ldr	r4, [r5, #8]
 8006d4c:	e7cf      	b.n	8006cee <__swbuf_r+0x1a>
 8006d4e:	4b09      	ldr	r3, [pc, #36]	; (8006d74 <__swbuf_r+0xa0>)
 8006d50:	429c      	cmp	r4, r3
 8006d52:	bf08      	it	eq
 8006d54:	68ec      	ldreq	r4, [r5, #12]
 8006d56:	e7ca      	b.n	8006cee <__swbuf_r+0x1a>
 8006d58:	4621      	mov	r1, r4
 8006d5a:	4628      	mov	r0, r5
 8006d5c:	f000 f81e 	bl	8006d9c <__swsetup_r>
 8006d60:	2800      	cmp	r0, #0
 8006d62:	d0cb      	beq.n	8006cfc <__swbuf_r+0x28>
 8006d64:	f04f 37ff 	mov.w	r7, #4294967295
 8006d68:	e7ea      	b.n	8006d40 <__swbuf_r+0x6c>
 8006d6a:	bf00      	nop
 8006d6c:	08007ea8 	.word	0x08007ea8
 8006d70:	08007ec8 	.word	0x08007ec8
 8006d74:	08007e88 	.word	0x08007e88

08006d78 <_write_r>:
 8006d78:	b538      	push	{r3, r4, r5, lr}
 8006d7a:	4604      	mov	r4, r0
 8006d7c:	4608      	mov	r0, r1
 8006d7e:	4611      	mov	r1, r2
 8006d80:	2200      	movs	r2, #0
 8006d82:	4d05      	ldr	r5, [pc, #20]	; (8006d98 <_write_r+0x20>)
 8006d84:	602a      	str	r2, [r5, #0]
 8006d86:	461a      	mov	r2, r3
 8006d88:	f7fa f93c 	bl	8001004 <_write>
 8006d8c:	1c43      	adds	r3, r0, #1
 8006d8e:	d102      	bne.n	8006d96 <_write_r+0x1e>
 8006d90:	682b      	ldr	r3, [r5, #0]
 8006d92:	b103      	cbz	r3, 8006d96 <_write_r+0x1e>
 8006d94:	6023      	str	r3, [r4, #0]
 8006d96:	bd38      	pop	{r3, r4, r5, pc}
 8006d98:	2000094c 	.word	0x2000094c

08006d9c <__swsetup_r>:
 8006d9c:	4b32      	ldr	r3, [pc, #200]	; (8006e68 <__swsetup_r+0xcc>)
 8006d9e:	b570      	push	{r4, r5, r6, lr}
 8006da0:	681d      	ldr	r5, [r3, #0]
 8006da2:	4606      	mov	r6, r0
 8006da4:	460c      	mov	r4, r1
 8006da6:	b125      	cbz	r5, 8006db2 <__swsetup_r+0x16>
 8006da8:	69ab      	ldr	r3, [r5, #24]
 8006daa:	b913      	cbnz	r3, 8006db2 <__swsetup_r+0x16>
 8006dac:	4628      	mov	r0, r5
 8006dae:	f7ff f8f9 	bl	8005fa4 <__sinit>
 8006db2:	4b2e      	ldr	r3, [pc, #184]	; (8006e6c <__swsetup_r+0xd0>)
 8006db4:	429c      	cmp	r4, r3
 8006db6:	d10f      	bne.n	8006dd8 <__swsetup_r+0x3c>
 8006db8:	686c      	ldr	r4, [r5, #4]
 8006dba:	89a3      	ldrh	r3, [r4, #12]
 8006dbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006dc0:	0719      	lsls	r1, r3, #28
 8006dc2:	d42c      	bmi.n	8006e1e <__swsetup_r+0x82>
 8006dc4:	06dd      	lsls	r5, r3, #27
 8006dc6:	d411      	bmi.n	8006dec <__swsetup_r+0x50>
 8006dc8:	2309      	movs	r3, #9
 8006dca:	6033      	str	r3, [r6, #0]
 8006dcc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd4:	81a3      	strh	r3, [r4, #12]
 8006dd6:	e03e      	b.n	8006e56 <__swsetup_r+0xba>
 8006dd8:	4b25      	ldr	r3, [pc, #148]	; (8006e70 <__swsetup_r+0xd4>)
 8006dda:	429c      	cmp	r4, r3
 8006ddc:	d101      	bne.n	8006de2 <__swsetup_r+0x46>
 8006dde:	68ac      	ldr	r4, [r5, #8]
 8006de0:	e7eb      	b.n	8006dba <__swsetup_r+0x1e>
 8006de2:	4b24      	ldr	r3, [pc, #144]	; (8006e74 <__swsetup_r+0xd8>)
 8006de4:	429c      	cmp	r4, r3
 8006de6:	bf08      	it	eq
 8006de8:	68ec      	ldreq	r4, [r5, #12]
 8006dea:	e7e6      	b.n	8006dba <__swsetup_r+0x1e>
 8006dec:	0758      	lsls	r0, r3, #29
 8006dee:	d512      	bpl.n	8006e16 <__swsetup_r+0x7a>
 8006df0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006df2:	b141      	cbz	r1, 8006e06 <__swsetup_r+0x6a>
 8006df4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006df8:	4299      	cmp	r1, r3
 8006dfa:	d002      	beq.n	8006e02 <__swsetup_r+0x66>
 8006dfc:	4630      	mov	r0, r6
 8006dfe:	f7ff f9dd 	bl	80061bc <_free_r>
 8006e02:	2300      	movs	r3, #0
 8006e04:	6363      	str	r3, [r4, #52]	; 0x34
 8006e06:	89a3      	ldrh	r3, [r4, #12]
 8006e08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e0c:	81a3      	strh	r3, [r4, #12]
 8006e0e:	2300      	movs	r3, #0
 8006e10:	6063      	str	r3, [r4, #4]
 8006e12:	6923      	ldr	r3, [r4, #16]
 8006e14:	6023      	str	r3, [r4, #0]
 8006e16:	89a3      	ldrh	r3, [r4, #12]
 8006e18:	f043 0308 	orr.w	r3, r3, #8
 8006e1c:	81a3      	strh	r3, [r4, #12]
 8006e1e:	6923      	ldr	r3, [r4, #16]
 8006e20:	b94b      	cbnz	r3, 8006e36 <__swsetup_r+0x9a>
 8006e22:	89a3      	ldrh	r3, [r4, #12]
 8006e24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e2c:	d003      	beq.n	8006e36 <__swsetup_r+0x9a>
 8006e2e:	4621      	mov	r1, r4
 8006e30:	4630      	mov	r0, r6
 8006e32:	f7ff f97b 	bl	800612c <__smakebuf_r>
 8006e36:	89a0      	ldrh	r0, [r4, #12]
 8006e38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e3c:	f010 0301 	ands.w	r3, r0, #1
 8006e40:	d00a      	beq.n	8006e58 <__swsetup_r+0xbc>
 8006e42:	2300      	movs	r3, #0
 8006e44:	60a3      	str	r3, [r4, #8]
 8006e46:	6963      	ldr	r3, [r4, #20]
 8006e48:	425b      	negs	r3, r3
 8006e4a:	61a3      	str	r3, [r4, #24]
 8006e4c:	6923      	ldr	r3, [r4, #16]
 8006e4e:	b943      	cbnz	r3, 8006e62 <__swsetup_r+0xc6>
 8006e50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e54:	d1ba      	bne.n	8006dcc <__swsetup_r+0x30>
 8006e56:	bd70      	pop	{r4, r5, r6, pc}
 8006e58:	0781      	lsls	r1, r0, #30
 8006e5a:	bf58      	it	pl
 8006e5c:	6963      	ldrpl	r3, [r4, #20]
 8006e5e:	60a3      	str	r3, [r4, #8]
 8006e60:	e7f4      	b.n	8006e4c <__swsetup_r+0xb0>
 8006e62:	2000      	movs	r0, #0
 8006e64:	e7f7      	b.n	8006e56 <__swsetup_r+0xba>
 8006e66:	bf00      	nop
 8006e68:	20000024 	.word	0x20000024
 8006e6c:	08007ea8 	.word	0x08007ea8
 8006e70:	08007ec8 	.word	0x08007ec8
 8006e74:	08007e88 	.word	0x08007e88

08006e78 <_close_r>:
 8006e78:	b538      	push	{r3, r4, r5, lr}
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	4d05      	ldr	r5, [pc, #20]	; (8006e94 <_close_r+0x1c>)
 8006e7e:	4604      	mov	r4, r0
 8006e80:	4608      	mov	r0, r1
 8006e82:	602b      	str	r3, [r5, #0]
 8006e84:	f7fa f8ea 	bl	800105c <_close>
 8006e88:	1c43      	adds	r3, r0, #1
 8006e8a:	d102      	bne.n	8006e92 <_close_r+0x1a>
 8006e8c:	682b      	ldr	r3, [r5, #0]
 8006e8e:	b103      	cbz	r3, 8006e92 <_close_r+0x1a>
 8006e90:	6023      	str	r3, [r4, #0]
 8006e92:	bd38      	pop	{r3, r4, r5, pc}
 8006e94:	2000094c 	.word	0x2000094c

08006e98 <_fstat_r>:
 8006e98:	b538      	push	{r3, r4, r5, lr}
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	4d06      	ldr	r5, [pc, #24]	; (8006eb8 <_fstat_r+0x20>)
 8006e9e:	4604      	mov	r4, r0
 8006ea0:	4608      	mov	r0, r1
 8006ea2:	4611      	mov	r1, r2
 8006ea4:	602b      	str	r3, [r5, #0]
 8006ea6:	f7fa f929 	bl	80010fc <_fstat>
 8006eaa:	1c43      	adds	r3, r0, #1
 8006eac:	d102      	bne.n	8006eb4 <_fstat_r+0x1c>
 8006eae:	682b      	ldr	r3, [r5, #0]
 8006eb0:	b103      	cbz	r3, 8006eb4 <_fstat_r+0x1c>
 8006eb2:	6023      	str	r3, [r4, #0]
 8006eb4:	bd38      	pop	{r3, r4, r5, pc}
 8006eb6:	bf00      	nop
 8006eb8:	2000094c 	.word	0x2000094c

08006ebc <_isatty_r>:
 8006ebc:	b538      	push	{r3, r4, r5, lr}
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	4d05      	ldr	r5, [pc, #20]	; (8006ed8 <_isatty_r+0x1c>)
 8006ec2:	4604      	mov	r4, r0
 8006ec4:	4608      	mov	r0, r1
 8006ec6:	602b      	str	r3, [r5, #0]
 8006ec8:	f7fa f886 	bl	8000fd8 <_isatty>
 8006ecc:	1c43      	adds	r3, r0, #1
 8006ece:	d102      	bne.n	8006ed6 <_isatty_r+0x1a>
 8006ed0:	682b      	ldr	r3, [r5, #0]
 8006ed2:	b103      	cbz	r3, 8006ed6 <_isatty_r+0x1a>
 8006ed4:	6023      	str	r3, [r4, #0]
 8006ed6:	bd38      	pop	{r3, r4, r5, pc}
 8006ed8:	2000094c 	.word	0x2000094c

08006edc <_lseek_r>:
 8006edc:	b538      	push	{r3, r4, r5, lr}
 8006ede:	4604      	mov	r4, r0
 8006ee0:	4608      	mov	r0, r1
 8006ee2:	4611      	mov	r1, r2
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	4d05      	ldr	r5, [pc, #20]	; (8006efc <_lseek_r+0x20>)
 8006ee8:	602a      	str	r2, [r5, #0]
 8006eea:	461a      	mov	r2, r3
 8006eec:	f7fa f8cd 	bl	800108a <_lseek>
 8006ef0:	1c43      	adds	r3, r0, #1
 8006ef2:	d102      	bne.n	8006efa <_lseek_r+0x1e>
 8006ef4:	682b      	ldr	r3, [r5, #0]
 8006ef6:	b103      	cbz	r3, 8006efa <_lseek_r+0x1e>
 8006ef8:	6023      	str	r3, [r4, #0]
 8006efa:	bd38      	pop	{r3, r4, r5, pc}
 8006efc:	2000094c 	.word	0x2000094c

08006f00 <memchr>:
 8006f00:	4603      	mov	r3, r0
 8006f02:	b510      	push	{r4, lr}
 8006f04:	b2c9      	uxtb	r1, r1
 8006f06:	4402      	add	r2, r0
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	d101      	bne.n	8006f12 <memchr+0x12>
 8006f0e:	2000      	movs	r0, #0
 8006f10:	e003      	b.n	8006f1a <memchr+0x1a>
 8006f12:	7804      	ldrb	r4, [r0, #0]
 8006f14:	3301      	adds	r3, #1
 8006f16:	428c      	cmp	r4, r1
 8006f18:	d1f6      	bne.n	8006f08 <memchr+0x8>
 8006f1a:	bd10      	pop	{r4, pc}

08006f1c <__malloc_lock>:
 8006f1c:	4801      	ldr	r0, [pc, #4]	; (8006f24 <__malloc_lock+0x8>)
 8006f1e:	f7ff b8df 	b.w	80060e0 <__retarget_lock_acquire_recursive>
 8006f22:	bf00      	nop
 8006f24:	20000944 	.word	0x20000944

08006f28 <__malloc_unlock>:
 8006f28:	4801      	ldr	r0, [pc, #4]	; (8006f30 <__malloc_unlock+0x8>)
 8006f2a:	f7ff b8da 	b.w	80060e2 <__retarget_lock_release_recursive>
 8006f2e:	bf00      	nop
 8006f30:	20000944 	.word	0x20000944

08006f34 <_realloc_r>:
 8006f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f36:	4607      	mov	r7, r0
 8006f38:	4614      	mov	r4, r2
 8006f3a:	460e      	mov	r6, r1
 8006f3c:	b921      	cbnz	r1, 8006f48 <_realloc_r+0x14>
 8006f3e:	4611      	mov	r1, r2
 8006f40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006f44:	f7ff b986 	b.w	8006254 <_malloc_r>
 8006f48:	b922      	cbnz	r2, 8006f54 <_realloc_r+0x20>
 8006f4a:	f7ff f937 	bl	80061bc <_free_r>
 8006f4e:	4625      	mov	r5, r4
 8006f50:	4628      	mov	r0, r5
 8006f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f54:	f000 f826 	bl	8006fa4 <_malloc_usable_size_r>
 8006f58:	42a0      	cmp	r0, r4
 8006f5a:	d20f      	bcs.n	8006f7c <_realloc_r+0x48>
 8006f5c:	4621      	mov	r1, r4
 8006f5e:	4638      	mov	r0, r7
 8006f60:	f7ff f978 	bl	8006254 <_malloc_r>
 8006f64:	4605      	mov	r5, r0
 8006f66:	2800      	cmp	r0, #0
 8006f68:	d0f2      	beq.n	8006f50 <_realloc_r+0x1c>
 8006f6a:	4631      	mov	r1, r6
 8006f6c:	4622      	mov	r2, r4
 8006f6e:	f7fe fd83 	bl	8005a78 <memcpy>
 8006f72:	4631      	mov	r1, r6
 8006f74:	4638      	mov	r0, r7
 8006f76:	f7ff f921 	bl	80061bc <_free_r>
 8006f7a:	e7e9      	b.n	8006f50 <_realloc_r+0x1c>
 8006f7c:	4635      	mov	r5, r6
 8006f7e:	e7e7      	b.n	8006f50 <_realloc_r+0x1c>

08006f80 <_read_r>:
 8006f80:	b538      	push	{r3, r4, r5, lr}
 8006f82:	4604      	mov	r4, r0
 8006f84:	4608      	mov	r0, r1
 8006f86:	4611      	mov	r1, r2
 8006f88:	2200      	movs	r2, #0
 8006f8a:	4d05      	ldr	r5, [pc, #20]	; (8006fa0 <_read_r+0x20>)
 8006f8c:	602a      	str	r2, [r5, #0]
 8006f8e:	461a      	mov	r2, r3
 8006f90:	f7fa f88c 	bl	80010ac <_read>
 8006f94:	1c43      	adds	r3, r0, #1
 8006f96:	d102      	bne.n	8006f9e <_read_r+0x1e>
 8006f98:	682b      	ldr	r3, [r5, #0]
 8006f9a:	b103      	cbz	r3, 8006f9e <_read_r+0x1e>
 8006f9c:	6023      	str	r3, [r4, #0]
 8006f9e:	bd38      	pop	{r3, r4, r5, pc}
 8006fa0:	2000094c 	.word	0x2000094c

08006fa4 <_malloc_usable_size_r>:
 8006fa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fa8:	1f18      	subs	r0, r3, #4
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	bfbc      	itt	lt
 8006fae:	580b      	ldrlt	r3, [r1, r0]
 8006fb0:	18c0      	addlt	r0, r0, r3
 8006fb2:	4770      	bx	lr

08006fb4 <_init>:
 8006fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fb6:	bf00      	nop
 8006fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fba:	bc08      	pop	{r3}
 8006fbc:	469e      	mov	lr, r3
 8006fbe:	4770      	bx	lr

08006fc0 <_fini>:
 8006fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fc2:	bf00      	nop
 8006fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fc6:	bc08      	pop	{r3}
 8006fc8:	469e      	mov	lr, r3
 8006fca:	4770      	bx	lr
