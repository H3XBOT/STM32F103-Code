
Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005310  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fb8  0800541c  0800541c  0001541c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063d4  080063d4  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080063d4  080063d4  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080063d4  080063d4  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063d4  080063d4  000163d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063d8  080063d8  000163d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080063dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b0  20000088  08006460  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000638  08006460  00020638  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d4aa  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002237  00000000  00000000  0002d557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  0002f790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d98  00000000  00000000  00030610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184be  00000000  00000000  000313a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012811  00000000  00000000  00049866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bd6e  00000000  00000000  0005c077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e7de5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004094  00000000  00000000  000e7e38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08005404 	.word	0x08005404

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08005404 	.word	0x08005404

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f002 f868 	bl	8002224 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f81c 	bl	8000190 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f9a0 	bl	800049c <MX_GPIO_Init>
  MX_I2C2_Init();
 800015c:	f000 f85e 	bl	800021c <MX_I2C2_Init>
  MX_TIM1_Init();
 8000160:	f000 f88a 	bl	8000278 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000164:	f000 f926 	bl	80003b4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000168:	f001 fcfc 	bl	8001b64 <ssd1306_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 800016c:	4806      	ldr	r0, [pc, #24]	; (8000188 <main+0x3c>)
 800016e:	f003 fe69 	bl	8003e44 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000172:	4806      	ldr	r0, [pc, #24]	; (800018c <main+0x40>)
 8000174:	f003 fe66 	bl	8003e44 <HAL_TIM_Base_Start_IT>
  read_time();
 8000178:	f001 fb96 	bl	80018a8 <read_time>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  mode_check();
 800017c:	f000 fa4a 	bl	8000614 <mode_check>
	  oled_show();
 8000180:	f000 fabc 	bl	80006fc <oled_show>
	  mode_check();
 8000184:	e7fa      	b.n	800017c <main+0x30>
 8000186:	bf00      	nop
 8000188:	200000f8 	.word	0x200000f8
 800018c:	20000140 	.word	0x20000140

08000190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b090      	sub	sp, #64	; 0x40
 8000194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000196:	f107 0318 	add.w	r3, r7, #24
 800019a:	2228      	movs	r2, #40	; 0x28
 800019c:	2100      	movs	r1, #0
 800019e:	4618      	mov	r0, r3
 80001a0:	f004 fcd6 	bl	8004b50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	2200      	movs	r2, #0
 80001a8:	601a      	str	r2, [r3, #0]
 80001aa:	605a      	str	r2, [r3, #4]
 80001ac:	609a      	str	r2, [r3, #8]
 80001ae:	60da      	str	r2, [r3, #12]
 80001b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001b2:	2301      	movs	r3, #1
 80001b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001bc:	2300      	movs	r3, #0
 80001be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c0:	2301      	movs	r3, #1
 80001c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001c4:	2302      	movs	r3, #2
 80001c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d4:	f107 0318 	add.w	r3, r7, #24
 80001d8:	4618      	mov	r0, r3
 80001da:	f003 f9dd 	bl	8003598 <HAL_RCC_OscConfig>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d001      	beq.n	80001e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001e4:	f001 fc80 	bl	8001ae8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e8:	230f      	movs	r3, #15
 80001ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001ec:	2302      	movs	r3, #2
 80001ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f0:	2300      	movs	r3, #0
 80001f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001fa:	2300      	movs	r3, #0
 80001fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001fe:	1d3b      	adds	r3, r7, #4
 8000200:	2102      	movs	r1, #2
 8000202:	4618      	mov	r0, r3
 8000204:	f003 fc4a 	bl	8003a9c <HAL_RCC_ClockConfig>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d001      	beq.n	8000212 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800020e:	f001 fc6b 	bl	8001ae8 <Error_Handler>
  }
}
 8000212:	bf00      	nop
 8000214:	3740      	adds	r7, #64	; 0x40
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
	...

0800021c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000220:	4b12      	ldr	r3, [pc, #72]	; (800026c <MX_I2C2_Init+0x50>)
 8000222:	4a13      	ldr	r2, [pc, #76]	; (8000270 <MX_I2C2_Init+0x54>)
 8000224:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000226:	4b11      	ldr	r3, [pc, #68]	; (800026c <MX_I2C2_Init+0x50>)
 8000228:	4a12      	ldr	r2, [pc, #72]	; (8000274 <MX_I2C2_Init+0x58>)
 800022a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800022c:	4b0f      	ldr	r3, [pc, #60]	; (800026c <MX_I2C2_Init+0x50>)
 800022e:	2200      	movs	r2, #0
 8000230:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000232:	4b0e      	ldr	r3, [pc, #56]	; (800026c <MX_I2C2_Init+0x50>)
 8000234:	2200      	movs	r2, #0
 8000236:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000238:	4b0c      	ldr	r3, [pc, #48]	; (800026c <MX_I2C2_Init+0x50>)
 800023a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800023e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000240:	4b0a      	ldr	r3, [pc, #40]	; (800026c <MX_I2C2_Init+0x50>)
 8000242:	2200      	movs	r2, #0
 8000244:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000246:	4b09      	ldr	r3, [pc, #36]	; (800026c <MX_I2C2_Init+0x50>)
 8000248:	2200      	movs	r2, #0
 800024a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800024c:	4b07      	ldr	r3, [pc, #28]	; (800026c <MX_I2C2_Init+0x50>)
 800024e:	2200      	movs	r2, #0
 8000250:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000252:	4b06      	ldr	r3, [pc, #24]	; (800026c <MX_I2C2_Init+0x50>)
 8000254:	2200      	movs	r2, #0
 8000256:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <MX_I2C2_Init+0x50>)
 800025a:	f002 fd43 	bl	8002ce4 <HAL_I2C_Init>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000264:	f001 fc40 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000268:	bf00      	nop
 800026a:	bd80      	pop	{r7, pc}
 800026c:	200000a4 	.word	0x200000a4
 8000270:	40005800 	.word	0x40005800
 8000274:	000186a0 	.word	0x000186a0

08000278 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b096      	sub	sp, #88	; 0x58
 800027c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800027e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	605a      	str	r2, [r3, #4]
 8000288:	609a      	str	r2, [r3, #8]
 800028a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800028c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]
 80002a4:	611a      	str	r2, [r3, #16]
 80002a6:	615a      	str	r2, [r3, #20]
 80002a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2220      	movs	r2, #32
 80002ae:	2100      	movs	r1, #0
 80002b0:	4618      	mov	r0, r3
 80002b2:	f004 fc4d 	bl	8004b50 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002b6:	4b3d      	ldr	r3, [pc, #244]	; (80003ac <MX_TIM1_Init+0x134>)
 80002b8:	4a3d      	ldr	r2, [pc, #244]	; (80003b0 <MX_TIM1_Init+0x138>)
 80002ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1199;
 80002bc:	4b3b      	ldr	r3, [pc, #236]	; (80003ac <MX_TIM1_Init+0x134>)
 80002be:	f240 42af 	movw	r2, #1199	; 0x4af
 80002c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002c4:	4b39      	ldr	r3, [pc, #228]	; (80003ac <MX_TIM1_Init+0x134>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59999;
 80002ca:	4b38      	ldr	r3, [pc, #224]	; (80003ac <MX_TIM1_Init+0x134>)
 80002cc:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80002d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002d2:	4b36      	ldr	r3, [pc, #216]	; (80003ac <MX_TIM1_Init+0x134>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80002d8:	4b34      	ldr	r3, [pc, #208]	; (80003ac <MX_TIM1_Init+0x134>)
 80002da:	2200      	movs	r2, #0
 80002dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002de:	4b33      	ldr	r3, [pc, #204]	; (80003ac <MX_TIM1_Init+0x134>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80002e4:	4831      	ldr	r0, [pc, #196]	; (80003ac <MX_TIM1_Init+0x134>)
 80002e6:	f003 fd5d 	bl	8003da4 <HAL_TIM_Base_Init>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80002f0:	f001 fbfa 	bl	8001ae8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002f8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80002fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80002fe:	4619      	mov	r1, r3
 8000300:	482a      	ldr	r0, [pc, #168]	; (80003ac <MX_TIM1_Init+0x134>)
 8000302:	f003 ffa9 	bl	8004258 <HAL_TIM_ConfigClockSource>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800030c:	f001 fbec 	bl	8001ae8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000310:	4826      	ldr	r0, [pc, #152]	; (80003ac <MX_TIM1_Init+0x134>)
 8000312:	f003 fde9 	bl	8003ee8 <HAL_TIM_OC_Init>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800031c:	f001 fbe4 	bl	8001ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000320:	2300      	movs	r3, #0
 8000322:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000324:	2300      	movs	r3, #0
 8000326:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000328:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800032c:	4619      	mov	r1, r3
 800032e:	481f      	ldr	r0, [pc, #124]	; (80003ac <MX_TIM1_Init+0x134>)
 8000330:	f004 fafa 	bl	8004928 <HAL_TIMEx_MasterConfigSynchronization>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800033a:	f001 fbd5 	bl	8001ae8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800033e:	2300      	movs	r3, #0
 8000340:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000342:	2300      	movs	r3, #0
 8000344:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000346:	2300      	movs	r3, #0
 8000348:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800034a:	2300      	movs	r3, #0
 800034c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800034e:	2300      	movs	r3, #0
 8000350:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000352:	2300      	movs	r3, #0
 8000354:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000356:	2300      	movs	r3, #0
 8000358:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800035a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800035e:	2200      	movs	r2, #0
 8000360:	4619      	mov	r1, r3
 8000362:	4812      	ldr	r0, [pc, #72]	; (80003ac <MX_TIM1_Init+0x134>)
 8000364:	f003 ff20 	bl	80041a8 <HAL_TIM_OC_ConfigChannel>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800036e:	f001 fbbb 	bl	8001ae8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000372:	2300      	movs	r3, #0
 8000374:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000376:	2300      	movs	r3, #0
 8000378:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800037a:	2300      	movs	r3, #0
 800037c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800037e:	2300      	movs	r3, #0
 8000380:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000382:	2300      	movs	r3, #0
 8000384:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000386:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800038a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800038c:	2300      	movs	r3, #0
 800038e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	4619      	mov	r1, r3
 8000394:	4805      	ldr	r0, [pc, #20]	; (80003ac <MX_TIM1_Init+0x134>)
 8000396:	f004 fb25 	bl	80049e4 <HAL_TIMEx_ConfigBreakDeadTime>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80003a0:	f001 fba2 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80003a4:	bf00      	nop
 80003a6:	3758      	adds	r7, #88	; 0x58
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	200000f8 	.word	0x200000f8
 80003b0:	40012c00 	.word	0x40012c00

080003b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b08e      	sub	sp, #56	; 0x38
 80003b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
 80003c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003c8:	f107 0320 	add.w	r3, r7, #32
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	2200      	movs	r2, #0
 80003d6:	601a      	str	r2, [r3, #0]
 80003d8:	605a      	str	r2, [r3, #4]
 80003da:	609a      	str	r2, [r3, #8]
 80003dc:	60da      	str	r2, [r3, #12]
 80003de:	611a      	str	r2, [r3, #16]
 80003e0:	615a      	str	r2, [r3, #20]
 80003e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003e4:	4b2c      	ldr	r3, [pc, #176]	; (8000498 <MX_TIM2_Init+0xe4>)
 80003e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1199;
 80003ec:	4b2a      	ldr	r3, [pc, #168]	; (8000498 <MX_TIM2_Init+0xe4>)
 80003ee:	f240 42af 	movw	r2, #1199	; 0x4af
 80003f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f4:	4b28      	ldr	r3, [pc, #160]	; (8000498 <MX_TIM2_Init+0xe4>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 29999;
 80003fa:	4b27      	ldr	r3, [pc, #156]	; (8000498 <MX_TIM2_Init+0xe4>)
 80003fc:	f247 522f 	movw	r2, #29999	; 0x752f
 8000400:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000402:	4b25      	ldr	r3, [pc, #148]	; (8000498 <MX_TIM2_Init+0xe4>)
 8000404:	2200      	movs	r2, #0
 8000406:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000408:	4b23      	ldr	r3, [pc, #140]	; (8000498 <MX_TIM2_Init+0xe4>)
 800040a:	2200      	movs	r2, #0
 800040c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800040e:	4822      	ldr	r0, [pc, #136]	; (8000498 <MX_TIM2_Init+0xe4>)
 8000410:	f003 fcc8 	bl	8003da4 <HAL_TIM_Base_Init>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800041a:	f001 fb65 	bl	8001ae8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800041e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000422:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000424:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000428:	4619      	mov	r1, r3
 800042a:	481b      	ldr	r0, [pc, #108]	; (8000498 <MX_TIM2_Init+0xe4>)
 800042c:	f003 ff14 	bl	8004258 <HAL_TIM_ConfigClockSource>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000436:	f001 fb57 	bl	8001ae8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800043a:	4817      	ldr	r0, [pc, #92]	; (8000498 <MX_TIM2_Init+0xe4>)
 800043c:	f003 fd54 	bl	8003ee8 <HAL_TIM_OC_Init>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000446:	f001 fb4f 	bl	8001ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800044a:	2300      	movs	r3, #0
 800044c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800044e:	2300      	movs	r3, #0
 8000450:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000452:	f107 0320 	add.w	r3, r7, #32
 8000456:	4619      	mov	r1, r3
 8000458:	480f      	ldr	r0, [pc, #60]	; (8000498 <MX_TIM2_Init+0xe4>)
 800045a:	f004 fa65 	bl	8004928 <HAL_TIMEx_MasterConfigSynchronization>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000464:	f001 fb40 	bl	8001ae8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000468:	2300      	movs	r3, #0
 800046a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800046c:	2300      	movs	r3, #0
 800046e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000470:	2300      	movs	r3, #0
 8000472:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000474:	2300      	movs	r3, #0
 8000476:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2200      	movs	r2, #0
 800047c:	4619      	mov	r1, r3
 800047e:	4806      	ldr	r0, [pc, #24]	; (8000498 <MX_TIM2_Init+0xe4>)
 8000480:	f003 fe92 	bl	80041a8 <HAL_TIM_OC_ConfigChannel>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800048a:	f001 fb2d 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800048e:	bf00      	nop
 8000490:	3738      	adds	r7, #56	; 0x38
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	20000140 	.word	0x20000140

0800049c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b08a      	sub	sp, #40	; 0x28
 80004a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a2:	f107 0318 	add.w	r3, r7, #24
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
 80004ac:	609a      	str	r2, [r3, #8]
 80004ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b0:	4b52      	ldr	r3, [pc, #328]	; (80005fc <MX_GPIO_Init+0x160>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	4a51      	ldr	r2, [pc, #324]	; (80005fc <MX_GPIO_Init+0x160>)
 80004b6:	f043 0304 	orr.w	r3, r3, #4
 80004ba:	6193      	str	r3, [r2, #24]
 80004bc:	4b4f      	ldr	r3, [pc, #316]	; (80005fc <MX_GPIO_Init+0x160>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	f003 0304 	and.w	r3, r3, #4
 80004c4:	617b      	str	r3, [r7, #20]
 80004c6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004c8:	4b4c      	ldr	r3, [pc, #304]	; (80005fc <MX_GPIO_Init+0x160>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	4a4b      	ldr	r2, [pc, #300]	; (80005fc <MX_GPIO_Init+0x160>)
 80004ce:	f043 0310 	orr.w	r3, r3, #16
 80004d2:	6193      	str	r3, [r2, #24]
 80004d4:	4b49      	ldr	r3, [pc, #292]	; (80005fc <MX_GPIO_Init+0x160>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	f003 0310 	and.w	r3, r3, #16
 80004dc:	613b      	str	r3, [r7, #16]
 80004de:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e0:	4b46      	ldr	r3, [pc, #280]	; (80005fc <MX_GPIO_Init+0x160>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	4a45      	ldr	r2, [pc, #276]	; (80005fc <MX_GPIO_Init+0x160>)
 80004e6:	f043 0308 	orr.w	r3, r3, #8
 80004ea:	6193      	str	r3, [r2, #24]
 80004ec:	4b43      	ldr	r3, [pc, #268]	; (80005fc <MX_GPIO_Init+0x160>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	f003 0308 	and.w	r3, r3, #8
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004f8:	4b40      	ldr	r3, [pc, #256]	; (80005fc <MX_GPIO_Init+0x160>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	4a3f      	ldr	r2, [pc, #252]	; (80005fc <MX_GPIO_Init+0x160>)
 80004fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000502:	6193      	str	r3, [r2, #24]
 8000504:	4b3d      	ldr	r3, [pc, #244]	; (80005fc <MX_GPIO_Init+0x160>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800050c:	60bb      	str	r3, [r7, #8]
 800050e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000510:	4b3a      	ldr	r3, [pc, #232]	; (80005fc <MX_GPIO_Init+0x160>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	4a39      	ldr	r2, [pc, #228]	; (80005fc <MX_GPIO_Init+0x160>)
 8000516:	f043 0320 	orr.w	r3, r3, #32
 800051a:	6193      	str	r3, [r2, #24]
 800051c:	4b37      	ldr	r3, [pc, #220]	; (80005fc <MX_GPIO_Init+0x160>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	f003 0320 	and.w	r3, r3, #32
 8000524:	607b      	str	r3, [r7, #4]
 8000526:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_3, GPIO_PIN_RESET);
 8000528:	2200      	movs	r2, #0
 800052a:	2109      	movs	r1, #9
 800052c:	4834      	ldr	r0, [pc, #208]	; (8000600 <MX_GPIO_Init+0x164>)
 800052e:	f002 fba8 	bl	8002c82 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000532:	2200      	movs	r2, #0
 8000534:	21f0      	movs	r1, #240	; 0xf0
 8000536:	4833      	ldr	r0, [pc, #204]	; (8000604 <MX_GPIO_Init+0x168>)
 8000538:	f002 fba3 	bl	8002c82 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	f24c 0103 	movw	r1, #49155	; 0xc003
 8000542:	4831      	ldr	r0, [pc, #196]	; (8000608 <MX_GPIO_Init+0x16c>)
 8000544:	f002 fb9d 	bl	8002c82 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	2103      	movs	r1, #3
 800054c:	482f      	ldr	r0, [pc, #188]	; (800060c <MX_GPIO_Init+0x170>)
 800054e:	f002 fb98 	bl	8002c82 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000552:	2309      	movs	r3, #9
 8000554:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000556:	2301      	movs	r3, #1
 8000558:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	2300      	movs	r3, #0
 800055c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055e:	2302      	movs	r3, #2
 8000560:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000562:	f107 0318 	add.w	r3, r7, #24
 8000566:	4619      	mov	r1, r3
 8000568:	4825      	ldr	r0, [pc, #148]	; (8000600 <MX_GPIO_Init+0x164>)
 800056a:	f002 f9ef 	bl	800294c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800056e:	23f0      	movs	r3, #240	; 0xf0
 8000570:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000572:	2301      	movs	r3, #1
 8000574:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000576:	2300      	movs	r3, #0
 8000578:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057a:	2302      	movs	r3, #2
 800057c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800057e:	f107 0318 	add.w	r3, r7, #24
 8000582:	4619      	mov	r1, r3
 8000584:	481f      	ldr	r0, [pc, #124]	; (8000604 <MX_GPIO_Init+0x168>)
 8000586:	f002 f9e1 	bl	800294c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW4_Pin SW3_Pin */
  GPIO_InitStruct.Pin = SW4_Pin|SW3_Pin;
 800058a:	2341      	movs	r3, #65	; 0x41
 800058c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800058e:	2300      	movs	r3, #0
 8000590:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	2300      	movs	r3, #0
 8000594:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000596:	f107 0318 	add.w	r3, r7, #24
 800059a:	4619      	mov	r1, r3
 800059c:	481c      	ldr	r0, [pc, #112]	; (8000610 <MX_GPIO_Init+0x174>)
 800059e:	f002 f9d5 	bl	800294c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
 80005a2:	f24c 0303 	movw	r3, #49155	; 0xc003
 80005a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a8:	2301      	movs	r3, #1
 80005aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b0:	2302      	movs	r3, #2
 80005b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005b4:	f107 0318 	add.w	r3, r7, #24
 80005b8:	4619      	mov	r1, r3
 80005ba:	4813      	ldr	r0, [pc, #76]	; (8000608 <MX_GPIO_Init+0x16c>)
 80005bc:	f002 f9c6 	bl	800294c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005c0:	2303      	movs	r3, #3
 80005c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c4:	2301      	movs	r3, #1
 80005c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c8:	2300      	movs	r3, #0
 80005ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005cc:	2302      	movs	r3, #2
 80005ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005d0:	f107 0318 	add.w	r3, r7, #24
 80005d4:	4619      	mov	r1, r3
 80005d6:	480d      	ldr	r0, [pc, #52]	; (800060c <MX_GPIO_Init+0x170>)
 80005d8:	f002 f9b8 	bl	800294c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin SW1_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|SW1_Pin;
 80005dc:	2318      	movs	r3, #24
 80005de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005e8:	f107 0318 	add.w	r3, r7, #24
 80005ec:	4619      	mov	r1, r3
 80005ee:	4807      	ldr	r0, [pc, #28]	; (800060c <MX_GPIO_Init+0x170>)
 80005f0:	f002 f9ac 	bl	800294c <HAL_GPIO_Init>

}
 80005f4:	bf00      	nop
 80005f6:	3728      	adds	r7, #40	; 0x28
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40021000 	.word	0x40021000
 8000600:	40010800 	.word	0x40010800
 8000604:	40011000 	.word	0x40011000
 8000608:	40011800 	.word	0x40011800
 800060c:	40011400 	.word	0x40011400
 8000610:	40010c00 	.word	0x40010c00

08000614 <mode_check>:

/* USER CODE BEGIN 4 */
void mode_check(){
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
	int sw = check_sw();
 800061a:	f001 f86f 	bl	80016fc <check_sw>
 800061e:	6078      	str	r0, [r7, #4]
	if(sw == 0)return;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d060      	beq.n	80006e8 <mode_check+0xd4>
	if(sw == 1){
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2b01      	cmp	r3, #1
 800062a:	d114      	bne.n	8000656 <mode_check+0x42>
		if(clockmode == 0 || clockmode == 1){
 800062c:	4b31      	ldr	r3, [pc, #196]	; (80006f4 <mode_check+0xe0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d003      	beq.n	800063c <mode_check+0x28>
 8000634:	4b2f      	ldr	r3, [pc, #188]	; (80006f4 <mode_check+0xe0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d105      	bne.n	8000648 <mode_check+0x34>
			clockmode++;
 800063c:	4b2d      	ldr	r3, [pc, #180]	; (80006f4 <mode_check+0xe0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	3301      	adds	r3, #1
 8000642:	4a2c      	ldr	r2, [pc, #176]	; (80006f4 <mode_check+0xe0>)
 8000644:	6013      	str	r3, [r2, #0]
 8000646:	e006      	b.n	8000656 <mode_check+0x42>
		}
		else if(clockmode == 2)clockmode = 0;
 8000648:	4b2a      	ldr	r3, [pc, #168]	; (80006f4 <mode_check+0xe0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2b02      	cmp	r3, #2
 800064e:	d102      	bne.n	8000656 <mode_check+0x42>
 8000650:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <mode_check+0xe0>)
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
	}

	//change the alarm being displayed
	if(clockmode == 2){
 8000656:	4b27      	ldr	r3, [pc, #156]	; (80006f4 <mode_check+0xe0>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2b02      	cmp	r3, #2
 800065c:	d10b      	bne.n	8000676 <mode_check+0x62>
		if(sw == 3)alarm = 0;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2b03      	cmp	r3, #3
 8000662:	d102      	bne.n	800066a <mode_check+0x56>
 8000664:	4b24      	ldr	r3, [pc, #144]	; (80006f8 <mode_check+0xe4>)
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
		if(sw == 2)alarm = 1;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2b02      	cmp	r3, #2
 800066e:	d102      	bne.n	8000676 <mode_check+0x62>
 8000670:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <mode_check+0xe4>)
 8000672:	2201      	movs	r2, #1
 8000674:	601a      	str	r2, [r3, #0]
	}

	//setmode
	if(sw == 4){
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2b04      	cmp	r3, #4
 800067a:	d137      	bne.n	80006ec <mode_check+0xd8>
		if(clockmode == 0){
 800067c:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <mode_check+0xe0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d103      	bne.n	800068c <mode_check+0x78>
			//set_time
			clockmode = 3;
 8000684:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <mode_check+0xe0>)
 8000686:	2203      	movs	r2, #3
 8000688:	601a      	str	r2, [r3, #0]
		else if(clockmode == 5){
			store_time();
			clockmode = 2;
		}
	}
	return;
 800068a:	e02f      	b.n	80006ec <mode_check+0xd8>
		else if(clockmode == 1){
 800068c:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <mode_check+0xe0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b01      	cmp	r3, #1
 8000692:	d103      	bne.n	800069c <mode_check+0x88>
			clockmode = 4;
 8000694:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <mode_check+0xe0>)
 8000696:	2204      	movs	r2, #4
 8000698:	601a      	str	r2, [r3, #0]
	return;
 800069a:	e027      	b.n	80006ec <mode_check+0xd8>
		else if(clockmode == 2){
 800069c:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <mode_check+0xe0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b02      	cmp	r3, #2
 80006a2:	d103      	bne.n	80006ac <mode_check+0x98>
			clockmode = 5;
 80006a4:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <mode_check+0xe0>)
 80006a6:	2205      	movs	r2, #5
 80006a8:	601a      	str	r2, [r3, #0]
	return;
 80006aa:	e01f      	b.n	80006ec <mode_check+0xd8>
		}else if(clockmode == 3){
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <mode_check+0xe0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b03      	cmp	r3, #3
 80006b2:	d105      	bne.n	80006c0 <mode_check+0xac>
			store_time();
 80006b4:	f001 f87e 	bl	80017b4 <store_time>
			clockmode = 0;
 80006b8:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <mode_check+0xe0>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
	return;
 80006be:	e015      	b.n	80006ec <mode_check+0xd8>
		else if(clockmode == 4){
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <mode_check+0xe0>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b04      	cmp	r3, #4
 80006c6:	d105      	bne.n	80006d4 <mode_check+0xc0>
			store_time();
 80006c8:	f001 f874 	bl	80017b4 <store_time>
			clockmode = 1;
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <mode_check+0xe0>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	601a      	str	r2, [r3, #0]
	return;
 80006d2:	e00b      	b.n	80006ec <mode_check+0xd8>
		else if(clockmode == 5){
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <mode_check+0xe0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b05      	cmp	r3, #5
 80006da:	d107      	bne.n	80006ec <mode_check+0xd8>
			store_time();
 80006dc:	f001 f86a 	bl	80017b4 <store_time>
			clockmode = 2;
 80006e0:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <mode_check+0xe0>)
 80006e2:	2202      	movs	r2, #2
 80006e4:	601a      	str	r2, [r3, #0]
	return;
 80006e6:	e001      	b.n	80006ec <mode_check+0xd8>
	if(sw == 0)return;
 80006e8:	bf00      	nop
 80006ea:	e000      	b.n	80006ee <mode_check+0xda>
	return;
 80006ec:	bf00      	nop
}
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000188 	.word	0x20000188
 80006f8:	200001bc 	.word	0x200001bc

080006fc <oled_show>:

void oled_show(){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	//clock mode
	if(clockmode == 0){
 8000700:	4b29      	ldr	r3, [pc, #164]	; (80007a8 <oled_show+0xac>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d102      	bne.n	800070e <oled_show+0x12>
		show_time();
 8000708:	f000 f858 	bl	80007bc <show_time>
 800070c:	e026      	b.n	800075c <oled_show+0x60>
	}
	//calendar mode
	else if(clockmode == 1){
 800070e:	4b26      	ldr	r3, [pc, #152]	; (80007a8 <oled_show+0xac>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2b01      	cmp	r3, #1
 8000714:	d102      	bne.n	800071c <oled_show+0x20>
		show_calendar();
 8000716:	f000 f8fb 	bl	8000910 <show_calendar>
 800071a:	e01f      	b.n	800075c <oled_show+0x60>
	}
	//alarm mode
	else if(clockmode == 2){
 800071c:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <oled_show+0xac>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b02      	cmp	r3, #2
 8000722:	d102      	bne.n	800072a <oled_show+0x2e>
		show_alarm();
 8000724:	f000 f876 	bl	8000814 <show_alarm>
 8000728:	e018      	b.n	800075c <oled_show+0x60>
	}
	//set mode
	else if(clockmode == 3 || clockmode == 4 || clockmode == 5){
 800072a:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <oled_show+0xac>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	2b03      	cmp	r3, #3
 8000730:	d007      	beq.n	8000742 <oled_show+0x46>
 8000732:	4b1d      	ldr	r3, [pc, #116]	; (80007a8 <oled_show+0xac>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2b04      	cmp	r3, #4
 8000738:	d003      	beq.n	8000742 <oled_show+0x46>
 800073a:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <oled_show+0xac>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b05      	cmp	r3, #5
 8000740:	d102      	bne.n	8000748 <oled_show+0x4c>
		show_set();
 8000742:	f000 f911 	bl	8000968 <show_set>
 8000746:	e009      	b.n	800075c <oled_show+0x60>
	}
	//error mode
	else if(clockmode == 6){
 8000748:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <oled_show+0xac>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b06      	cmp	r3, #6
 800074e:	d102      	bne.n	8000756 <oled_show+0x5a>
		show_error();
 8000750:	f000 ffba 	bl	80016c8 <show_error>
 8000754:	e002      	b.n	800075c <oled_show+0x60>
	}
	//unnormal
	else {
		clockmode = 0;
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <oled_show+0xac>)
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
	}

	ssd1306_Fill(Black);
 800075c:	2000      	movs	r0, #0
 800075e:	f001 fa6b 	bl	8001c38 <ssd1306_Fill>
	ssd1306_SetCursor(2,0);
 8000762:	2100      	movs	r1, #0
 8000764:	2002      	movs	r0, #2
 8000766:	f001 fbb1 	bl	8001ecc <ssd1306_SetCursor>
	ssd1306_WriteString(line1, Font_11x18, White);
 800076a:	4a10      	ldr	r2, [pc, #64]	; (80007ac <oled_show+0xb0>)
 800076c:	2301      	movs	r3, #1
 800076e:	ca06      	ldmia	r2, {r1, r2}
 8000770:	480f      	ldr	r0, [pc, #60]	; (80007b0 <oled_show+0xb4>)
 8000772:	f001 fb85 	bl	8001e80 <ssd1306_WriteString>
	ssd1306_SetCursor(2,18);
 8000776:	2112      	movs	r1, #18
 8000778:	2002      	movs	r0, #2
 800077a:	f001 fba7 	bl	8001ecc <ssd1306_SetCursor>
	ssd1306_WriteString(line2, Font_11x18, White);
 800077e:	4a0b      	ldr	r2, [pc, #44]	; (80007ac <oled_show+0xb0>)
 8000780:	2301      	movs	r3, #1
 8000782:	ca06      	ldmia	r2, {r1, r2}
 8000784:	480b      	ldr	r0, [pc, #44]	; (80007b4 <oled_show+0xb8>)
 8000786:	f001 fb7b 	bl	8001e80 <ssd1306_WriteString>
	ssd1306_SetCursor(2,36);
 800078a:	2124      	movs	r1, #36	; 0x24
 800078c:	2002      	movs	r0, #2
 800078e:	f001 fb9d 	bl	8001ecc <ssd1306_SetCursor>
	ssd1306_WriteString(line3, Font_11x18, White);
 8000792:	4a06      	ldr	r2, [pc, #24]	; (80007ac <oled_show+0xb0>)
 8000794:	2301      	movs	r3, #1
 8000796:	ca06      	ldmia	r2, {r1, r2}
 8000798:	4807      	ldr	r0, [pc, #28]	; (80007b8 <oled_show+0xbc>)
 800079a:	f001 fb71 	bl	8001e80 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800079e:	f001 fa6d 	bl	8001c7c <ssd1306_UpdateScreen>
	return;
 80007a2:	bf00      	nop
}
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000188 	.word	0x20000188
 80007ac:	2000000c 	.word	0x2000000c
 80007b0:	200001c0 	.word	0x200001c0
 80007b4:	200001cc 	.word	0x200001cc
 80007b8:	200001d8 	.word	0x200001d8

080007bc <show_time>:

void show_time(){
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af02      	add	r7, sp, #8
	sprintf(line1,"    time   ");
 80007c2:	490b      	ldr	r1, [pc, #44]	; (80007f0 <show_time+0x34>)
 80007c4:	480b      	ldr	r0, [pc, #44]	; (80007f4 <show_time+0x38>)
 80007c6:	f004 f9cb 	bl	8004b60 <siprintf>
	sprintf(line2," %2d:%2d:%2d ",hour,minute,second);
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <show_time+0x3c>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <show_time+0x40>)
 80007d0:	6819      	ldr	r1, [r3, #0]
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <show_time+0x44>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	460b      	mov	r3, r1
 80007da:	490a      	ldr	r1, [pc, #40]	; (8000804 <show_time+0x48>)
 80007dc:	480a      	ldr	r0, [pc, #40]	; (8000808 <show_time+0x4c>)
 80007de:	f004 f9bf 	bl	8004b60 <siprintf>
	sprintf(line3,"           ");
 80007e2:	490a      	ldr	r1, [pc, #40]	; (800080c <show_time+0x50>)
 80007e4:	480a      	ldr	r0, [pc, #40]	; (8000810 <show_time+0x54>)
 80007e6:	f004 f9bb 	bl	8004b60 <siprintf>
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	0800541c 	.word	0x0800541c
 80007f4:	200001c0 	.word	0x200001c0
 80007f8:	20000194 	.word	0x20000194
 80007fc:	20000190 	.word	0x20000190
 8000800:	2000018c 	.word	0x2000018c
 8000804:	08005428 	.word	0x08005428
 8000808:	200001cc 	.word	0x200001cc
 800080c:	08005438 	.word	0x08005438
 8000810:	200001d8 	.word	0x200001d8

08000814 <show_alarm>:

void show_alarm(){
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	sprintf(line1,"   alarm   ");
 8000818:	492f      	ldr	r1, [pc, #188]	; (80008d8 <show_alarm+0xc4>)
 800081a:	4830      	ldr	r0, [pc, #192]	; (80008dc <show_alarm+0xc8>)
 800081c:	f004 f9a0 	bl	8004b60 <siprintf>
	if(alarm == 0){
 8000820:	4b2f      	ldr	r3, [pc, #188]	; (80008e0 <show_alarm+0xcc>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d12a      	bne.n	800087e <show_alarm+0x6a>
		if(alarm1[0]) sprintf(line2,"1.%2d:%2d  ON",alarm1[1],alarm1[2]);
 8000828:	4b2e      	ldr	r3, [pc, #184]	; (80008e4 <show_alarm+0xd0>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d008      	beq.n	8000842 <show_alarm+0x2e>
 8000830:	4b2c      	ldr	r3, [pc, #176]	; (80008e4 <show_alarm+0xd0>)
 8000832:	685a      	ldr	r2, [r3, #4]
 8000834:	4b2b      	ldr	r3, [pc, #172]	; (80008e4 <show_alarm+0xd0>)
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	492b      	ldr	r1, [pc, #172]	; (80008e8 <show_alarm+0xd4>)
 800083a:	482c      	ldr	r0, [pc, #176]	; (80008ec <show_alarm+0xd8>)
 800083c:	f004 f990 	bl	8004b60 <siprintf>
 8000840:	e007      	b.n	8000852 <show_alarm+0x3e>
		else sprintf(line2,"1.%2d:%2d OFF",alarm1[1],alarm1[2]);
 8000842:	4b28      	ldr	r3, [pc, #160]	; (80008e4 <show_alarm+0xd0>)
 8000844:	685a      	ldr	r2, [r3, #4]
 8000846:	4b27      	ldr	r3, [pc, #156]	; (80008e4 <show_alarm+0xd0>)
 8000848:	689b      	ldr	r3, [r3, #8]
 800084a:	4929      	ldr	r1, [pc, #164]	; (80008f0 <show_alarm+0xdc>)
 800084c:	4827      	ldr	r0, [pc, #156]	; (80008ec <show_alarm+0xd8>)
 800084e:	f004 f987 	bl	8004b60 <siprintf>
		if(alarm2[0]) sprintf(line3,"2.%2d:%2d  ON",alarm2[1],alarm2[2]);
 8000852:	4b28      	ldr	r3, [pc, #160]	; (80008f4 <show_alarm+0xe0>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d008      	beq.n	800086c <show_alarm+0x58>
 800085a:	4b26      	ldr	r3, [pc, #152]	; (80008f4 <show_alarm+0xe0>)
 800085c:	685a      	ldr	r2, [r3, #4]
 800085e:	4b25      	ldr	r3, [pc, #148]	; (80008f4 <show_alarm+0xe0>)
 8000860:	689b      	ldr	r3, [r3, #8]
 8000862:	4925      	ldr	r1, [pc, #148]	; (80008f8 <show_alarm+0xe4>)
 8000864:	4825      	ldr	r0, [pc, #148]	; (80008fc <show_alarm+0xe8>)
 8000866:	f004 f97b 	bl	8004b60 <siprintf>
		if(alarm2[0]) sprintf(line2,"2.%2d:%2d  ON",alarm2[1],alarm2[2]);
		else sprintf(line2,"2.%2d:%2d OFF",alarm2[1],alarm2[2]);
		if(alarm3[0]) sprintf(line3,"3.%2d:%2d  ON",alarm3[1],alarm3[2]);
		else sprintf(line3,"3.%2d:%2d OFF",alarm3[1],alarm3[2]);
	}
}
 800086a:	e032      	b.n	80008d2 <show_alarm+0xbe>
		else sprintf(line3,"2.%2d:%2d OFF",alarm2[1],alarm2[2]);
 800086c:	4b21      	ldr	r3, [pc, #132]	; (80008f4 <show_alarm+0xe0>)
 800086e:	685a      	ldr	r2, [r3, #4]
 8000870:	4b20      	ldr	r3, [pc, #128]	; (80008f4 <show_alarm+0xe0>)
 8000872:	689b      	ldr	r3, [r3, #8]
 8000874:	4922      	ldr	r1, [pc, #136]	; (8000900 <show_alarm+0xec>)
 8000876:	4821      	ldr	r0, [pc, #132]	; (80008fc <show_alarm+0xe8>)
 8000878:	f004 f972 	bl	8004b60 <siprintf>
}
 800087c:	e029      	b.n	80008d2 <show_alarm+0xbe>
		if(alarm2[0]) sprintf(line2,"2.%2d:%2d  ON",alarm2[1],alarm2[2]);
 800087e:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <show_alarm+0xe0>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d008      	beq.n	8000898 <show_alarm+0x84>
 8000886:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <show_alarm+0xe0>)
 8000888:	685a      	ldr	r2, [r3, #4]
 800088a:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <show_alarm+0xe0>)
 800088c:	689b      	ldr	r3, [r3, #8]
 800088e:	491a      	ldr	r1, [pc, #104]	; (80008f8 <show_alarm+0xe4>)
 8000890:	4816      	ldr	r0, [pc, #88]	; (80008ec <show_alarm+0xd8>)
 8000892:	f004 f965 	bl	8004b60 <siprintf>
 8000896:	e007      	b.n	80008a8 <show_alarm+0x94>
		else sprintf(line2,"2.%2d:%2d OFF",alarm2[1],alarm2[2]);
 8000898:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <show_alarm+0xe0>)
 800089a:	685a      	ldr	r2, [r3, #4]
 800089c:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <show_alarm+0xe0>)
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	4917      	ldr	r1, [pc, #92]	; (8000900 <show_alarm+0xec>)
 80008a2:	4812      	ldr	r0, [pc, #72]	; (80008ec <show_alarm+0xd8>)
 80008a4:	f004 f95c 	bl	8004b60 <siprintf>
		if(alarm3[0]) sprintf(line3,"3.%2d:%2d  ON",alarm3[1],alarm3[2]);
 80008a8:	4b16      	ldr	r3, [pc, #88]	; (8000904 <show_alarm+0xf0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d008      	beq.n	80008c2 <show_alarm+0xae>
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <show_alarm+0xf0>)
 80008b2:	685a      	ldr	r2, [r3, #4]
 80008b4:	4b13      	ldr	r3, [pc, #76]	; (8000904 <show_alarm+0xf0>)
 80008b6:	689b      	ldr	r3, [r3, #8]
 80008b8:	4913      	ldr	r1, [pc, #76]	; (8000908 <show_alarm+0xf4>)
 80008ba:	4810      	ldr	r0, [pc, #64]	; (80008fc <show_alarm+0xe8>)
 80008bc:	f004 f950 	bl	8004b60 <siprintf>
}
 80008c0:	e007      	b.n	80008d2 <show_alarm+0xbe>
		else sprintf(line3,"3.%2d:%2d OFF",alarm3[1],alarm3[2]);
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <show_alarm+0xf0>)
 80008c4:	685a      	ldr	r2, [r3, #4]
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <show_alarm+0xf0>)
 80008c8:	689b      	ldr	r3, [r3, #8]
 80008ca:	4910      	ldr	r1, [pc, #64]	; (800090c <show_alarm+0xf8>)
 80008cc:	480b      	ldr	r0, [pc, #44]	; (80008fc <show_alarm+0xe8>)
 80008ce:	f004 f947 	bl	8004b60 <siprintf>
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	08005444 	.word	0x08005444
 80008dc:	200001c0 	.word	0x200001c0
 80008e0:	200001bc 	.word	0x200001bc
 80008e4:	20000198 	.word	0x20000198
 80008e8:	08005450 	.word	0x08005450
 80008ec:	200001cc 	.word	0x200001cc
 80008f0:	08005460 	.word	0x08005460
 80008f4:	200001a4 	.word	0x200001a4
 80008f8:	08005470 	.word	0x08005470
 80008fc:	200001d8 	.word	0x200001d8
 8000900:	08005480 	.word	0x08005480
 8000904:	200001b0 	.word	0x200001b0
 8000908:	08005490 	.word	0x08005490
 800090c:	080054a0 	.word	0x080054a0

08000910 <show_calendar>:

void show_calendar(){
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af02      	add	r7, sp, #8
	sprintf(line1,"  calendar ");
 8000916:	490b      	ldr	r1, [pc, #44]	; (8000944 <show_calendar+0x34>)
 8000918:	480b      	ldr	r0, [pc, #44]	; (8000948 <show_calendar+0x38>)
 800091a:	f004 f921 	bl	8004b60 <siprintf>
	sprintf(line2,"%4d.%2d.%2d",year,month,date);
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <show_calendar+0x3c>)
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <show_calendar+0x40>)
 8000924:	6819      	ldr	r1, [r3, #0]
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <show_calendar+0x44>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	9300      	str	r3, [sp, #0]
 800092c:	460b      	mov	r3, r1
 800092e:	490a      	ldr	r1, [pc, #40]	; (8000958 <show_calendar+0x48>)
 8000930:	480a      	ldr	r0, [pc, #40]	; (800095c <show_calendar+0x4c>)
 8000932:	f004 f915 	bl	8004b60 <siprintf>
	sprintf(line3,"           ");
 8000936:	490a      	ldr	r1, [pc, #40]	; (8000960 <show_calendar+0x50>)
 8000938:	480a      	ldr	r0, [pc, #40]	; (8000964 <show_calendar+0x54>)
 800093a:	f004 f911 	bl	8004b60 <siprintf>
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	080054b0 	.word	0x080054b0
 8000948:	200001c0 	.word	0x200001c0
 800094c:	20000000 	.word	0x20000000
 8000950:	20000004 	.word	0x20000004
 8000954:	20000008 	.word	0x20000008
 8000958:	080054bc 	.word	0x080054bc
 800095c:	200001cc 	.word	0x200001cc
 8000960:	08005438 	.word	0x08005438
 8000964:	200001d8 	.word	0x200001d8

08000968 <show_set>:

void show_set(int set){
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af02      	add	r7, sp, #8
 800096e:	6078      	str	r0, [r7, #4]
	int sw = check_sw();
 8000970:	f000 fec4 	bl	80016fc <check_sw>
 8000974:	60f8      	str	r0, [r7, #12]
	static int unit_alarm2 = 0;
	static int unit_calendar = 0;


	//set time
	if(clockmode == 3){
 8000976:	4b89      	ldr	r3, [pc, #548]	; (8000b9c <show_set+0x234>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b03      	cmp	r3, #3
 800097c:	f040 80da 	bne.w	8000b34 <show_set+0x1cc>
		if(sw == 1){
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	2b01      	cmp	r3, #1
 8000984:	d10c      	bne.n	80009a0 <show_set+0x38>
			if(unit_time < 2) unit_time++;
 8000986:	4b86      	ldr	r3, [pc, #536]	; (8000ba0 <show_set+0x238>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2b01      	cmp	r3, #1
 800098c:	dc05      	bgt.n	800099a <show_set+0x32>
 800098e:	4b84      	ldr	r3, [pc, #528]	; (8000ba0 <show_set+0x238>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	3301      	adds	r3, #1
 8000994:	4a82      	ldr	r2, [pc, #520]	; (8000ba0 <show_set+0x238>)
 8000996:	6013      	str	r3, [r2, #0]
 8000998:	e002      	b.n	80009a0 <show_set+0x38>
			else unit_time = 0;
 800099a:	4b81      	ldr	r3, [pc, #516]	; (8000ba0 <show_set+0x238>)
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
		}
		if(sw == 4){
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	2b04      	cmp	r3, #4
 80009a4:	d102      	bne.n	80009ac <show_set+0x44>
			unit_time = 0;
 80009a6:	4b7e      	ldr	r3, [pc, #504]	; (8000ba0 <show_set+0x238>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
		}
		sprintf(line1,"    time   ");
 80009ac:	497d      	ldr	r1, [pc, #500]	; (8000ba4 <show_set+0x23c>)
 80009ae:	487e      	ldr	r0, [pc, #504]	; (8000ba8 <show_set+0x240>)
 80009b0:	f004 f8d6 	bl	8004b60 <siprintf>

		//set time of hour
		if(unit_time == 0){
 80009b4:	4b7a      	ldr	r3, [pc, #488]	; (8000ba0 <show_set+0x238>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d13b      	bne.n	8000a34 <show_set+0xcc>
			if(twinkle == 0)sprintf(line2," %2d:%2d:%2d ",hour,minute,second);
 80009bc:	4b7b      	ldr	r3, [pc, #492]	; (8000bac <show_set+0x244>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d10c      	bne.n	80009de <show_set+0x76>
 80009c4:	4b7a      	ldr	r3, [pc, #488]	; (8000bb0 <show_set+0x248>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	4b7a      	ldr	r3, [pc, #488]	; (8000bb4 <show_set+0x24c>)
 80009ca:	6819      	ldr	r1, [r3, #0]
 80009cc:	4b7a      	ldr	r3, [pc, #488]	; (8000bb8 <show_set+0x250>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	9300      	str	r3, [sp, #0]
 80009d2:	460b      	mov	r3, r1
 80009d4:	4979      	ldr	r1, [pc, #484]	; (8000bbc <show_set+0x254>)
 80009d6:	487a      	ldr	r0, [pc, #488]	; (8000bc0 <show_set+0x258>)
 80009d8:	f004 f8c2 	bl	8004b60 <siprintf>
 80009dc:	e007      	b.n	80009ee <show_set+0x86>
			else sprintf(line2,"   :%2d:%2d ",minute,second);
 80009de:	4b75      	ldr	r3, [pc, #468]	; (8000bb4 <show_set+0x24c>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	4b75      	ldr	r3, [pc, #468]	; (8000bb8 <show_set+0x250>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4977      	ldr	r1, [pc, #476]	; (8000bc4 <show_set+0x25c>)
 80009e8:	4875      	ldr	r0, [pc, #468]	; (8000bc0 <show_set+0x258>)
 80009ea:	f004 f8b9 	bl	8004b60 <siprintf>
			if(sw == 3){
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	2b03      	cmp	r3, #3
 80009f2:	d10d      	bne.n	8000a10 <show_set+0xa8>
				if(hour < 24)hour++;
 80009f4:	4b6e      	ldr	r3, [pc, #440]	; (8000bb0 <show_set+0x248>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b17      	cmp	r3, #23
 80009fa:	dc05      	bgt.n	8000a08 <show_set+0xa0>
 80009fc:	4b6c      	ldr	r3, [pc, #432]	; (8000bb0 <show_set+0x248>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	3301      	adds	r3, #1
 8000a02:	4a6b      	ldr	r2, [pc, #428]	; (8000bb0 <show_set+0x248>)
 8000a04:	6013      	str	r3, [r2, #0]
 8000a06:	e08f      	b.n	8000b28 <show_set+0x1c0>
				else hour = 0;
 8000a08:	4b69      	ldr	r3, [pc, #420]	; (8000bb0 <show_set+0x248>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	e08b      	b.n	8000b28 <show_set+0x1c0>
			}
			else if(sw == 2){
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	2b02      	cmp	r3, #2
 8000a14:	f040 8088 	bne.w	8000b28 <show_set+0x1c0>
				if(hour > 0)hour--;
 8000a18:	4b65      	ldr	r3, [pc, #404]	; (8000bb0 <show_set+0x248>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	dd05      	ble.n	8000a2c <show_set+0xc4>
 8000a20:	4b63      	ldr	r3, [pc, #396]	; (8000bb0 <show_set+0x248>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	3b01      	subs	r3, #1
 8000a26:	4a62      	ldr	r2, [pc, #392]	; (8000bb0 <show_set+0x248>)
 8000a28:	6013      	str	r3, [r2, #0]
 8000a2a:	e07d      	b.n	8000b28 <show_set+0x1c0>
				else hour = 0;
 8000a2c:	4b60      	ldr	r3, [pc, #384]	; (8000bb0 <show_set+0x248>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	e079      	b.n	8000b28 <show_set+0x1c0>
			}
		}

		//set time of minute
		else if(unit_time == 1){
 8000a34:	4b5a      	ldr	r3, [pc, #360]	; (8000ba0 <show_set+0x238>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d13a      	bne.n	8000ab2 <show_set+0x14a>
			if(twinkle == 0)sprintf(line2," %2d:%2d:%2d ",hour,minute,second);
 8000a3c:	4b5b      	ldr	r3, [pc, #364]	; (8000bac <show_set+0x244>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d10c      	bne.n	8000a5e <show_set+0xf6>
 8000a44:	4b5a      	ldr	r3, [pc, #360]	; (8000bb0 <show_set+0x248>)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	4b5a      	ldr	r3, [pc, #360]	; (8000bb4 <show_set+0x24c>)
 8000a4a:	6819      	ldr	r1, [r3, #0]
 8000a4c:	4b5a      	ldr	r3, [pc, #360]	; (8000bb8 <show_set+0x250>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	460b      	mov	r3, r1
 8000a54:	4959      	ldr	r1, [pc, #356]	; (8000bbc <show_set+0x254>)
 8000a56:	485a      	ldr	r0, [pc, #360]	; (8000bc0 <show_set+0x258>)
 8000a58:	f004 f882 	bl	8004b60 <siprintf>
 8000a5c:	e007      	b.n	8000a6e <show_set+0x106>
			else sprintf(line2," %2d:  :%2d ",hour,second);
 8000a5e:	4b54      	ldr	r3, [pc, #336]	; (8000bb0 <show_set+0x248>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	4b55      	ldr	r3, [pc, #340]	; (8000bb8 <show_set+0x250>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4958      	ldr	r1, [pc, #352]	; (8000bc8 <show_set+0x260>)
 8000a68:	4855      	ldr	r0, [pc, #340]	; (8000bc0 <show_set+0x258>)
 8000a6a:	f004 f879 	bl	8004b60 <siprintf>
			if(sw == 3){
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	2b03      	cmp	r3, #3
 8000a72:	d10d      	bne.n	8000a90 <show_set+0x128>
				if(minute < 60)minute++;
 8000a74:	4b4f      	ldr	r3, [pc, #316]	; (8000bb4 <show_set+0x24c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b3b      	cmp	r3, #59	; 0x3b
 8000a7a:	dc05      	bgt.n	8000a88 <show_set+0x120>
 8000a7c:	4b4d      	ldr	r3, [pc, #308]	; (8000bb4 <show_set+0x24c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	3301      	adds	r3, #1
 8000a82:	4a4c      	ldr	r2, [pc, #304]	; (8000bb4 <show_set+0x24c>)
 8000a84:	6013      	str	r3, [r2, #0]
 8000a86:	e04f      	b.n	8000b28 <show_set+0x1c0>
				else minute = 0;
 8000a88:	4b4a      	ldr	r3, [pc, #296]	; (8000bb4 <show_set+0x24c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	e04b      	b.n	8000b28 <show_set+0x1c0>
			}
			else if(sw == 2){
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	d148      	bne.n	8000b28 <show_set+0x1c0>
				if(minute > 0)minute--;
 8000a96:	4b47      	ldr	r3, [pc, #284]	; (8000bb4 <show_set+0x24c>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	dd05      	ble.n	8000aaa <show_set+0x142>
 8000a9e:	4b45      	ldr	r3, [pc, #276]	; (8000bb4 <show_set+0x24c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	4a43      	ldr	r2, [pc, #268]	; (8000bb4 <show_set+0x24c>)
 8000aa6:	6013      	str	r3, [r2, #0]
 8000aa8:	e03e      	b.n	8000b28 <show_set+0x1c0>
				else minute = 0;
 8000aaa:	4b42      	ldr	r3, [pc, #264]	; (8000bb4 <show_set+0x24c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	e03a      	b.n	8000b28 <show_set+0x1c0>
			}
		}

		//set time of second
		else if(unit_time == 2){
 8000ab2:	4b3b      	ldr	r3, [pc, #236]	; (8000ba0 <show_set+0x238>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	d136      	bne.n	8000b28 <show_set+0x1c0>
			if(twinkle == 0)sprintf(line2," %2d:%2d:%2d ",hour,minute,second);
 8000aba:	4b3c      	ldr	r3, [pc, #240]	; (8000bac <show_set+0x244>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d10c      	bne.n	8000adc <show_set+0x174>
 8000ac2:	4b3b      	ldr	r3, [pc, #236]	; (8000bb0 <show_set+0x248>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	4b3b      	ldr	r3, [pc, #236]	; (8000bb4 <show_set+0x24c>)
 8000ac8:	6819      	ldr	r1, [r3, #0]
 8000aca:	4b3b      	ldr	r3, [pc, #236]	; (8000bb8 <show_set+0x250>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	9300      	str	r3, [sp, #0]
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	493a      	ldr	r1, [pc, #232]	; (8000bbc <show_set+0x254>)
 8000ad4:	483a      	ldr	r0, [pc, #232]	; (8000bc0 <show_set+0x258>)
 8000ad6:	f004 f843 	bl	8004b60 <siprintf>
 8000ada:	e007      	b.n	8000aec <show_set+0x184>
			else sprintf(line2," %2d:%2d:   ",hour,minute);
 8000adc:	4b34      	ldr	r3, [pc, #208]	; (8000bb0 <show_set+0x248>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	4b34      	ldr	r3, [pc, #208]	; (8000bb4 <show_set+0x24c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4939      	ldr	r1, [pc, #228]	; (8000bcc <show_set+0x264>)
 8000ae6:	4836      	ldr	r0, [pc, #216]	; (8000bc0 <show_set+0x258>)
 8000ae8:	f004 f83a 	bl	8004b60 <siprintf>
			if(sw == 3){
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	2b03      	cmp	r3, #3
 8000af0:	d114      	bne.n	8000b1c <show_set+0x1b4>
				second = 0;
 8000af2:	4b31      	ldr	r3, [pc, #196]	; (8000bb8 <show_set+0x250>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
				minute++;
 8000af8:	4b2e      	ldr	r3, [pc, #184]	; (8000bb4 <show_set+0x24c>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	3301      	adds	r3, #1
 8000afe:	4a2d      	ldr	r2, [pc, #180]	; (8000bb4 <show_set+0x24c>)
 8000b00:	6013      	str	r3, [r2, #0]
				if(minute == 60){
 8000b02:	4b2c      	ldr	r3, [pc, #176]	; (8000bb4 <show_set+0x24c>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2b3c      	cmp	r3, #60	; 0x3c
 8000b08:	d10e      	bne.n	8000b28 <show_set+0x1c0>
					minute = 0;
 8000b0a:	4b2a      	ldr	r3, [pc, #168]	; (8000bb4 <show_set+0x24c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
					hour++;
 8000b10:	4b27      	ldr	r3, [pc, #156]	; (8000bb0 <show_set+0x248>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	3301      	adds	r3, #1
 8000b16:	4a26      	ldr	r2, [pc, #152]	; (8000bb0 <show_set+0x248>)
 8000b18:	6013      	str	r3, [r2, #0]
 8000b1a:	e005      	b.n	8000b28 <show_set+0x1c0>
				}
			}
			else if(sw == 2){
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	2b02      	cmp	r3, #2
 8000b20:	d102      	bne.n	8000b28 <show_set+0x1c0>
				second = 0;
 8000b22:	4b25      	ldr	r3, [pc, #148]	; (8000bb8 <show_set+0x250>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
			}
		}
		sprintf(line3,"           ");
 8000b28:	4929      	ldr	r1, [pc, #164]	; (8000bd0 <show_set+0x268>)
 8000b2a:	482a      	ldr	r0, [pc, #168]	; (8000bd4 <show_set+0x26c>)
 8000b2c:	f004 f818 	bl	8004b60 <siprintf>
				}
			}
		}

	}
}
 8000b30:	f000 bdb3 	b.w	800169a <show_set+0xd32>
	else if(clockmode == 4){
 8000b34:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <show_set+0x234>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b04      	cmp	r3, #4
 8000b3a:	f040 81ce 	bne.w	8000eda <show_set+0x572>
		if(sw == 1){
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d10c      	bne.n	8000b5e <show_set+0x1f6>
			if(unit_calendar < 2) unit_calendar++;
 8000b44:	4b24      	ldr	r3, [pc, #144]	; (8000bd8 <show_set+0x270>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	dc05      	bgt.n	8000b58 <show_set+0x1f0>
 8000b4c:	4b22      	ldr	r3, [pc, #136]	; (8000bd8 <show_set+0x270>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	3301      	adds	r3, #1
 8000b52:	4a21      	ldr	r2, [pc, #132]	; (8000bd8 <show_set+0x270>)
 8000b54:	6013      	str	r3, [r2, #0]
 8000b56:	e002      	b.n	8000b5e <show_set+0x1f6>
			else unit_calendar = 0;
 8000b58:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <show_set+0x270>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
		if(sw == 4){
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	2b04      	cmp	r3, #4
 8000b62:	d102      	bne.n	8000b6a <show_set+0x202>
			unit_calendar = 0;
 8000b64:	4b1c      	ldr	r3, [pc, #112]	; (8000bd8 <show_set+0x270>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
		sprintf(line1,"  calendar ");
 8000b6a:	491c      	ldr	r1, [pc, #112]	; (8000bdc <show_set+0x274>)
 8000b6c:	480e      	ldr	r0, [pc, #56]	; (8000ba8 <show_set+0x240>)
 8000b6e:	f003 fff7 	bl	8004b60 <siprintf>
		if(unit_calendar == 0){
 8000b72:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <show_set+0x270>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d155      	bne.n	8000c26 <show_set+0x2be>
			if(twinkle == 0)sprintf(line2,"%4d.%2d.%2d",year,month,date);
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <show_set+0x244>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d136      	bne.n	8000bf0 <show_set+0x288>
 8000b82:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <show_set+0x278>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <show_set+0x27c>)
 8000b88:	6819      	ldr	r1, [r3, #0]
 8000b8a:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <show_set+0x280>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	9300      	str	r3, [sp, #0]
 8000b90:	460b      	mov	r3, r1
 8000b92:	4916      	ldr	r1, [pc, #88]	; (8000bec <show_set+0x284>)
 8000b94:	480a      	ldr	r0, [pc, #40]	; (8000bc0 <show_set+0x258>)
 8000b96:	f003 ffe3 	bl	8004b60 <siprintf>
 8000b9a:	e031      	b.n	8000c00 <show_set+0x298>
 8000b9c:	20000188 	.word	0x20000188
 8000ba0:	200001e8 	.word	0x200001e8
 8000ba4:	0800541c 	.word	0x0800541c
 8000ba8:	200001c0 	.word	0x200001c0
 8000bac:	200001e4 	.word	0x200001e4
 8000bb0:	20000194 	.word	0x20000194
 8000bb4:	20000190 	.word	0x20000190
 8000bb8:	2000018c 	.word	0x2000018c
 8000bbc:	08005428 	.word	0x08005428
 8000bc0:	200001cc 	.word	0x200001cc
 8000bc4:	080054c8 	.word	0x080054c8
 8000bc8:	080054d8 	.word	0x080054d8
 8000bcc:	080054e8 	.word	0x080054e8
 8000bd0:	08005438 	.word	0x08005438
 8000bd4:	200001d8 	.word	0x200001d8
 8000bd8:	200001ec 	.word	0x200001ec
 8000bdc:	080054b0 	.word	0x080054b0
 8000be0:	20000000 	.word	0x20000000
 8000be4:	20000004 	.word	0x20000004
 8000be8:	20000008 	.word	0x20000008
 8000bec:	080054bc 	.word	0x080054bc
			else sprintf(line2,"    .%2d.%2d",month,date);
 8000bf0:	4b75      	ldr	r3, [pc, #468]	; (8000dc8 <show_set+0x460>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	4b75      	ldr	r3, [pc, #468]	; (8000dcc <show_set+0x464>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4975      	ldr	r1, [pc, #468]	; (8000dd0 <show_set+0x468>)
 8000bfa:	4876      	ldr	r0, [pc, #472]	; (8000dd4 <show_set+0x46c>)
 8000bfc:	f003 ffb0 	bl	8004b60 <siprintf>
			if(sw == 3){
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	2b03      	cmp	r3, #3
 8000c04:	d105      	bne.n	8000c12 <show_set+0x2aa>
				year++;
 8000c06:	4b74      	ldr	r3, [pc, #464]	; (8000dd8 <show_set+0x470>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	4a72      	ldr	r2, [pc, #456]	; (8000dd8 <show_set+0x470>)
 8000c0e:	6013      	str	r3, [r2, #0]
 8000c10:	e15e      	b.n	8000ed0 <show_set+0x568>
			else if(sw == 2){
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	f040 815b 	bne.w	8000ed0 <show_set+0x568>
				year--;
 8000c1a:	4b6f      	ldr	r3, [pc, #444]	; (8000dd8 <show_set+0x470>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	4a6d      	ldr	r2, [pc, #436]	; (8000dd8 <show_set+0x470>)
 8000c22:	6013      	str	r3, [r2, #0]
 8000c24:	e154      	b.n	8000ed0 <show_set+0x568>
		else if(unit_calendar == 1){
 8000c26:	4b6d      	ldr	r3, [pc, #436]	; (8000ddc <show_set+0x474>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d13b      	bne.n	8000ca6 <show_set+0x33e>
			if(twinkle == 0)sprintf(line2,"%4d.%2d.%2d",year,month,date);
 8000c2e:	4b6c      	ldr	r3, [pc, #432]	; (8000de0 <show_set+0x478>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d10c      	bne.n	8000c50 <show_set+0x2e8>
 8000c36:	4b68      	ldr	r3, [pc, #416]	; (8000dd8 <show_set+0x470>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	4b63      	ldr	r3, [pc, #396]	; (8000dc8 <show_set+0x460>)
 8000c3c:	6819      	ldr	r1, [r3, #0]
 8000c3e:	4b63      	ldr	r3, [pc, #396]	; (8000dcc <show_set+0x464>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	9300      	str	r3, [sp, #0]
 8000c44:	460b      	mov	r3, r1
 8000c46:	4967      	ldr	r1, [pc, #412]	; (8000de4 <show_set+0x47c>)
 8000c48:	4862      	ldr	r0, [pc, #392]	; (8000dd4 <show_set+0x46c>)
 8000c4a:	f003 ff89 	bl	8004b60 <siprintf>
 8000c4e:	e007      	b.n	8000c60 <show_set+0x2f8>
			else sprintf(line2,"%4d.  .%2d",year,date);
 8000c50:	4b61      	ldr	r3, [pc, #388]	; (8000dd8 <show_set+0x470>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b5d      	ldr	r3, [pc, #372]	; (8000dcc <show_set+0x464>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4963      	ldr	r1, [pc, #396]	; (8000de8 <show_set+0x480>)
 8000c5a:	485e      	ldr	r0, [pc, #376]	; (8000dd4 <show_set+0x46c>)
 8000c5c:	f003 ff80 	bl	8004b60 <siprintf>
			if(sw == 3){
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2b03      	cmp	r3, #3
 8000c64:	d10d      	bne.n	8000c82 <show_set+0x31a>
				if(month < 12)month++;
 8000c66:	4b58      	ldr	r3, [pc, #352]	; (8000dc8 <show_set+0x460>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2b0b      	cmp	r3, #11
 8000c6c:	dc05      	bgt.n	8000c7a <show_set+0x312>
 8000c6e:	4b56      	ldr	r3, [pc, #344]	; (8000dc8 <show_set+0x460>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	3301      	adds	r3, #1
 8000c74:	4a54      	ldr	r2, [pc, #336]	; (8000dc8 <show_set+0x460>)
 8000c76:	6013      	str	r3, [r2, #0]
 8000c78:	e12a      	b.n	8000ed0 <show_set+0x568>
				else month = 12;
 8000c7a:	4b53      	ldr	r3, [pc, #332]	; (8000dc8 <show_set+0x460>)
 8000c7c:	220c      	movs	r2, #12
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	e126      	b.n	8000ed0 <show_set+0x568>
			else if(sw == 2){
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	f040 8123 	bne.w	8000ed0 <show_set+0x568>
				if(month > 1)month--;
 8000c8a:	4b4f      	ldr	r3, [pc, #316]	; (8000dc8 <show_set+0x460>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	dd05      	ble.n	8000c9e <show_set+0x336>
 8000c92:	4b4d      	ldr	r3, [pc, #308]	; (8000dc8 <show_set+0x460>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	4a4b      	ldr	r2, [pc, #300]	; (8000dc8 <show_set+0x460>)
 8000c9a:	6013      	str	r3, [r2, #0]
 8000c9c:	e118      	b.n	8000ed0 <show_set+0x568>
				else month = 1;
 8000c9e:	4b4a      	ldr	r3, [pc, #296]	; (8000dc8 <show_set+0x460>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	e114      	b.n	8000ed0 <show_set+0x568>
		else if(unit_calendar == 2){
 8000ca6:	4b4d      	ldr	r3, [pc, #308]	; (8000ddc <show_set+0x474>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	f040 8110 	bne.w	8000ed0 <show_set+0x568>
			if(twinkle == 0)sprintf(line2,"%4d.%2d.%2d",year,month,date);
 8000cb0:	4b4b      	ldr	r3, [pc, #300]	; (8000de0 <show_set+0x478>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d10c      	bne.n	8000cd2 <show_set+0x36a>
 8000cb8:	4b47      	ldr	r3, [pc, #284]	; (8000dd8 <show_set+0x470>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4b42      	ldr	r3, [pc, #264]	; (8000dc8 <show_set+0x460>)
 8000cbe:	6819      	ldr	r1, [r3, #0]
 8000cc0:	4b42      	ldr	r3, [pc, #264]	; (8000dcc <show_set+0x464>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	9300      	str	r3, [sp, #0]
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	4946      	ldr	r1, [pc, #280]	; (8000de4 <show_set+0x47c>)
 8000cca:	4842      	ldr	r0, [pc, #264]	; (8000dd4 <show_set+0x46c>)
 8000ccc:	f003 ff48 	bl	8004b60 <siprintf>
 8000cd0:	e007      	b.n	8000ce2 <show_set+0x37a>
			else sprintf(line2,"%4d.%2d.  ",year,month);
 8000cd2:	4b41      	ldr	r3, [pc, #260]	; (8000dd8 <show_set+0x470>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	4b3c      	ldr	r3, [pc, #240]	; (8000dc8 <show_set+0x460>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4944      	ldr	r1, [pc, #272]	; (8000dec <show_set+0x484>)
 8000cdc:	483d      	ldr	r0, [pc, #244]	; (8000dd4 <show_set+0x46c>)
 8000cde:	f003 ff3f 	bl	8004b60 <siprintf>
			if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12){
 8000ce2:	4b39      	ldr	r3, [pc, #228]	; (8000dc8 <show_set+0x460>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d017      	beq.n	8000d1a <show_set+0x3b2>
 8000cea:	4b37      	ldr	r3, [pc, #220]	; (8000dc8 <show_set+0x460>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b03      	cmp	r3, #3
 8000cf0:	d013      	beq.n	8000d1a <show_set+0x3b2>
 8000cf2:	4b35      	ldr	r3, [pc, #212]	; (8000dc8 <show_set+0x460>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2b05      	cmp	r3, #5
 8000cf8:	d00f      	beq.n	8000d1a <show_set+0x3b2>
 8000cfa:	4b33      	ldr	r3, [pc, #204]	; (8000dc8 <show_set+0x460>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2b07      	cmp	r3, #7
 8000d00:	d00b      	beq.n	8000d1a <show_set+0x3b2>
 8000d02:	4b31      	ldr	r3, [pc, #196]	; (8000dc8 <show_set+0x460>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2b08      	cmp	r3, #8
 8000d08:	d007      	beq.n	8000d1a <show_set+0x3b2>
 8000d0a:	4b2f      	ldr	r3, [pc, #188]	; (8000dc8 <show_set+0x460>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2b0a      	cmp	r3, #10
 8000d10:	d003      	beq.n	8000d1a <show_set+0x3b2>
 8000d12:	4b2d      	ldr	r3, [pc, #180]	; (8000dc8 <show_set+0x460>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2b0c      	cmp	r3, #12
 8000d18:	d122      	bne.n	8000d60 <show_set+0x3f8>
				if(sw == 3){
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	2b03      	cmp	r3, #3
 8000d1e:	d10d      	bne.n	8000d3c <show_set+0x3d4>
					if(date <31) date ++;
 8000d20:	4b2a      	ldr	r3, [pc, #168]	; (8000dcc <show_set+0x464>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b1e      	cmp	r3, #30
 8000d26:	dc05      	bgt.n	8000d34 <show_set+0x3cc>
 8000d28:	4b28      	ldr	r3, [pc, #160]	; (8000dcc <show_set+0x464>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	4a27      	ldr	r2, [pc, #156]	; (8000dcc <show_set+0x464>)
 8000d30:	6013      	str	r3, [r2, #0]
				if(sw == 3){
 8000d32:	e0c8      	b.n	8000ec6 <show_set+0x55e>
					else date = 1;
 8000d34:	4b25      	ldr	r3, [pc, #148]	; (8000dcc <show_set+0x464>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	601a      	str	r2, [r3, #0]
				if(sw == 3){
 8000d3a:	e0c4      	b.n	8000ec6 <show_set+0x55e>
				else if(sw == 2){
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	f040 80c1 	bne.w	8000ec6 <show_set+0x55e>
					if(date > 1)date--;
 8000d44:	4b21      	ldr	r3, [pc, #132]	; (8000dcc <show_set+0x464>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	dd05      	ble.n	8000d58 <show_set+0x3f0>
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <show_set+0x464>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	3b01      	subs	r3, #1
 8000d52:	4a1e      	ldr	r2, [pc, #120]	; (8000dcc <show_set+0x464>)
 8000d54:	6013      	str	r3, [r2, #0]
				if(sw == 3){
 8000d56:	e0b6      	b.n	8000ec6 <show_set+0x55e>
					else date = 1;
 8000d58:	4b1c      	ldr	r3, [pc, #112]	; (8000dcc <show_set+0x464>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	601a      	str	r2, [r3, #0]
				if(sw == 3){
 8000d5e:	e0b2      	b.n	8000ec6 <show_set+0x55e>
			else if(month == 4 || month == 6 || month == 9 || month == 11){
 8000d60:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <show_set+0x460>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b04      	cmp	r3, #4
 8000d66:	d00b      	beq.n	8000d80 <show_set+0x418>
 8000d68:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <show_set+0x460>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b06      	cmp	r3, #6
 8000d6e:	d007      	beq.n	8000d80 <show_set+0x418>
 8000d70:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <show_set+0x460>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b09      	cmp	r3, #9
 8000d76:	d003      	beq.n	8000d80 <show_set+0x418>
 8000d78:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <show_set+0x460>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b0b      	cmp	r3, #11
 8000d7e:	d137      	bne.n	8000df0 <show_set+0x488>
				if(sw == 3){
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	2b03      	cmp	r3, #3
 8000d84:	d10d      	bne.n	8000da2 <show_set+0x43a>
					if(date <30) date ++;
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <show_set+0x464>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2b1d      	cmp	r3, #29
 8000d8c:	dc05      	bgt.n	8000d9a <show_set+0x432>
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <show_set+0x464>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	3301      	adds	r3, #1
 8000d94:	4a0d      	ldr	r2, [pc, #52]	; (8000dcc <show_set+0x464>)
 8000d96:	6013      	str	r3, [r2, #0]
				if(sw == 3){
 8000d98:	e097      	b.n	8000eca <show_set+0x562>
					else date = 1;
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <show_set+0x464>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	601a      	str	r2, [r3, #0]
				if(sw == 3){
 8000da0:	e093      	b.n	8000eca <show_set+0x562>
				else if(sw == 2){
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	f040 8090 	bne.w	8000eca <show_set+0x562>
					if(date > 1)date--;
 8000daa:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <show_set+0x464>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	dd05      	ble.n	8000dbe <show_set+0x456>
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <show_set+0x464>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <show_set+0x464>)
 8000dba:	6013      	str	r3, [r2, #0]
				if(sw == 3){
 8000dbc:	e085      	b.n	8000eca <show_set+0x562>
					else date = 1;
 8000dbe:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <show_set+0x464>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	601a      	str	r2, [r3, #0]
				if(sw == 3){
 8000dc4:	e081      	b.n	8000eca <show_set+0x562>
 8000dc6:	bf00      	nop
 8000dc8:	20000004 	.word	0x20000004
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	080054f8 	.word	0x080054f8
 8000dd4:	200001cc 	.word	0x200001cc
 8000dd8:	20000000 	.word	0x20000000
 8000ddc:	200001ec 	.word	0x200001ec
 8000de0:	200001e4 	.word	0x200001e4
 8000de4:	080054bc 	.word	0x080054bc
 8000de8:	08005508 	.word	0x08005508
 8000dec:	08005514 	.word	0x08005514
			else if(month == 2){
 8000df0:	4b86      	ldr	r3, [pc, #536]	; (800100c <show_set+0x6a4>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d16b      	bne.n	8000ed0 <show_set+0x568>
				if((year % 400 == 0) || ((year % 4 == 0) && !(year % 100 == 0))){
 8000df8:	4b85      	ldr	r3, [pc, #532]	; (8001010 <show_set+0x6a8>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b85      	ldr	r3, [pc, #532]	; (8001014 <show_set+0x6ac>)
 8000dfe:	fb83 1302 	smull	r1, r3, r3, r2
 8000e02:	11d9      	asrs	r1, r3, #7
 8000e04:	17d3      	asrs	r3, r2, #31
 8000e06:	1acb      	subs	r3, r1, r3
 8000e08:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000e0c:	fb01 f303 	mul.w	r3, r1, r3
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d013      	beq.n	8000e3e <show_set+0x4d6>
 8000e16:	4b7e      	ldr	r3, [pc, #504]	; (8001010 <show_set+0x6a8>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 0303 	and.w	r3, r3, #3
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d12f      	bne.n	8000e82 <show_set+0x51a>
 8000e22:	4b7b      	ldr	r3, [pc, #492]	; (8001010 <show_set+0x6a8>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	4b7b      	ldr	r3, [pc, #492]	; (8001014 <show_set+0x6ac>)
 8000e28:	fb83 1302 	smull	r1, r3, r3, r2
 8000e2c:	1159      	asrs	r1, r3, #5
 8000e2e:	17d3      	asrs	r3, r2, #31
 8000e30:	1acb      	subs	r3, r1, r3
 8000e32:	2164      	movs	r1, #100	; 0x64
 8000e34:	fb01 f303 	mul.w	r3, r1, r3
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d021      	beq.n	8000e82 <show_set+0x51a>
					if(sw == 3){
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	2b03      	cmp	r3, #3
 8000e42:	d10d      	bne.n	8000e60 <show_set+0x4f8>
						if(date <29) date ++;
 8000e44:	4b74      	ldr	r3, [pc, #464]	; (8001018 <show_set+0x6b0>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b1c      	cmp	r3, #28
 8000e4a:	dc05      	bgt.n	8000e58 <show_set+0x4f0>
 8000e4c:	4b72      	ldr	r3, [pc, #456]	; (8001018 <show_set+0x6b0>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	3301      	adds	r3, #1
 8000e52:	4a71      	ldr	r2, [pc, #452]	; (8001018 <show_set+0x6b0>)
 8000e54:	6013      	str	r3, [r2, #0]
					if(sw == 3){
 8000e56:	e03a      	b.n	8000ece <show_set+0x566>
						else date = 1;
 8000e58:	4b6f      	ldr	r3, [pc, #444]	; (8001018 <show_set+0x6b0>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	601a      	str	r2, [r3, #0]
					if(sw == 3){
 8000e5e:	e036      	b.n	8000ece <show_set+0x566>
					else if(sw == 2){
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d133      	bne.n	8000ece <show_set+0x566>
						if(date > 1)date--;
 8000e66:	4b6c      	ldr	r3, [pc, #432]	; (8001018 <show_set+0x6b0>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	dd05      	ble.n	8000e7a <show_set+0x512>
 8000e6e:	4b6a      	ldr	r3, [pc, #424]	; (8001018 <show_set+0x6b0>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	4a68      	ldr	r2, [pc, #416]	; (8001018 <show_set+0x6b0>)
 8000e76:	6013      	str	r3, [r2, #0]
					if(sw == 3){
 8000e78:	e029      	b.n	8000ece <show_set+0x566>
						else date = 1;
 8000e7a:	4b67      	ldr	r3, [pc, #412]	; (8001018 <show_set+0x6b0>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	601a      	str	r2, [r3, #0]
					if(sw == 3){
 8000e80:	e025      	b.n	8000ece <show_set+0x566>
					if(sw == 3){
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	2b03      	cmp	r3, #3
 8000e86:	d10d      	bne.n	8000ea4 <show_set+0x53c>
						if(date <28) date ++;
 8000e88:	4b63      	ldr	r3, [pc, #396]	; (8001018 <show_set+0x6b0>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b1b      	cmp	r3, #27
 8000e8e:	dc05      	bgt.n	8000e9c <show_set+0x534>
 8000e90:	4b61      	ldr	r3, [pc, #388]	; (8001018 <show_set+0x6b0>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	3301      	adds	r3, #1
 8000e96:	4a60      	ldr	r2, [pc, #384]	; (8001018 <show_set+0x6b0>)
 8000e98:	6013      	str	r3, [r2, #0]
 8000e9a:	e019      	b.n	8000ed0 <show_set+0x568>
						else date = 1;
 8000e9c:	4b5e      	ldr	r3, [pc, #376]	; (8001018 <show_set+0x6b0>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	e015      	b.n	8000ed0 <show_set+0x568>
					else if(sw == 2){
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d112      	bne.n	8000ed0 <show_set+0x568>
						if(date > 1)date--;
 8000eaa:	4b5b      	ldr	r3, [pc, #364]	; (8001018 <show_set+0x6b0>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	dd05      	ble.n	8000ebe <show_set+0x556>
 8000eb2:	4b59      	ldr	r3, [pc, #356]	; (8001018 <show_set+0x6b0>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	4a57      	ldr	r2, [pc, #348]	; (8001018 <show_set+0x6b0>)
 8000eba:	6013      	str	r3, [r2, #0]
 8000ebc:	e008      	b.n	8000ed0 <show_set+0x568>
						else date = 1;
 8000ebe:	4b56      	ldr	r3, [pc, #344]	; (8001018 <show_set+0x6b0>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	e004      	b.n	8000ed0 <show_set+0x568>
				if(sw == 3){
 8000ec6:	bf00      	nop
 8000ec8:	e002      	b.n	8000ed0 <show_set+0x568>
				if(sw == 3){
 8000eca:	bf00      	nop
 8000ecc:	e000      	b.n	8000ed0 <show_set+0x568>
					if(sw == 3){
 8000ece:	bf00      	nop
		sprintf(line3,"           ");
 8000ed0:	4952      	ldr	r1, [pc, #328]	; (800101c <show_set+0x6b4>)
 8000ed2:	4853      	ldr	r0, [pc, #332]	; (8001020 <show_set+0x6b8>)
 8000ed4:	f003 fe44 	bl	8004b60 <siprintf>
}
 8000ed8:	e3df      	b.n	800169a <show_set+0xd32>
	else if(clockmode == 5){
 8000eda:	4b52      	ldr	r3, [pc, #328]	; (8001024 <show_set+0x6bc>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2b05      	cmp	r3, #5
 8000ee0:	f040 83db 	bne.w	800169a <show_set+0xd32>
		if(sw == 1){
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d118      	bne.n	8000f1c <show_set+0x5b4>
			if(unit_alarm2 < 2){
 8000eea:	4b4f      	ldr	r3, [pc, #316]	; (8001028 <show_set+0x6c0>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	dc05      	bgt.n	8000efe <show_set+0x596>
				unit_alarm2++;
 8000ef2:	4b4d      	ldr	r3, [pc, #308]	; (8001028 <show_set+0x6c0>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	4a4b      	ldr	r2, [pc, #300]	; (8001028 <show_set+0x6c0>)
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	e007      	b.n	8000f0e <show_set+0x5a6>
				unit_alarm2 = 0;
 8000efe:	4b4a      	ldr	r3, [pc, #296]	; (8001028 <show_set+0x6c0>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
				unit_alarm1++;
 8000f04:	4b49      	ldr	r3, [pc, #292]	; (800102c <show_set+0x6c4>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	4a48      	ldr	r2, [pc, #288]	; (800102c <show_set+0x6c4>)
 8000f0c:	6013      	str	r3, [r2, #0]
			if(unit_alarm1 > 2){
 8000f0e:	4b47      	ldr	r3, [pc, #284]	; (800102c <show_set+0x6c4>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	dd02      	ble.n	8000f1c <show_set+0x5b4>
				unit_alarm1 = 0;
 8000f16:	4b45      	ldr	r3, [pc, #276]	; (800102c <show_set+0x6c4>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
		if(sw == 4){
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	d105      	bne.n	8000f2e <show_set+0x5c6>
			unit_alarm1 = 0;
 8000f22:	4b42      	ldr	r3, [pc, #264]	; (800102c <show_set+0x6c4>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
			unit_alarm2 = 0;
 8000f28:	4b3f      	ldr	r3, [pc, #252]	; (8001028 <show_set+0x6c0>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
		if(unit_alarm1 == 0){//set alarm1
 8000f2e:	4b3f      	ldr	r3, [pc, #252]	; (800102c <show_set+0x6c4>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f040 813b 	bne.w	80011ae <show_set+0x846>
			if(alarm2[0])sprintf(line3,"2.%2d:%2d  ON",alarm2[1],alarm2[2]);
 8000f38:	4b3d      	ldr	r3, [pc, #244]	; (8001030 <show_set+0x6c8>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d008      	beq.n	8000f52 <show_set+0x5ea>
 8000f40:	4b3b      	ldr	r3, [pc, #236]	; (8001030 <show_set+0x6c8>)
 8000f42:	685a      	ldr	r2, [r3, #4]
 8000f44:	4b3a      	ldr	r3, [pc, #232]	; (8001030 <show_set+0x6c8>)
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	493a      	ldr	r1, [pc, #232]	; (8001034 <show_set+0x6cc>)
 8000f4a:	4835      	ldr	r0, [pc, #212]	; (8001020 <show_set+0x6b8>)
 8000f4c:	f003 fe08 	bl	8004b60 <siprintf>
 8000f50:	e007      	b.n	8000f62 <show_set+0x5fa>
			else sprintf(line3,"2.%2d:%2d OFF",alarm2[1],alarm2[2]);
 8000f52:	4b37      	ldr	r3, [pc, #220]	; (8001030 <show_set+0x6c8>)
 8000f54:	685a      	ldr	r2, [r3, #4]
 8000f56:	4b36      	ldr	r3, [pc, #216]	; (8001030 <show_set+0x6c8>)
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	4937      	ldr	r1, [pc, #220]	; (8001038 <show_set+0x6d0>)
 8000f5c:	4830      	ldr	r0, [pc, #192]	; (8001020 <show_set+0x6b8>)
 8000f5e:	f003 fdff 	bl	8004b60 <siprintf>
			if(unit_alarm2 == 0){
 8000f62:	4b31      	ldr	r3, [pc, #196]	; (8001028 <show_set+0x6c0>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d176      	bne.n	8001058 <show_set+0x6f0>
				if(twinkle == 0){
 8000f6a:	4b34      	ldr	r3, [pc, #208]	; (800103c <show_set+0x6d4>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d115      	bne.n	8000f9e <show_set+0x636>
					if(alarm1[0])sprintf(line2,"1.%2d:%2d  ON",alarm1[1],alarm1[2]);
 8000f72:	4b33      	ldr	r3, [pc, #204]	; (8001040 <show_set+0x6d8>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d008      	beq.n	8000f8c <show_set+0x624>
 8000f7a:	4b31      	ldr	r3, [pc, #196]	; (8001040 <show_set+0x6d8>)
 8000f7c:	685a      	ldr	r2, [r3, #4]
 8000f7e:	4b30      	ldr	r3, [pc, #192]	; (8001040 <show_set+0x6d8>)
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	4930      	ldr	r1, [pc, #192]	; (8001044 <show_set+0x6dc>)
 8000f84:	4830      	ldr	r0, [pc, #192]	; (8001048 <show_set+0x6e0>)
 8000f86:	f003 fdeb 	bl	8004b60 <siprintf>
 8000f8a:	e01b      	b.n	8000fc4 <show_set+0x65c>
					else sprintf(line2,"1.%2d:%2d OFF",alarm1[1],alarm1[2]);
 8000f8c:	4b2c      	ldr	r3, [pc, #176]	; (8001040 <show_set+0x6d8>)
 8000f8e:	685a      	ldr	r2, [r3, #4]
 8000f90:	4b2b      	ldr	r3, [pc, #172]	; (8001040 <show_set+0x6d8>)
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	492d      	ldr	r1, [pc, #180]	; (800104c <show_set+0x6e4>)
 8000f96:	482c      	ldr	r0, [pc, #176]	; (8001048 <show_set+0x6e0>)
 8000f98:	f003 fde2 	bl	8004b60 <siprintf>
 8000f9c:	e012      	b.n	8000fc4 <show_set+0x65c>
					if(alarm1[0])sprintf(line2,"1.  :%2d  ON",alarm1[2]);
 8000f9e:	4b28      	ldr	r3, [pc, #160]	; (8001040 <show_set+0x6d8>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d007      	beq.n	8000fb6 <show_set+0x64e>
 8000fa6:	4b26      	ldr	r3, [pc, #152]	; (8001040 <show_set+0x6d8>)
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	461a      	mov	r2, r3
 8000fac:	4928      	ldr	r1, [pc, #160]	; (8001050 <show_set+0x6e8>)
 8000fae:	4826      	ldr	r0, [pc, #152]	; (8001048 <show_set+0x6e0>)
 8000fb0:	f003 fdd6 	bl	8004b60 <siprintf>
 8000fb4:	e006      	b.n	8000fc4 <show_set+0x65c>
					else sprintf(line2,"1.  :%2d OFF",alarm1[2]);
 8000fb6:	4b22      	ldr	r3, [pc, #136]	; (8001040 <show_set+0x6d8>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4925      	ldr	r1, [pc, #148]	; (8001054 <show_set+0x6ec>)
 8000fbe:	4822      	ldr	r0, [pc, #136]	; (8001048 <show_set+0x6e0>)
 8000fc0:	f003 fdce 	bl	8004b60 <siprintf>
				if(sw == 3){
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2b03      	cmp	r3, #3
 8000fc8:	d10d      	bne.n	8000fe6 <show_set+0x67e>
					if(alarm1[1] < 24)alarm1[1]++;
 8000fca:	4b1d      	ldr	r3, [pc, #116]	; (8001040 <show_set+0x6d8>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2b17      	cmp	r3, #23
 8000fd0:	dc05      	bgt.n	8000fde <show_set+0x676>
 8000fd2:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <show_set+0x6d8>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	4a19      	ldr	r2, [pc, #100]	; (8001040 <show_set+0x6d8>)
 8000fda:	6053      	str	r3, [r2, #4]
}
 8000fdc:	e35d      	b.n	800169a <show_set+0xd32>
					else alarm1[1] = 0;
 8000fde:	4b18      	ldr	r3, [pc, #96]	; (8001040 <show_set+0x6d8>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	605a      	str	r2, [r3, #4]
}
 8000fe4:	e359      	b.n	800169a <show_set+0xd32>
				else if(sw == 2){
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	f040 8356 	bne.w	800169a <show_set+0xd32>
					if(alarm1[1] > 0)alarm1[1]--;
 8000fee:	4b14      	ldr	r3, [pc, #80]	; (8001040 <show_set+0x6d8>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	dd05      	ble.n	8001002 <show_set+0x69a>
 8000ff6:	4b12      	ldr	r3, [pc, #72]	; (8001040 <show_set+0x6d8>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	4a10      	ldr	r2, [pc, #64]	; (8001040 <show_set+0x6d8>)
 8000ffe:	6053      	str	r3, [r2, #4]
}
 8001000:	e34b      	b.n	800169a <show_set+0xd32>
					else alarm1[1] = 0;
 8001002:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <show_set+0x6d8>)
 8001004:	2200      	movs	r2, #0
 8001006:	605a      	str	r2, [r3, #4]
}
 8001008:	e347      	b.n	800169a <show_set+0xd32>
 800100a:	bf00      	nop
 800100c:	20000004 	.word	0x20000004
 8001010:	20000000 	.word	0x20000000
 8001014:	51eb851f 	.word	0x51eb851f
 8001018:	20000008 	.word	0x20000008
 800101c:	08005438 	.word	0x08005438
 8001020:	200001d8 	.word	0x200001d8
 8001024:	20000188 	.word	0x20000188
 8001028:	200001f0 	.word	0x200001f0
 800102c:	200001f4 	.word	0x200001f4
 8001030:	200001a4 	.word	0x200001a4
 8001034:	08005470 	.word	0x08005470
 8001038:	08005480 	.word	0x08005480
 800103c:	200001e4 	.word	0x200001e4
 8001040:	20000198 	.word	0x20000198
 8001044:	08005450 	.word	0x08005450
 8001048:	200001cc 	.word	0x200001cc
 800104c:	08005460 	.word	0x08005460
 8001050:	08005520 	.word	0x08005520
 8001054:	08005530 	.word	0x08005530
			else if(unit_alarm2 == 1){
 8001058:	4b8c      	ldr	r3, [pc, #560]	; (800128c <show_set+0x924>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d14f      	bne.n	8001100 <show_set+0x798>
				if(twinkle == 0){
 8001060:	4b8b      	ldr	r3, [pc, #556]	; (8001290 <show_set+0x928>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d115      	bne.n	8001094 <show_set+0x72c>
					if(alarm1[0])sprintf(line2,"1.%2d:%2d  ON",alarm1[1],alarm1[2]);
 8001068:	4b8a      	ldr	r3, [pc, #552]	; (8001294 <show_set+0x92c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d008      	beq.n	8001082 <show_set+0x71a>
 8001070:	4b88      	ldr	r3, [pc, #544]	; (8001294 <show_set+0x92c>)
 8001072:	685a      	ldr	r2, [r3, #4]
 8001074:	4b87      	ldr	r3, [pc, #540]	; (8001294 <show_set+0x92c>)
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	4987      	ldr	r1, [pc, #540]	; (8001298 <show_set+0x930>)
 800107a:	4888      	ldr	r0, [pc, #544]	; (800129c <show_set+0x934>)
 800107c:	f003 fd70 	bl	8004b60 <siprintf>
 8001080:	e01b      	b.n	80010ba <show_set+0x752>
					else sprintf(line2,"1.%2d:%2d OFF",alarm1[1],alarm1[2]);
 8001082:	4b84      	ldr	r3, [pc, #528]	; (8001294 <show_set+0x92c>)
 8001084:	685a      	ldr	r2, [r3, #4]
 8001086:	4b83      	ldr	r3, [pc, #524]	; (8001294 <show_set+0x92c>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	4985      	ldr	r1, [pc, #532]	; (80012a0 <show_set+0x938>)
 800108c:	4883      	ldr	r0, [pc, #524]	; (800129c <show_set+0x934>)
 800108e:	f003 fd67 	bl	8004b60 <siprintf>
 8001092:	e012      	b.n	80010ba <show_set+0x752>
					if(alarm1[0])sprintf(line2,"1.%2d:    ON",alarm1[1]);
 8001094:	4b7f      	ldr	r3, [pc, #508]	; (8001294 <show_set+0x92c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d007      	beq.n	80010ac <show_set+0x744>
 800109c:	4b7d      	ldr	r3, [pc, #500]	; (8001294 <show_set+0x92c>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4980      	ldr	r1, [pc, #512]	; (80012a4 <show_set+0x93c>)
 80010a4:	487d      	ldr	r0, [pc, #500]	; (800129c <show_set+0x934>)
 80010a6:	f003 fd5b 	bl	8004b60 <siprintf>
 80010aa:	e006      	b.n	80010ba <show_set+0x752>
					else sprintf(line2,"1.%2d:   OFF",alarm1[1]);
 80010ac:	4b79      	ldr	r3, [pc, #484]	; (8001294 <show_set+0x92c>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	461a      	mov	r2, r3
 80010b2:	497d      	ldr	r1, [pc, #500]	; (80012a8 <show_set+0x940>)
 80010b4:	4879      	ldr	r0, [pc, #484]	; (800129c <show_set+0x934>)
 80010b6:	f003 fd53 	bl	8004b60 <siprintf>
				if(sw == 3){
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	2b03      	cmp	r3, #3
 80010be:	d10d      	bne.n	80010dc <show_set+0x774>
					if(alarm1[2] < 60)alarm1[2]++;
 80010c0:	4b74      	ldr	r3, [pc, #464]	; (8001294 <show_set+0x92c>)
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	2b3b      	cmp	r3, #59	; 0x3b
 80010c6:	dc05      	bgt.n	80010d4 <show_set+0x76c>
 80010c8:	4b72      	ldr	r3, [pc, #456]	; (8001294 <show_set+0x92c>)
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	3301      	adds	r3, #1
 80010ce:	4a71      	ldr	r2, [pc, #452]	; (8001294 <show_set+0x92c>)
 80010d0:	6093      	str	r3, [r2, #8]
}
 80010d2:	e2e2      	b.n	800169a <show_set+0xd32>
					else alarm1[2] = 0;
 80010d4:	4b6f      	ldr	r3, [pc, #444]	; (8001294 <show_set+0x92c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
}
 80010da:	e2de      	b.n	800169a <show_set+0xd32>
				else if(sw == 2){
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2b02      	cmp	r3, #2
 80010e0:	f040 82db 	bne.w	800169a <show_set+0xd32>
					if(alarm1[2] > 0)alarm1[2]--;
 80010e4:	4b6b      	ldr	r3, [pc, #428]	; (8001294 <show_set+0x92c>)
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	dd05      	ble.n	80010f8 <show_set+0x790>
 80010ec:	4b69      	ldr	r3, [pc, #420]	; (8001294 <show_set+0x92c>)
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	3b01      	subs	r3, #1
 80010f2:	4a68      	ldr	r2, [pc, #416]	; (8001294 <show_set+0x92c>)
 80010f4:	6093      	str	r3, [r2, #8]
}
 80010f6:	e2d0      	b.n	800169a <show_set+0xd32>
					else alarm1[2] = 0;
 80010f8:	4b66      	ldr	r3, [pc, #408]	; (8001294 <show_set+0x92c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
}
 80010fe:	e2cc      	b.n	800169a <show_set+0xd32>
			else if(unit_alarm2 == 2){
 8001100:	4b62      	ldr	r3, [pc, #392]	; (800128c <show_set+0x924>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b02      	cmp	r3, #2
 8001106:	f040 82c8 	bne.w	800169a <show_set+0xd32>
				if(twinkle == 0){
 800110a:	4b61      	ldr	r3, [pc, #388]	; (8001290 <show_set+0x928>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d115      	bne.n	800113e <show_set+0x7d6>
					if(alarm1[0])sprintf(line2,"1.%2d:%2d  ON",alarm1[1],alarm1[2]);
 8001112:	4b60      	ldr	r3, [pc, #384]	; (8001294 <show_set+0x92c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d008      	beq.n	800112c <show_set+0x7c4>
 800111a:	4b5e      	ldr	r3, [pc, #376]	; (8001294 <show_set+0x92c>)
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	4b5d      	ldr	r3, [pc, #372]	; (8001294 <show_set+0x92c>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	495d      	ldr	r1, [pc, #372]	; (8001298 <show_set+0x930>)
 8001124:	485d      	ldr	r0, [pc, #372]	; (800129c <show_set+0x934>)
 8001126:	f003 fd1b 	bl	8004b60 <siprintf>
 800112a:	e01d      	b.n	8001168 <show_set+0x800>
					else sprintf(line2,"1.%2d:%2d OFF",alarm1[1],alarm1[2]);
 800112c:	4b59      	ldr	r3, [pc, #356]	; (8001294 <show_set+0x92c>)
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	4b58      	ldr	r3, [pc, #352]	; (8001294 <show_set+0x92c>)
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	495a      	ldr	r1, [pc, #360]	; (80012a0 <show_set+0x938>)
 8001136:	4859      	ldr	r0, [pc, #356]	; (800129c <show_set+0x934>)
 8001138:	f003 fd12 	bl	8004b60 <siprintf>
 800113c:	e014      	b.n	8001168 <show_set+0x800>
					if(alarm1[0])sprintf(line2,"1.%2d:%2d    ",alarm1[1], alarm1[2]);
 800113e:	4b55      	ldr	r3, [pc, #340]	; (8001294 <show_set+0x92c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d008      	beq.n	8001158 <show_set+0x7f0>
 8001146:	4b53      	ldr	r3, [pc, #332]	; (8001294 <show_set+0x92c>)
 8001148:	685a      	ldr	r2, [r3, #4]
 800114a:	4b52      	ldr	r3, [pc, #328]	; (8001294 <show_set+0x92c>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	4957      	ldr	r1, [pc, #348]	; (80012ac <show_set+0x944>)
 8001150:	4852      	ldr	r0, [pc, #328]	; (800129c <show_set+0x934>)
 8001152:	f003 fd05 	bl	8004b60 <siprintf>
 8001156:	e007      	b.n	8001168 <show_set+0x800>
					else sprintf(line2,"1.%2d:%2d    ",alarm1[1], alarm1[2]);
 8001158:	4b4e      	ldr	r3, [pc, #312]	; (8001294 <show_set+0x92c>)
 800115a:	685a      	ldr	r2, [r3, #4]
 800115c:	4b4d      	ldr	r3, [pc, #308]	; (8001294 <show_set+0x92c>)
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	4952      	ldr	r1, [pc, #328]	; (80012ac <show_set+0x944>)
 8001162:	484e      	ldr	r0, [pc, #312]	; (800129c <show_set+0x934>)
 8001164:	f003 fcfc 	bl	8004b60 <siprintf>
				if(sw == 3){
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2b03      	cmp	r3, #3
 800116c:	d10d      	bne.n	800118a <show_set+0x822>
					if(alarm1[0] == 0)alarm1[0]++;
 800116e:	4b49      	ldr	r3, [pc, #292]	; (8001294 <show_set+0x92c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d105      	bne.n	8001182 <show_set+0x81a>
 8001176:	4b47      	ldr	r3, [pc, #284]	; (8001294 <show_set+0x92c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	3301      	adds	r3, #1
 800117c:	4a45      	ldr	r2, [pc, #276]	; (8001294 <show_set+0x92c>)
 800117e:	6013      	str	r3, [r2, #0]
}
 8001180:	e28b      	b.n	800169a <show_set+0xd32>
					else alarm1[0] = 0;
 8001182:	4b44      	ldr	r3, [pc, #272]	; (8001294 <show_set+0x92c>)
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
}
 8001188:	e287      	b.n	800169a <show_set+0xd32>
				else if(sw == 2){
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2b02      	cmp	r3, #2
 800118e:	f040 8284 	bne.w	800169a <show_set+0xd32>
					if(alarm1[0] > 0)alarm1[0]--;
 8001192:	4b40      	ldr	r3, [pc, #256]	; (8001294 <show_set+0x92c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	dd05      	ble.n	80011a6 <show_set+0x83e>
 800119a:	4b3e      	ldr	r3, [pc, #248]	; (8001294 <show_set+0x92c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	3b01      	subs	r3, #1
 80011a0:	4a3c      	ldr	r2, [pc, #240]	; (8001294 <show_set+0x92c>)
 80011a2:	6013      	str	r3, [r2, #0]
}
 80011a4:	e279      	b.n	800169a <show_set+0xd32>
					else alarm1[0] = 0;
 80011a6:	4b3b      	ldr	r3, [pc, #236]	; (8001294 <show_set+0x92c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
}
 80011ac:	e275      	b.n	800169a <show_set+0xd32>
		else if(unit_alarm1 == 1){//set alarm2
 80011ae:	4b40      	ldr	r3, [pc, #256]	; (80012b0 <show_set+0x948>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	f040 813b 	bne.w	800142e <show_set+0xac6>
			if(alarm3[0])sprintf(line3,"3.%2d:%2d  ON",alarm3[1],alarm3[2]);
 80011b8:	4b3e      	ldr	r3, [pc, #248]	; (80012b4 <show_set+0x94c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d008      	beq.n	80011d2 <show_set+0x86a>
 80011c0:	4b3c      	ldr	r3, [pc, #240]	; (80012b4 <show_set+0x94c>)
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	4b3b      	ldr	r3, [pc, #236]	; (80012b4 <show_set+0x94c>)
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	493b      	ldr	r1, [pc, #236]	; (80012b8 <show_set+0x950>)
 80011ca:	483c      	ldr	r0, [pc, #240]	; (80012bc <show_set+0x954>)
 80011cc:	f003 fcc8 	bl	8004b60 <siprintf>
 80011d0:	e007      	b.n	80011e2 <show_set+0x87a>
			else sprintf(line3,"3.%2d:%2d OFF",alarm3[1],alarm3[2]);
 80011d2:	4b38      	ldr	r3, [pc, #224]	; (80012b4 <show_set+0x94c>)
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	4b37      	ldr	r3, [pc, #220]	; (80012b4 <show_set+0x94c>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	4939      	ldr	r1, [pc, #228]	; (80012c0 <show_set+0x958>)
 80011dc:	4837      	ldr	r0, [pc, #220]	; (80012bc <show_set+0x954>)
 80011de:	f003 fcbf 	bl	8004b60 <siprintf>
			if(unit_alarm2 == 0){
 80011e2:	4b2a      	ldr	r3, [pc, #168]	; (800128c <show_set+0x924>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d176      	bne.n	80012d8 <show_set+0x970>
				if(twinkle == 0){
 80011ea:	4b29      	ldr	r3, [pc, #164]	; (8001290 <show_set+0x928>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d115      	bne.n	800121e <show_set+0x8b6>
					if(alarm2[0])sprintf(line2,"2.%2d:%2d  ON",alarm2[1],alarm2[2]);
 80011f2:	4b34      	ldr	r3, [pc, #208]	; (80012c4 <show_set+0x95c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d008      	beq.n	800120c <show_set+0x8a4>
 80011fa:	4b32      	ldr	r3, [pc, #200]	; (80012c4 <show_set+0x95c>)
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	4b31      	ldr	r3, [pc, #196]	; (80012c4 <show_set+0x95c>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	4931      	ldr	r1, [pc, #196]	; (80012c8 <show_set+0x960>)
 8001204:	4825      	ldr	r0, [pc, #148]	; (800129c <show_set+0x934>)
 8001206:	f003 fcab 	bl	8004b60 <siprintf>
 800120a:	e01b      	b.n	8001244 <show_set+0x8dc>
					else sprintf(line2,"2.%2d:%2d OFF",alarm2[1],alarm2[2]);
 800120c:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <show_set+0x95c>)
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	4b2c      	ldr	r3, [pc, #176]	; (80012c4 <show_set+0x95c>)
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	492d      	ldr	r1, [pc, #180]	; (80012cc <show_set+0x964>)
 8001216:	4821      	ldr	r0, [pc, #132]	; (800129c <show_set+0x934>)
 8001218:	f003 fca2 	bl	8004b60 <siprintf>
 800121c:	e012      	b.n	8001244 <show_set+0x8dc>
					if(alarm2[0])sprintf(line2,"2.  :%2d  ON",alarm2[2]);
 800121e:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <show_set+0x95c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d007      	beq.n	8001236 <show_set+0x8ce>
 8001226:	4b27      	ldr	r3, [pc, #156]	; (80012c4 <show_set+0x95c>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	461a      	mov	r2, r3
 800122c:	4928      	ldr	r1, [pc, #160]	; (80012d0 <show_set+0x968>)
 800122e:	481b      	ldr	r0, [pc, #108]	; (800129c <show_set+0x934>)
 8001230:	f003 fc96 	bl	8004b60 <siprintf>
 8001234:	e006      	b.n	8001244 <show_set+0x8dc>
					else sprintf(line2,"2.  :%2d OFF",alarm2[2]);
 8001236:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <show_set+0x95c>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	461a      	mov	r2, r3
 800123c:	4925      	ldr	r1, [pc, #148]	; (80012d4 <show_set+0x96c>)
 800123e:	4817      	ldr	r0, [pc, #92]	; (800129c <show_set+0x934>)
 8001240:	f003 fc8e 	bl	8004b60 <siprintf>
				if(sw == 3){
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2b03      	cmp	r3, #3
 8001248:	d10d      	bne.n	8001266 <show_set+0x8fe>
					if(alarm2[1] < 24)alarm2[1]++;
 800124a:	4b1e      	ldr	r3, [pc, #120]	; (80012c4 <show_set+0x95c>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2b17      	cmp	r3, #23
 8001250:	dc05      	bgt.n	800125e <show_set+0x8f6>
 8001252:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <show_set+0x95c>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	3301      	adds	r3, #1
 8001258:	4a1a      	ldr	r2, [pc, #104]	; (80012c4 <show_set+0x95c>)
 800125a:	6053      	str	r3, [r2, #4]
}
 800125c:	e21d      	b.n	800169a <show_set+0xd32>
					else alarm2[1] = 0;
 800125e:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <show_set+0x95c>)
 8001260:	2200      	movs	r2, #0
 8001262:	605a      	str	r2, [r3, #4]
}
 8001264:	e219      	b.n	800169a <show_set+0xd32>
				else if(sw == 2){
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2b02      	cmp	r3, #2
 800126a:	f040 8216 	bne.w	800169a <show_set+0xd32>
					if(alarm2[1] > 0)alarm2[1]--;
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <show_set+0x95c>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	dd05      	ble.n	8001282 <show_set+0x91a>
 8001276:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <show_set+0x95c>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	3b01      	subs	r3, #1
 800127c:	4a11      	ldr	r2, [pc, #68]	; (80012c4 <show_set+0x95c>)
 800127e:	6053      	str	r3, [r2, #4]
}
 8001280:	e20b      	b.n	800169a <show_set+0xd32>
					else alarm2[1] = 0;
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <show_set+0x95c>)
 8001284:	2200      	movs	r2, #0
 8001286:	605a      	str	r2, [r3, #4]
}
 8001288:	e207      	b.n	800169a <show_set+0xd32>
 800128a:	bf00      	nop
 800128c:	200001f0 	.word	0x200001f0
 8001290:	200001e4 	.word	0x200001e4
 8001294:	20000198 	.word	0x20000198
 8001298:	08005450 	.word	0x08005450
 800129c:	200001cc 	.word	0x200001cc
 80012a0:	08005460 	.word	0x08005460
 80012a4:	08005540 	.word	0x08005540
 80012a8:	08005550 	.word	0x08005550
 80012ac:	08005560 	.word	0x08005560
 80012b0:	200001f4 	.word	0x200001f4
 80012b4:	200001b0 	.word	0x200001b0
 80012b8:	08005490 	.word	0x08005490
 80012bc:	200001d8 	.word	0x200001d8
 80012c0:	080054a0 	.word	0x080054a0
 80012c4:	200001a4 	.word	0x200001a4
 80012c8:	08005470 	.word	0x08005470
 80012cc:	08005480 	.word	0x08005480
 80012d0:	08005570 	.word	0x08005570
 80012d4:	08005580 	.word	0x08005580
			else if(unit_alarm2 == 1){
 80012d8:	4b8c      	ldr	r3, [pc, #560]	; (800150c <show_set+0xba4>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d14f      	bne.n	8001380 <show_set+0xa18>
				if(twinkle == 0){
 80012e0:	4b8b      	ldr	r3, [pc, #556]	; (8001510 <show_set+0xba8>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d115      	bne.n	8001314 <show_set+0x9ac>
					if(alarm2[0])sprintf(line2,"2.%2d:%2d  ON",alarm2[1],alarm2[2]);
 80012e8:	4b8a      	ldr	r3, [pc, #552]	; (8001514 <show_set+0xbac>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d008      	beq.n	8001302 <show_set+0x99a>
 80012f0:	4b88      	ldr	r3, [pc, #544]	; (8001514 <show_set+0xbac>)
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	4b87      	ldr	r3, [pc, #540]	; (8001514 <show_set+0xbac>)
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	4987      	ldr	r1, [pc, #540]	; (8001518 <show_set+0xbb0>)
 80012fa:	4888      	ldr	r0, [pc, #544]	; (800151c <show_set+0xbb4>)
 80012fc:	f003 fc30 	bl	8004b60 <siprintf>
 8001300:	e01b      	b.n	800133a <show_set+0x9d2>
					else sprintf(line2,"2.%2d:%2d OFF",alarm2[1],alarm2[2]);
 8001302:	4b84      	ldr	r3, [pc, #528]	; (8001514 <show_set+0xbac>)
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	4b83      	ldr	r3, [pc, #524]	; (8001514 <show_set+0xbac>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	4985      	ldr	r1, [pc, #532]	; (8001520 <show_set+0xbb8>)
 800130c:	4883      	ldr	r0, [pc, #524]	; (800151c <show_set+0xbb4>)
 800130e:	f003 fc27 	bl	8004b60 <siprintf>
 8001312:	e012      	b.n	800133a <show_set+0x9d2>
					if(alarm2[0])sprintf(line2,"2.%2d:    ON",alarm2[1]);
 8001314:	4b7f      	ldr	r3, [pc, #508]	; (8001514 <show_set+0xbac>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d007      	beq.n	800132c <show_set+0x9c4>
 800131c:	4b7d      	ldr	r3, [pc, #500]	; (8001514 <show_set+0xbac>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	461a      	mov	r2, r3
 8001322:	4980      	ldr	r1, [pc, #512]	; (8001524 <show_set+0xbbc>)
 8001324:	487d      	ldr	r0, [pc, #500]	; (800151c <show_set+0xbb4>)
 8001326:	f003 fc1b 	bl	8004b60 <siprintf>
 800132a:	e006      	b.n	800133a <show_set+0x9d2>
					else sprintf(line2,"2.%2d:   OFF",alarm2[1]);
 800132c:	4b79      	ldr	r3, [pc, #484]	; (8001514 <show_set+0xbac>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	461a      	mov	r2, r3
 8001332:	497d      	ldr	r1, [pc, #500]	; (8001528 <show_set+0xbc0>)
 8001334:	4879      	ldr	r0, [pc, #484]	; (800151c <show_set+0xbb4>)
 8001336:	f003 fc13 	bl	8004b60 <siprintf>
				if(sw == 3){
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2b03      	cmp	r3, #3
 800133e:	d10d      	bne.n	800135c <show_set+0x9f4>
					if(alarm2[2] < 60)alarm2[2]++;
 8001340:	4b74      	ldr	r3, [pc, #464]	; (8001514 <show_set+0xbac>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	2b3b      	cmp	r3, #59	; 0x3b
 8001346:	dc05      	bgt.n	8001354 <show_set+0x9ec>
 8001348:	4b72      	ldr	r3, [pc, #456]	; (8001514 <show_set+0xbac>)
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	3301      	adds	r3, #1
 800134e:	4a71      	ldr	r2, [pc, #452]	; (8001514 <show_set+0xbac>)
 8001350:	6093      	str	r3, [r2, #8]
}
 8001352:	e1a2      	b.n	800169a <show_set+0xd32>
					else alarm2[2] = 0;
 8001354:	4b6f      	ldr	r3, [pc, #444]	; (8001514 <show_set+0xbac>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
}
 800135a:	e19e      	b.n	800169a <show_set+0xd32>
				else if(sw == 2){
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2b02      	cmp	r3, #2
 8001360:	f040 819b 	bne.w	800169a <show_set+0xd32>
					if(alarm2[2] > 0)alarm2[2]--;
 8001364:	4b6b      	ldr	r3, [pc, #428]	; (8001514 <show_set+0xbac>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	2b00      	cmp	r3, #0
 800136a:	dd05      	ble.n	8001378 <show_set+0xa10>
 800136c:	4b69      	ldr	r3, [pc, #420]	; (8001514 <show_set+0xbac>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	3b01      	subs	r3, #1
 8001372:	4a68      	ldr	r2, [pc, #416]	; (8001514 <show_set+0xbac>)
 8001374:	6093      	str	r3, [r2, #8]
}
 8001376:	e190      	b.n	800169a <show_set+0xd32>
					else alarm2[2] = 0;
 8001378:	4b66      	ldr	r3, [pc, #408]	; (8001514 <show_set+0xbac>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
}
 800137e:	e18c      	b.n	800169a <show_set+0xd32>
			else if(unit_alarm2 == 2){
 8001380:	4b62      	ldr	r3, [pc, #392]	; (800150c <show_set+0xba4>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b02      	cmp	r3, #2
 8001386:	f040 8188 	bne.w	800169a <show_set+0xd32>
				if(twinkle == 0){
 800138a:	4b61      	ldr	r3, [pc, #388]	; (8001510 <show_set+0xba8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d115      	bne.n	80013be <show_set+0xa56>
					if(alarm2[0])sprintf(line2,"2.%2d:%2d  ON",alarm2[1],alarm2[2]);
 8001392:	4b60      	ldr	r3, [pc, #384]	; (8001514 <show_set+0xbac>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d008      	beq.n	80013ac <show_set+0xa44>
 800139a:	4b5e      	ldr	r3, [pc, #376]	; (8001514 <show_set+0xbac>)
 800139c:	685a      	ldr	r2, [r3, #4]
 800139e:	4b5d      	ldr	r3, [pc, #372]	; (8001514 <show_set+0xbac>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	495d      	ldr	r1, [pc, #372]	; (8001518 <show_set+0xbb0>)
 80013a4:	485d      	ldr	r0, [pc, #372]	; (800151c <show_set+0xbb4>)
 80013a6:	f003 fbdb 	bl	8004b60 <siprintf>
 80013aa:	e01d      	b.n	80013e8 <show_set+0xa80>
					else sprintf(line2,"2.%2d:%2d OFF",alarm2[1],alarm2[2]);
 80013ac:	4b59      	ldr	r3, [pc, #356]	; (8001514 <show_set+0xbac>)
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	4b58      	ldr	r3, [pc, #352]	; (8001514 <show_set+0xbac>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	495a      	ldr	r1, [pc, #360]	; (8001520 <show_set+0xbb8>)
 80013b6:	4859      	ldr	r0, [pc, #356]	; (800151c <show_set+0xbb4>)
 80013b8:	f003 fbd2 	bl	8004b60 <siprintf>
 80013bc:	e014      	b.n	80013e8 <show_set+0xa80>
					if(alarm2[0])sprintf(line2,"2.%2d:%2d    ",alarm2[1], alarm2[2]);
 80013be:	4b55      	ldr	r3, [pc, #340]	; (8001514 <show_set+0xbac>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d008      	beq.n	80013d8 <show_set+0xa70>
 80013c6:	4b53      	ldr	r3, [pc, #332]	; (8001514 <show_set+0xbac>)
 80013c8:	685a      	ldr	r2, [r3, #4]
 80013ca:	4b52      	ldr	r3, [pc, #328]	; (8001514 <show_set+0xbac>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	4957      	ldr	r1, [pc, #348]	; (800152c <show_set+0xbc4>)
 80013d0:	4852      	ldr	r0, [pc, #328]	; (800151c <show_set+0xbb4>)
 80013d2:	f003 fbc5 	bl	8004b60 <siprintf>
 80013d6:	e007      	b.n	80013e8 <show_set+0xa80>
					else sprintf(line2,"2.%2d:%2d    ",alarm2[1], alarm2[2]);
 80013d8:	4b4e      	ldr	r3, [pc, #312]	; (8001514 <show_set+0xbac>)
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	4b4d      	ldr	r3, [pc, #308]	; (8001514 <show_set+0xbac>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	4952      	ldr	r1, [pc, #328]	; (800152c <show_set+0xbc4>)
 80013e2:	484e      	ldr	r0, [pc, #312]	; (800151c <show_set+0xbb4>)
 80013e4:	f003 fbbc 	bl	8004b60 <siprintf>
				if(sw == 3){
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d10d      	bne.n	800140a <show_set+0xaa2>
					if(alarm2[0] == 0)alarm2[0]++;
 80013ee:	4b49      	ldr	r3, [pc, #292]	; (8001514 <show_set+0xbac>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d105      	bne.n	8001402 <show_set+0xa9a>
 80013f6:	4b47      	ldr	r3, [pc, #284]	; (8001514 <show_set+0xbac>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	3301      	adds	r3, #1
 80013fc:	4a45      	ldr	r2, [pc, #276]	; (8001514 <show_set+0xbac>)
 80013fe:	6013      	str	r3, [r2, #0]
}
 8001400:	e14b      	b.n	800169a <show_set+0xd32>
					else alarm2[0] = 0;
 8001402:	4b44      	ldr	r3, [pc, #272]	; (8001514 <show_set+0xbac>)
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
}
 8001408:	e147      	b.n	800169a <show_set+0xd32>
				else if(sw == 2){
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2b02      	cmp	r3, #2
 800140e:	f040 8144 	bne.w	800169a <show_set+0xd32>
					if(alarm2[0] > 0)alarm2[0]--;
 8001412:	4b40      	ldr	r3, [pc, #256]	; (8001514 <show_set+0xbac>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	dd05      	ble.n	8001426 <show_set+0xabe>
 800141a:	4b3e      	ldr	r3, [pc, #248]	; (8001514 <show_set+0xbac>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	3b01      	subs	r3, #1
 8001420:	4a3c      	ldr	r2, [pc, #240]	; (8001514 <show_set+0xbac>)
 8001422:	6013      	str	r3, [r2, #0]
}
 8001424:	e139      	b.n	800169a <show_set+0xd32>
					else alarm2[0] = 0;
 8001426:	4b3b      	ldr	r3, [pc, #236]	; (8001514 <show_set+0xbac>)
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
}
 800142c:	e135      	b.n	800169a <show_set+0xd32>
		else if(unit_alarm1 == 2){//set alarm3
 800142e:	4b40      	ldr	r3, [pc, #256]	; (8001530 <show_set+0xbc8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b02      	cmp	r3, #2
 8001434:	f040 8131 	bne.w	800169a <show_set+0xd32>
			if(alarm2[0])sprintf(line2,"2.%2d:%2d  ON",alarm2[1],alarm2[2]);
 8001438:	4b36      	ldr	r3, [pc, #216]	; (8001514 <show_set+0xbac>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d008      	beq.n	8001452 <show_set+0xaea>
 8001440:	4b34      	ldr	r3, [pc, #208]	; (8001514 <show_set+0xbac>)
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	4b33      	ldr	r3, [pc, #204]	; (8001514 <show_set+0xbac>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	4933      	ldr	r1, [pc, #204]	; (8001518 <show_set+0xbb0>)
 800144a:	4834      	ldr	r0, [pc, #208]	; (800151c <show_set+0xbb4>)
 800144c:	f003 fb88 	bl	8004b60 <siprintf>
 8001450:	e007      	b.n	8001462 <show_set+0xafa>
			else sprintf(line2,"2.%2d:%2d OFF",alarm2[1],alarm2[2]);
 8001452:	4b30      	ldr	r3, [pc, #192]	; (8001514 <show_set+0xbac>)
 8001454:	685a      	ldr	r2, [r3, #4]
 8001456:	4b2f      	ldr	r3, [pc, #188]	; (8001514 <show_set+0xbac>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	4931      	ldr	r1, [pc, #196]	; (8001520 <show_set+0xbb8>)
 800145c:	482f      	ldr	r0, [pc, #188]	; (800151c <show_set+0xbb4>)
 800145e:	f003 fb7f 	bl	8004b60 <siprintf>
			if(unit_alarm2 == 0){
 8001462:	4b2a      	ldr	r3, [pc, #168]	; (800150c <show_set+0xba4>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d170      	bne.n	800154c <show_set+0xbe4>
				if(twinkle == 0){
 800146a:	4b29      	ldr	r3, [pc, #164]	; (8001510 <show_set+0xba8>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d115      	bne.n	800149e <show_set+0xb36>
					if(alarm3[0])sprintf(line3,"3.%2d:%2d  ON",alarm3[1],alarm3[2]);
 8001472:	4b30      	ldr	r3, [pc, #192]	; (8001534 <show_set+0xbcc>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d008      	beq.n	800148c <show_set+0xb24>
 800147a:	4b2e      	ldr	r3, [pc, #184]	; (8001534 <show_set+0xbcc>)
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	4b2d      	ldr	r3, [pc, #180]	; (8001534 <show_set+0xbcc>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	492d      	ldr	r1, [pc, #180]	; (8001538 <show_set+0xbd0>)
 8001484:	482d      	ldr	r0, [pc, #180]	; (800153c <show_set+0xbd4>)
 8001486:	f003 fb6b 	bl	8004b60 <siprintf>
 800148a:	e01b      	b.n	80014c4 <show_set+0xb5c>
					else sprintf(line3,"3.%2d:%2d OFF",alarm3[1],alarm3[2]);
 800148c:	4b29      	ldr	r3, [pc, #164]	; (8001534 <show_set+0xbcc>)
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	4b28      	ldr	r3, [pc, #160]	; (8001534 <show_set+0xbcc>)
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	492a      	ldr	r1, [pc, #168]	; (8001540 <show_set+0xbd8>)
 8001496:	4829      	ldr	r0, [pc, #164]	; (800153c <show_set+0xbd4>)
 8001498:	f003 fb62 	bl	8004b60 <siprintf>
 800149c:	e012      	b.n	80014c4 <show_set+0xb5c>
					if(alarm3[0])sprintf(line3,"3.  :%2d  ON",alarm3[2]);
 800149e:	4b25      	ldr	r3, [pc, #148]	; (8001534 <show_set+0xbcc>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d007      	beq.n	80014b6 <show_set+0xb4e>
 80014a6:	4b23      	ldr	r3, [pc, #140]	; (8001534 <show_set+0xbcc>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	461a      	mov	r2, r3
 80014ac:	4925      	ldr	r1, [pc, #148]	; (8001544 <show_set+0xbdc>)
 80014ae:	4823      	ldr	r0, [pc, #140]	; (800153c <show_set+0xbd4>)
 80014b0:	f003 fb56 	bl	8004b60 <siprintf>
 80014b4:	e006      	b.n	80014c4 <show_set+0xb5c>
					else sprintf(line3,"3.  :%2d OFF",alarm3[2]);
 80014b6:	4b1f      	ldr	r3, [pc, #124]	; (8001534 <show_set+0xbcc>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	461a      	mov	r2, r3
 80014bc:	4922      	ldr	r1, [pc, #136]	; (8001548 <show_set+0xbe0>)
 80014be:	481f      	ldr	r0, [pc, #124]	; (800153c <show_set+0xbd4>)
 80014c0:	f003 fb4e 	bl	8004b60 <siprintf>
				if(sw == 3){
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2b03      	cmp	r3, #3
 80014c8:	d10d      	bne.n	80014e6 <show_set+0xb7e>
					if(alarm3[1] < 24)alarm3[1]++;
 80014ca:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <show_set+0xbcc>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b17      	cmp	r3, #23
 80014d0:	dc05      	bgt.n	80014de <show_set+0xb76>
 80014d2:	4b18      	ldr	r3, [pc, #96]	; (8001534 <show_set+0xbcc>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	3301      	adds	r3, #1
 80014d8:	4a16      	ldr	r2, [pc, #88]	; (8001534 <show_set+0xbcc>)
 80014da:	6053      	str	r3, [r2, #4]
}
 80014dc:	e0dd      	b.n	800169a <show_set+0xd32>
					else alarm3[1] = 0;
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <show_set+0xbcc>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	605a      	str	r2, [r3, #4]
}
 80014e4:	e0d9      	b.n	800169a <show_set+0xd32>
				else if(sw == 2){
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	f040 80d6 	bne.w	800169a <show_set+0xd32>
					if(alarm3[1] > 0)alarm3[1]--;
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <show_set+0xbcc>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	dd05      	ble.n	8001502 <show_set+0xb9a>
 80014f6:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <show_set+0xbcc>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	4a0d      	ldr	r2, [pc, #52]	; (8001534 <show_set+0xbcc>)
 80014fe:	6053      	str	r3, [r2, #4]
}
 8001500:	e0cb      	b.n	800169a <show_set+0xd32>
					else alarm3[1] = 0;
 8001502:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <show_set+0xbcc>)
 8001504:	2200      	movs	r2, #0
 8001506:	605a      	str	r2, [r3, #4]
}
 8001508:	e0c7      	b.n	800169a <show_set+0xd32>
 800150a:	bf00      	nop
 800150c:	200001f0 	.word	0x200001f0
 8001510:	200001e4 	.word	0x200001e4
 8001514:	200001a4 	.word	0x200001a4
 8001518:	08005470 	.word	0x08005470
 800151c:	200001cc 	.word	0x200001cc
 8001520:	08005480 	.word	0x08005480
 8001524:	08005590 	.word	0x08005590
 8001528:	080055a0 	.word	0x080055a0
 800152c:	080055b0 	.word	0x080055b0
 8001530:	200001f4 	.word	0x200001f4
 8001534:	200001b0 	.word	0x200001b0
 8001538:	08005490 	.word	0x08005490
 800153c:	200001d8 	.word	0x200001d8
 8001540:	080054a0 	.word	0x080054a0
 8001544:	080055c0 	.word	0x080055c0
 8001548:	080055d0 	.word	0x080055d0
			else if(unit_alarm2 == 1){
 800154c:	4b55      	ldr	r3, [pc, #340]	; (80016a4 <show_set+0xd3c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d14e      	bne.n	80015f2 <show_set+0xc8a>
				if(twinkle == 0){
 8001554:	4b54      	ldr	r3, [pc, #336]	; (80016a8 <show_set+0xd40>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d115      	bne.n	8001588 <show_set+0xc20>
					if(alarm3[0])sprintf(line3,"3.%2d:%2d  ON",alarm3[1],alarm3[2]);
 800155c:	4b53      	ldr	r3, [pc, #332]	; (80016ac <show_set+0xd44>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d008      	beq.n	8001576 <show_set+0xc0e>
 8001564:	4b51      	ldr	r3, [pc, #324]	; (80016ac <show_set+0xd44>)
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	4b50      	ldr	r3, [pc, #320]	; (80016ac <show_set+0xd44>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	4950      	ldr	r1, [pc, #320]	; (80016b0 <show_set+0xd48>)
 800156e:	4851      	ldr	r0, [pc, #324]	; (80016b4 <show_set+0xd4c>)
 8001570:	f003 faf6 	bl	8004b60 <siprintf>
 8001574:	e01b      	b.n	80015ae <show_set+0xc46>
					else sprintf(line3,"3.%2d:%2d OFF",alarm3[1],alarm3[2]);
 8001576:	4b4d      	ldr	r3, [pc, #308]	; (80016ac <show_set+0xd44>)
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	4b4c      	ldr	r3, [pc, #304]	; (80016ac <show_set+0xd44>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	494e      	ldr	r1, [pc, #312]	; (80016b8 <show_set+0xd50>)
 8001580:	484c      	ldr	r0, [pc, #304]	; (80016b4 <show_set+0xd4c>)
 8001582:	f003 faed 	bl	8004b60 <siprintf>
 8001586:	e012      	b.n	80015ae <show_set+0xc46>
					if(alarm3[0])sprintf(line3,"3.%2d:    ON",alarm3[1]);
 8001588:	4b48      	ldr	r3, [pc, #288]	; (80016ac <show_set+0xd44>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d007      	beq.n	80015a0 <show_set+0xc38>
 8001590:	4b46      	ldr	r3, [pc, #280]	; (80016ac <show_set+0xd44>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	461a      	mov	r2, r3
 8001596:	4949      	ldr	r1, [pc, #292]	; (80016bc <show_set+0xd54>)
 8001598:	4846      	ldr	r0, [pc, #280]	; (80016b4 <show_set+0xd4c>)
 800159a:	f003 fae1 	bl	8004b60 <siprintf>
 800159e:	e006      	b.n	80015ae <show_set+0xc46>
					else sprintf(line3,"3.%2d:   OFF",alarm3[1]);
 80015a0:	4b42      	ldr	r3, [pc, #264]	; (80016ac <show_set+0xd44>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	461a      	mov	r2, r3
 80015a6:	4946      	ldr	r1, [pc, #280]	; (80016c0 <show_set+0xd58>)
 80015a8:	4842      	ldr	r0, [pc, #264]	; (80016b4 <show_set+0xd4c>)
 80015aa:	f003 fad9 	bl	8004b60 <siprintf>
				if(sw == 3){
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2b03      	cmp	r3, #3
 80015b2:	d10d      	bne.n	80015d0 <show_set+0xc68>
					if(alarm3[2] < 60)alarm3[2]++;
 80015b4:	4b3d      	ldr	r3, [pc, #244]	; (80016ac <show_set+0xd44>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	2b3b      	cmp	r3, #59	; 0x3b
 80015ba:	dc05      	bgt.n	80015c8 <show_set+0xc60>
 80015bc:	4b3b      	ldr	r3, [pc, #236]	; (80016ac <show_set+0xd44>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	3301      	adds	r3, #1
 80015c2:	4a3a      	ldr	r2, [pc, #232]	; (80016ac <show_set+0xd44>)
 80015c4:	6093      	str	r3, [r2, #8]
}
 80015c6:	e068      	b.n	800169a <show_set+0xd32>
					else alarm3[2] = 0;
 80015c8:	4b38      	ldr	r3, [pc, #224]	; (80016ac <show_set+0xd44>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
}
 80015ce:	e064      	b.n	800169a <show_set+0xd32>
				else if(sw == 2){
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d161      	bne.n	800169a <show_set+0xd32>
					if(alarm3[2] > 0)alarm3[2]--;
 80015d6:	4b35      	ldr	r3, [pc, #212]	; (80016ac <show_set+0xd44>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	dd05      	ble.n	80015ea <show_set+0xc82>
 80015de:	4b33      	ldr	r3, [pc, #204]	; (80016ac <show_set+0xd44>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	4a31      	ldr	r2, [pc, #196]	; (80016ac <show_set+0xd44>)
 80015e6:	6093      	str	r3, [r2, #8]
}
 80015e8:	e057      	b.n	800169a <show_set+0xd32>
					else alarm3[2] = 0;
 80015ea:	4b30      	ldr	r3, [pc, #192]	; (80016ac <show_set+0xd44>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
}
 80015f0:	e053      	b.n	800169a <show_set+0xd32>
			else if(unit_alarm2 == 2){
 80015f2:	4b2c      	ldr	r3, [pc, #176]	; (80016a4 <show_set+0xd3c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d14f      	bne.n	800169a <show_set+0xd32>
				if(twinkle == 0){
 80015fa:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <show_set+0xd40>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d115      	bne.n	800162e <show_set+0xcc6>
					if(alarm3[0])sprintf(line3,"3.%2d:%2d  ON",alarm3[1],alarm3[2]);
 8001602:	4b2a      	ldr	r3, [pc, #168]	; (80016ac <show_set+0xd44>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d008      	beq.n	800161c <show_set+0xcb4>
 800160a:	4b28      	ldr	r3, [pc, #160]	; (80016ac <show_set+0xd44>)
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	4b27      	ldr	r3, [pc, #156]	; (80016ac <show_set+0xd44>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	4927      	ldr	r1, [pc, #156]	; (80016b0 <show_set+0xd48>)
 8001614:	4827      	ldr	r0, [pc, #156]	; (80016b4 <show_set+0xd4c>)
 8001616:	f003 faa3 	bl	8004b60 <siprintf>
 800161a:	e01d      	b.n	8001658 <show_set+0xcf0>
					else sprintf(line3,"3.%2d:%2d OFF",alarm3[1],alarm3[2]);
 800161c:	4b23      	ldr	r3, [pc, #140]	; (80016ac <show_set+0xd44>)
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	4b22      	ldr	r3, [pc, #136]	; (80016ac <show_set+0xd44>)
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	4924      	ldr	r1, [pc, #144]	; (80016b8 <show_set+0xd50>)
 8001626:	4823      	ldr	r0, [pc, #140]	; (80016b4 <show_set+0xd4c>)
 8001628:	f003 fa9a 	bl	8004b60 <siprintf>
 800162c:	e014      	b.n	8001658 <show_set+0xcf0>
					if(alarm3[0])sprintf(line3,"3.%2d:%2d    ",alarm3[1], alarm3[2]);
 800162e:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <show_set+0xd44>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d008      	beq.n	8001648 <show_set+0xce0>
 8001636:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <show_set+0xd44>)
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <show_set+0xd44>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	4921      	ldr	r1, [pc, #132]	; (80016c4 <show_set+0xd5c>)
 8001640:	481c      	ldr	r0, [pc, #112]	; (80016b4 <show_set+0xd4c>)
 8001642:	f003 fa8d 	bl	8004b60 <siprintf>
 8001646:	e007      	b.n	8001658 <show_set+0xcf0>
					else sprintf(line3,"3.%2d:%2d    ",alarm3[1], alarm3[2]);
 8001648:	4b18      	ldr	r3, [pc, #96]	; (80016ac <show_set+0xd44>)
 800164a:	685a      	ldr	r2, [r3, #4]
 800164c:	4b17      	ldr	r3, [pc, #92]	; (80016ac <show_set+0xd44>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	491c      	ldr	r1, [pc, #112]	; (80016c4 <show_set+0xd5c>)
 8001652:	4818      	ldr	r0, [pc, #96]	; (80016b4 <show_set+0xd4c>)
 8001654:	f003 fa84 	bl	8004b60 <siprintf>
				if(sw == 3){
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2b03      	cmp	r3, #3
 800165c:	d10d      	bne.n	800167a <show_set+0xd12>
					if(alarm3[0] == 0)alarm3[0]++;
 800165e:	4b13      	ldr	r3, [pc, #76]	; (80016ac <show_set+0xd44>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d105      	bne.n	8001672 <show_set+0xd0a>
 8001666:	4b11      	ldr	r3, [pc, #68]	; (80016ac <show_set+0xd44>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	3301      	adds	r3, #1
 800166c:	4a0f      	ldr	r2, [pc, #60]	; (80016ac <show_set+0xd44>)
 800166e:	6013      	str	r3, [r2, #0]
}
 8001670:	e013      	b.n	800169a <show_set+0xd32>
					else alarm3[0] = 0;
 8001672:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <show_set+0xd44>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
}
 8001678:	e00f      	b.n	800169a <show_set+0xd32>
				else if(sw == 2){
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2b02      	cmp	r3, #2
 800167e:	d10c      	bne.n	800169a <show_set+0xd32>
					if(alarm3[0] > 0)alarm3[0]--;
 8001680:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <show_set+0xd44>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	dd05      	ble.n	8001694 <show_set+0xd2c>
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <show_set+0xd44>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	3b01      	subs	r3, #1
 800168e:	4a07      	ldr	r2, [pc, #28]	; (80016ac <show_set+0xd44>)
 8001690:	6013      	str	r3, [r2, #0]
}
 8001692:	e002      	b.n	800169a <show_set+0xd32>
					else alarm3[0] = 0;
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <show_set+0xd44>)
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
}
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200001f0 	.word	0x200001f0
 80016a8:	200001e4 	.word	0x200001e4
 80016ac:	200001b0 	.word	0x200001b0
 80016b0:	08005490 	.word	0x08005490
 80016b4:	200001d8 	.word	0x200001d8
 80016b8:	080054a0 	.word	0x080054a0
 80016bc:	080055e0 	.word	0x080055e0
 80016c0:	080055f0 	.word	0x080055f0
 80016c4:	08005600 	.word	0x08005600

080016c8 <show_error>:

void show_error(){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	sprintf(line1,"time error ");
 80016cc:	4906      	ldr	r1, [pc, #24]	; (80016e8 <show_error+0x20>)
 80016ce:	4807      	ldr	r0, [pc, #28]	; (80016ec <show_error+0x24>)
 80016d0:	f003 fa46 	bl	8004b60 <siprintf>
	sprintf(line2,"           ");
 80016d4:	4906      	ldr	r1, [pc, #24]	; (80016f0 <show_error+0x28>)
 80016d6:	4807      	ldr	r0, [pc, #28]	; (80016f4 <show_error+0x2c>)
 80016d8:	f003 fa42 	bl	8004b60 <siprintf>
	sprintf(line3,"           ");
 80016dc:	4904      	ldr	r1, [pc, #16]	; (80016f0 <show_error+0x28>)
 80016de:	4806      	ldr	r0, [pc, #24]	; (80016f8 <show_error+0x30>)
 80016e0:	f003 fa3e 	bl	8004b60 <siprintf>
}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	08005610 	.word	0x08005610
 80016ec:	200001c0 	.word	0x200001c0
 80016f0:	08005438 	.word	0x08005438
 80016f4:	200001cc 	.word	0x200001cc
 80016f8:	200001d8 	.word	0x200001d8

080016fc <check_sw>:
	return 0;
}


//check which sw is pressed
int check_sw(){
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
	//check if sw1 is pressed
	if(HAL_GPIO_ReadPin(GPIOD, SW1_Pin)){
 8001700:	2110      	movs	r1, #16
 8001702:	4827      	ldr	r0, [pc, #156]	; (80017a0 <check_sw+0xa4>)
 8001704:	f001 faa6 	bl	8002c54 <HAL_GPIO_ReadPin>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00b      	beq.n	8001726 <check_sw+0x2a>
		HAL_Delay(10);
 800170e:	200a      	movs	r0, #10
 8001710:	f000 fdea 	bl	80022e8 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOD, SW1_Pin)){
 8001714:	2110      	movs	r1, #16
 8001716:	4822      	ldr	r0, [pc, #136]	; (80017a0 <check_sw+0xa4>)
 8001718:	f001 fa9c 	bl	8002c54 <HAL_GPIO_ReadPin>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <check_sw+0x2a>
			return 1;
 8001722:	2301      	movs	r3, #1
 8001724:	e039      	b.n	800179a <check_sw+0x9e>
		}
	}

	//check if sw2 is pressed
	if(HAL_GPIO_ReadPin(GPIOD, SW2_Pin)){
 8001726:	2108      	movs	r1, #8
 8001728:	481d      	ldr	r0, [pc, #116]	; (80017a0 <check_sw+0xa4>)
 800172a:	f001 fa93 	bl	8002c54 <HAL_GPIO_ReadPin>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d00b      	beq.n	800174c <check_sw+0x50>
		HAL_Delay(10);
 8001734:	200a      	movs	r0, #10
 8001736:	f000 fdd7 	bl	80022e8 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOD, SW2_Pin)){
 800173a:	2108      	movs	r1, #8
 800173c:	4818      	ldr	r0, [pc, #96]	; (80017a0 <check_sw+0xa4>)
 800173e:	f001 fa89 	bl	8002c54 <HAL_GPIO_ReadPin>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <check_sw+0x50>
			return 2;
 8001748:	2302      	movs	r3, #2
 800174a:	e026      	b.n	800179a <check_sw+0x9e>
		}
	}

	//check if sw3 is pressed
	if(HAL_GPIO_ReadPin(GPIOB, SW3_Pin)){
 800174c:	2140      	movs	r1, #64	; 0x40
 800174e:	4815      	ldr	r0, [pc, #84]	; (80017a4 <check_sw+0xa8>)
 8001750:	f001 fa80 	bl	8002c54 <HAL_GPIO_ReadPin>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00b      	beq.n	8001772 <check_sw+0x76>
		HAL_Delay(10);
 800175a:	200a      	movs	r0, #10
 800175c:	f000 fdc4 	bl	80022e8 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOB, SW3_Pin)){
 8001760:	2140      	movs	r1, #64	; 0x40
 8001762:	4810      	ldr	r0, [pc, #64]	; (80017a4 <check_sw+0xa8>)
 8001764:	f001 fa76 	bl	8002c54 <HAL_GPIO_ReadPin>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <check_sw+0x76>
			return 3;
 800176e:	2303      	movs	r3, #3
 8001770:	e013      	b.n	800179a <check_sw+0x9e>
		}
	}

	//check if sw4 is pressed
	if(HAL_GPIO_ReadPin(GPIOB, SW4_Pin)){
 8001772:	2101      	movs	r1, #1
 8001774:	480b      	ldr	r0, [pc, #44]	; (80017a4 <check_sw+0xa8>)
 8001776:	f001 fa6d 	bl	8002c54 <HAL_GPIO_ReadPin>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d00b      	beq.n	8001798 <check_sw+0x9c>
		HAL_Delay(10);
 8001780:	200a      	movs	r0, #10
 8001782:	f000 fdb1 	bl	80022e8 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOB, SW4_Pin)){
 8001786:	2101      	movs	r1, #1
 8001788:	4806      	ldr	r0, [pc, #24]	; (80017a4 <check_sw+0xa8>)
 800178a:	f001 fa63 	bl	8002c54 <HAL_GPIO_ReadPin>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <check_sw+0x9c>
			return 4;
 8001794:	2304      	movs	r3, #4
 8001796:	e000      	b.n	800179a <check_sw+0x9e>
		}
	}
	return 0;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40011400 	.word	0x40011400
 80017a4:	40010c00 	.word	0x40010c00

080017a8 <set_date>:

//set the date right
void set_date(){
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0

}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr

080017b4 <store_time>:

//store the time to flash
void store_time(){
 80017b4:	b5b0      	push	{r4, r5, r7, lr}
 80017b6:	b096      	sub	sp, #88	; 0x58
 80017b8:	af00      	add	r7, sp, #0
	uint32_t Robot_Num_Flash_Add = 0x08010000;
 80017ba:	4b31      	ldr	r3, [pc, #196]	; (8001880 <store_time+0xcc>)
 80017bc:	653b      	str	r3, [r7, #80]	; 0x50

	FLASH_EraseInitTypeDef My_Flash;  //声明 FLASH_EraseInitTypeDef 结构体为 My_Flash
	HAL_FLASH_Unlock();               //解锁Flash
 80017be:	f000 ff35 	bl	800262c <HAL_FLASH_Unlock>

	My_Flash.TypeErase = FLASH_TYPEERASE_PAGES;  //标明Flash执行页面只做擦除操作
 80017c2:	2300      	movs	r3, #0
 80017c4:	643b      	str	r3, [r7, #64]	; 0x40
	My_Flash.PageAddress = Robot_Num_Flash_Add;  //声明要擦除的地址
 80017c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017c8:	64bb      	str	r3, [r7, #72]	; 0x48
	My_Flash.NbPages = 1;                        //说明要擦除的页数，此参数必须是Min_Data = 1和Max_Data =(最大页数-初始页的值)之间的值
 80017ca:	2301      	movs	r3, #1
 80017cc:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t PageError = 0;                    //设置PageError,如果出现错误这个变量会被设置为出错的FLASH地址
 80017ce:	2300      	movs	r3, #0
 80017d0:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_FLASHEx_Erase(&My_Flash, &PageError);  //调用擦除函数擦除
 80017d2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80017d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017da:	4611      	mov	r1, r2
 80017dc:	4618      	mov	r0, r3
 80017de:	f001 f80d 	bl	80027fc <HAL_FLASHEx_Erase>

	int Write_Flash_Data[15] = {second, minute, hour, year, month, date, alarm1[0], alarm1[1], alarm1[2], alarm2[0], alarm2[1], alarm2[2], alarm3[0], alarm3[1], alarm3[2]};
 80017e2:	4b28      	ldr	r3, [pc, #160]	; (8001884 <store_time+0xd0>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	4b27      	ldr	r3, [pc, #156]	; (8001888 <store_time+0xd4>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	4b27      	ldr	r3, [pc, #156]	; (800188c <store_time+0xd8>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	4b26      	ldr	r3, [pc, #152]	; (8001890 <store_time+0xdc>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	4b26      	ldr	r3, [pc, #152]	; (8001894 <store_time+0xe0>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	4b25      	ldr	r3, [pc, #148]	; (8001898 <store_time+0xe4>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	617b      	str	r3, [r7, #20]
 8001806:	4b25      	ldr	r3, [pc, #148]	; (800189c <store_time+0xe8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	61bb      	str	r3, [r7, #24]
 800180c:	4b23      	ldr	r3, [pc, #140]	; (800189c <store_time+0xe8>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	61fb      	str	r3, [r7, #28]
 8001812:	4b22      	ldr	r3, [pc, #136]	; (800189c <store_time+0xe8>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	623b      	str	r3, [r7, #32]
 8001818:	4b21      	ldr	r3, [pc, #132]	; (80018a0 <store_time+0xec>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
 800181e:	4b20      	ldr	r3, [pc, #128]	; (80018a0 <store_time+0xec>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	62bb      	str	r3, [r7, #40]	; 0x28
 8001824:	4b1e      	ldr	r3, [pc, #120]	; (80018a0 <store_time+0xec>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	62fb      	str	r3, [r7, #44]	; 0x2c
 800182a:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <store_time+0xf0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	633b      	str	r3, [r7, #48]	; 0x30
 8001830:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <store_time+0xf0>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	637b      	str	r3, [r7, #52]	; 0x34
 8001836:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <store_time+0xf0>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	63bb      	str	r3, [r7, #56]	; 0x38

		//对Flash进行烧写，FLASH_TYPEPROGRAM_HALFWORD 声明操作的Flash地址的16位的，此外还有32位跟64位的操作，自行翻查HAL库的定义即可
	for(uint32_t i = 0; i < 15; i++){
 800183c:	2300      	movs	r3, #0
 800183e:	657b      	str	r3, [r7, #84]	; 0x54
 8001840:	e014      	b.n	800186c <store_time+0xb8>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Robot_Num_Flash_Add + i*32, Write_Flash_Data[i]);
 8001842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001844:	015a      	lsls	r2, r3, #5
 8001846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001848:	18d1      	adds	r1, r2, r3
 800184a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	3358      	adds	r3, #88	; 0x58
 8001850:	443b      	add	r3, r7
 8001852:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8001856:	17da      	asrs	r2, r3, #31
 8001858:	461c      	mov	r4, r3
 800185a:	4615      	mov	r5, r2
 800185c:	4622      	mov	r2, r4
 800185e:	462b      	mov	r3, r5
 8001860:	2002      	movs	r0, #2
 8001862:	f000 fe73 	bl	800254c <HAL_FLASH_Program>
	for(uint32_t i = 0; i < 15; i++){
 8001866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001868:	3301      	adds	r3, #1
 800186a:	657b      	str	r3, [r7, #84]	; 0x54
 800186c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800186e:	2b0e      	cmp	r3, #14
 8001870:	d9e7      	bls.n	8001842 <store_time+0x8e>
	}

	HAL_FLASH_Lock();
 8001872:	f000 ff01 	bl	8002678 <HAL_FLASH_Lock>
}
 8001876:	bf00      	nop
 8001878:	3758      	adds	r7, #88	; 0x58
 800187a:	46bd      	mov	sp, r7
 800187c:	bdb0      	pop	{r4, r5, r7, pc}
 800187e:	bf00      	nop
 8001880:	08010000 	.word	0x08010000
 8001884:	2000018c 	.word	0x2000018c
 8001888:	20000190 	.word	0x20000190
 800188c:	20000194 	.word	0x20000194
 8001890:	20000000 	.word	0x20000000
 8001894:	20000004 	.word	0x20000004
 8001898:	20000008 	.word	0x20000008
 800189c:	20000198 	.word	0x20000198
 80018a0:	200001a4 	.word	0x200001a4
 80018a4:	200001b0 	.word	0x200001b0

080018a8 <read_time>:

//read the time from flash
void read_time(){
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
	uint32_t Robot_Num_Flash_Add = 0x08010000;
 80018ae:	4b33      	ldr	r3, [pc, #204]	; (800197c <read_time+0xd4>)
 80018b0:	607b      	str	r3, [r7, #4]
	second = (int)*(__IO uint32_t*)( Robot_Num_Flash_Add ); //*(__IO uint16_t *)是读取该地址的参数值,其值为16位数据,一次读取两个字节，*(__IO uint32_t *)就一次读4个字节
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	461a      	mov	r2, r3
 80018b8:	4b31      	ldr	r3, [pc, #196]	; (8001980 <read_time+0xd8>)
 80018ba:	601a      	str	r2, [r3, #0]
	minute = (int)*(__IO uint32_t*)( Robot_Num_Flash_Add + 32);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3320      	adds	r3, #32
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	461a      	mov	r2, r3
 80018c4:	4b2f      	ldr	r3, [pc, #188]	; (8001984 <read_time+0xdc>)
 80018c6:	601a      	str	r2, [r3, #0]
	hour =   (int)*(__IO uint32_t*)( Robot_Num_Flash_Add + 32*2);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3340      	adds	r3, #64	; 0x40
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	461a      	mov	r2, r3
 80018d0:	4b2d      	ldr	r3, [pc, #180]	; (8001988 <read_time+0xe0>)
 80018d2:	601a      	str	r2, [r3, #0]
	year =   (int)*(__IO uint32_t*)( Robot_Num_Flash_Add + 32*3);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3360      	adds	r3, #96	; 0x60
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	461a      	mov	r2, r3
 80018dc:	4b2b      	ldr	r3, [pc, #172]	; (800198c <read_time+0xe4>)
 80018de:	601a      	str	r2, [r3, #0]
	month =  (int)*(__IO uint32_t*)( Robot_Num_Flash_Add + 32*4);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3380      	adds	r3, #128	; 0x80
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	461a      	mov	r2, r3
 80018e8:	4b29      	ldr	r3, [pc, #164]	; (8001990 <read_time+0xe8>)
 80018ea:	601a      	str	r2, [r3, #0]
	date =   (int)*(__IO uint32_t*)( Robot_Num_Flash_Add + 32*5);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	33a0      	adds	r3, #160	; 0xa0
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	461a      	mov	r2, r3
 80018f4:	4b27      	ldr	r3, [pc, #156]	; (8001994 <read_time+0xec>)
 80018f6:	601a      	str	r2, [r3, #0]
	alarm1[0] = (int)*(__IO uint32_t*)( Robot_Num_Flash_Add + 32*6);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	33c0      	adds	r3, #192	; 0xc0
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	461a      	mov	r2, r3
 8001900:	4b25      	ldr	r3, [pc, #148]	; (8001998 <read_time+0xf0>)
 8001902:	601a      	str	r2, [r3, #0]
	alarm1[1] = (int)*(__IO uint32_t*)( Robot_Num_Flash_Add + 32*7);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	33e0      	adds	r3, #224	; 0xe0
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	4b22      	ldr	r3, [pc, #136]	; (8001998 <read_time+0xf0>)
 800190e:	605a      	str	r2, [r3, #4]
	alarm1[2] = (int)*(__IO uint32_t*)( Robot_Num_Flash_Add + 32*8);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	4b1f      	ldr	r3, [pc, #124]	; (8001998 <read_time+0xf0>)
 800191c:	609a      	str	r2, [r3, #8]
	alarm2[0] = (int)*(__IO uint32_t*)( Robot_Num_Flash_Add + 32*9);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	4b1c      	ldr	r3, [pc, #112]	; (800199c <read_time+0xf4>)
 800192a:	601a      	str	r2, [r3, #0]
	alarm2[1] = (int)*(__IO uint32_t*)( Robot_Num_Flash_Add + 32*10);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	461a      	mov	r2, r3
 8001936:	4b19      	ldr	r3, [pc, #100]	; (800199c <read_time+0xf4>)
 8001938:	605a      	str	r2, [r3, #4]
	alarm2[2] = (int)*(__IO uint32_t*)( Robot_Num_Flash_Add + 32*11);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	4b15      	ldr	r3, [pc, #84]	; (800199c <read_time+0xf4>)
 8001946:	609a      	str	r2, [r3, #8]
	alarm3[0] = (int)*(__IO uint32_t*)( Robot_Num_Flash_Add + 32*12);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <read_time+0xf8>)
 8001954:	601a      	str	r2, [r3, #0]
	alarm3[1] = (int)*(__IO uint32_t*)( Robot_Num_Flash_Add + 32*13);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	461a      	mov	r2, r3
 8001960:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <read_time+0xf8>)
 8001962:	605a      	str	r2, [r3, #4]
	alarm3[2] = (int)*(__IO uint32_t*)( Robot_Num_Flash_Add + 32*14);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	461a      	mov	r2, r3
 800196e:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <read_time+0xf8>)
 8001970:	609a      	str	r2, [r3, #8]
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	08010000 	.word	0x08010000
 8001980:	2000018c 	.word	0x2000018c
 8001984:	20000190 	.word	0x20000190
 8001988:	20000194 	.word	0x20000194
 800198c:	20000000 	.word	0x20000000
 8001990:	20000004 	.word	0x20000004
 8001994:	20000008 	.word	0x20000008
 8001998:	20000198 	.word	0x20000198
 800199c:	200001a4 	.word	0x200001a4
 80019a0:	200001b0 	.word	0x200001b0

080019a4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]

    if(htim == (&htim2)){
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a42      	ldr	r2, [pc, #264]	; (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d10a      	bne.n	80019ca <HAL_TIM_PeriodElapsedCallback+0x26>
    	if(twinkle == 0){
 80019b4:	4b41      	ldr	r3, [pc, #260]	; (8001abc <HAL_TIM_PeriodElapsedCallback+0x118>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d103      	bne.n	80019c4 <HAL_TIM_PeriodElapsedCallback+0x20>
    		twinkle = 1;
 80019bc:	4b3f      	ldr	r3, [pc, #252]	; (8001abc <HAL_TIM_PeriodElapsedCallback+0x118>)
 80019be:	2201      	movs	r2, #1
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	e002      	b.n	80019ca <HAL_TIM_PeriodElapsedCallback+0x26>
    	}
    	else twinkle = 0;
 80019c4:	4b3d      	ldr	r3, [pc, #244]	; (8001abc <HAL_TIM_PeriodElapsedCallback+0x118>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
    }

    if (htim == (&htim1))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a3c      	ldr	r2, [pc, #240]	; (8001ac0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d16e      	bne.n	8001ab0 <HAL_TIM_PeriodElapsedCallback+0x10c>
    {
    	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 80019d2:	2110      	movs	r1, #16
 80019d4:	483b      	ldr	r0, [pc, #236]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80019d6:	f001 f96c 	bl	8002cb2 <HAL_GPIO_TogglePin>
    	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);
 80019da:	2120      	movs	r1, #32
 80019dc:	4839      	ldr	r0, [pc, #228]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80019de:	f001 f968 	bl	8002cb2 <HAL_GPIO_TogglePin>
    	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_0);
 80019e2:	2101      	movs	r1, #1
 80019e4:	4838      	ldr	r0, [pc, #224]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80019e6:	f001 f964 	bl	8002cb2 <HAL_GPIO_TogglePin>
    	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_1);
 80019ea:	2102      	movs	r1, #2
 80019ec:	4836      	ldr	r0, [pc, #216]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80019ee:	f001 f960 	bl	8002cb2 <HAL_GPIO_TogglePin>
    	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_0);
 80019f2:	2101      	movs	r1, #1
 80019f4:	4835      	ldr	r0, [pc, #212]	; (8001acc <HAL_TIM_PeriodElapsedCallback+0x128>)
 80019f6:	f001 f95c 	bl	8002cb2 <HAL_GPIO_TogglePin>
    	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 80019fa:	2102      	movs	r1, #2
 80019fc:	4833      	ldr	r0, [pc, #204]	; (8001acc <HAL_TIM_PeriodElapsedCallback+0x128>)
 80019fe:	f001 f958 	bl	8002cb2 <HAL_GPIO_TogglePin>
    	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8001a02:	2101      	movs	r1, #1
 8001a04:	4832      	ldr	r0, [pc, #200]	; (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001a06:	f001 f954 	bl	8002cb2 <HAL_GPIO_TogglePin>
    	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8001a0a:	2108      	movs	r1, #8
 8001a0c:	4830      	ldr	r0, [pc, #192]	; (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001a0e:	f001 f950 	bl	8002cb2 <HAL_GPIO_TogglePin>
    	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8001a12:	2140      	movs	r1, #64	; 0x40
 8001a14:	482b      	ldr	r0, [pc, #172]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001a16:	f001 f94c 	bl	8002cb2 <HAL_GPIO_TogglePin>
    	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8001a1a:	2180      	movs	r1, #128	; 0x80
 8001a1c:	4829      	ldr	r0, [pc, #164]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001a1e:	f001 f948 	bl	8002cb2 <HAL_GPIO_TogglePin>
    	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_14);
 8001a22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a26:	4829      	ldr	r0, [pc, #164]	; (8001acc <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001a28:	f001 f943 	bl	8002cb2 <HAL_GPIO_TogglePin>
    	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_15);
 8001a2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a30:	4826      	ldr	r0, [pc, #152]	; (8001acc <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001a32:	f001 f93e 	bl	8002cb2 <HAL_GPIO_TogglePin>

    		second++;
 8001a36:	4b27      	ldr	r3, [pc, #156]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	4a25      	ldr	r2, [pc, #148]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001a3e:	6013      	str	r3, [r2, #0]
    		if(second >= 60){
 8001a40:	4b24      	ldr	r3, [pc, #144]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2b3b      	cmp	r3, #59	; 0x3b
 8001a46:	dd07      	ble.n	8001a58 <HAL_TIM_PeriodElapsedCallback+0xb4>
    			second = 0;
 8001a48:	4b22      	ldr	r3, [pc, #136]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
    			minute++;
 8001a4e:	4b22      	ldr	r3, [pc, #136]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	3301      	adds	r3, #1
 8001a54:	4a20      	ldr	r2, [pc, #128]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001a56:	6013      	str	r3, [r2, #0]
    		}
    		if(minute>=60){
 8001a58:	4b1f      	ldr	r3, [pc, #124]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b3b      	cmp	r3, #59	; 0x3b
 8001a5e:	dd07      	ble.n	8001a70 <HAL_TIM_PeriodElapsedCallback+0xcc>
    			minute = 0;
 8001a60:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
    			hour++;
 8001a66:	4b1d      	ldr	r3, [pc, #116]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	4a1b      	ldr	r2, [pc, #108]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001a6e:	6013      	str	r3, [r2, #0]
    		}
    		if(hour >= 24){
 8001a70:	4b1a      	ldr	r3, [pc, #104]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b17      	cmp	r3, #23
 8001a76:	dd09      	ble.n	8001a8c <HAL_TIM_PeriodElapsedCallback+0xe8>
    			hour=0;
 8001a78:	4b18      	ldr	r3, [pc, #96]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
    			date++;
 8001a7e:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	3301      	adds	r3, #1
 8001a84:	4a16      	ldr	r2, [pc, #88]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001a86:	6013      	str	r3, [r2, #0]
    			set_date();
 8001a88:	f7ff fe8e 	bl	80017a8 <set_date>
    		}
    		if(second % 10 == 0){
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001a8e:	6819      	ldr	r1, [r3, #0]
 8001a90:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001a92:	fb83 2301 	smull	r2, r3, r3, r1
 8001a96:	109a      	asrs	r2, r3, #2
 8001a98:	17cb      	asrs	r3, r1, #31
 8001a9a:	1ad2      	subs	r2, r2, r3
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	1aca      	subs	r2, r1, r3
 8001aa6:	2a00      	cmp	r2, #0
 8001aa8:	d102      	bne.n	8001ab0 <HAL_TIM_PeriodElapsedCallback+0x10c>
    			store_time();
 8001aaa:	f7ff fe83 	bl	80017b4 <store_time>
    		}
    }
    return;
 8001aae:	bf00      	nop
 8001ab0:	bf00      	nop
}
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000140 	.word	0x20000140
 8001abc:	200001e4 	.word	0x200001e4
 8001ac0:	200000f8 	.word	0x200000f8
 8001ac4:	40011000 	.word	0x40011000
 8001ac8:	40011400 	.word	0x40011400
 8001acc:	40011800 	.word	0x40011800
 8001ad0:	40010800 	.word	0x40010800
 8001ad4:	2000018c 	.word	0x2000018c
 8001ad8:	20000190 	.word	0x20000190
 8001adc:	20000194 	.word	0x20000194
 8001ae0:	20000008 	.word	0x20000008
 8001ae4:	66666667 	.word	0x66666667

08001ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aec:	b672      	cpsid	i
}
 8001aee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001af0:	e7fe      	b.n	8001af0 <Error_Handler+0x8>

08001af2 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001af6:	bf00      	nop
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr
	...

08001b00 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af04      	add	r7, sp, #16
 8001b06:	4603      	mov	r3, r0
 8001b08:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0e:	9302      	str	r3, [sp, #8]
 8001b10:	2301      	movs	r3, #1
 8001b12:	9301      	str	r3, [sp, #4]
 8001b14:	1dfb      	adds	r3, r7, #7
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	2301      	movs	r3, #1
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2178      	movs	r1, #120	; 0x78
 8001b1e:	4803      	ldr	r0, [pc, #12]	; (8001b2c <ssd1306_WriteCommand+0x2c>)
 8001b20:	f001 fa24 	bl	8002f6c <HAL_I2C_Mem_Write>
}
 8001b24:	bf00      	nop
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	200000a4 	.word	0x200000a4

08001b30 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af04      	add	r7, sp, #16
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8001b42:	9202      	str	r2, [sp, #8]
 8001b44:	9301      	str	r3, [sp, #4]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	2240      	movs	r2, #64	; 0x40
 8001b4e:	2178      	movs	r1, #120	; 0x78
 8001b50:	4803      	ldr	r0, [pc, #12]	; (8001b60 <ssd1306_WriteData+0x30>)
 8001b52:	f001 fa0b 	bl	8002f6c <HAL_I2C_Mem_Write>
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	200000a4 	.word	0x200000a4

08001b64 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001b68:	f7ff ffc3 	bl	8001af2 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001b6c:	2064      	movs	r0, #100	; 0x64
 8001b6e:	f000 fbbb 	bl	80022e8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001b72:	2000      	movs	r0, #0
 8001b74:	f000 f9d6 	bl	8001f24 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001b78:	2020      	movs	r0, #32
 8001b7a:	f7ff ffc1 	bl	8001b00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001b7e:	2000      	movs	r0, #0
 8001b80:	f7ff ffbe 	bl	8001b00 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001b84:	20b0      	movs	r0, #176	; 0xb0
 8001b86:	f7ff ffbb 	bl	8001b00 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001b8a:	20c8      	movs	r0, #200	; 0xc8
 8001b8c:	f7ff ffb8 	bl	8001b00 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001b90:	2000      	movs	r0, #0
 8001b92:	f7ff ffb5 	bl	8001b00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001b96:	2010      	movs	r0, #16
 8001b98:	f7ff ffb2 	bl	8001b00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001b9c:	2040      	movs	r0, #64	; 0x40
 8001b9e:	f7ff ffaf 	bl	8001b00 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001ba2:	20ff      	movs	r0, #255	; 0xff
 8001ba4:	f000 f9aa 	bl	8001efc <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001ba8:	20a1      	movs	r0, #161	; 0xa1
 8001baa:	f7ff ffa9 	bl	8001b00 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001bae:	20a6      	movs	r0, #166	; 0xa6
 8001bb0:	f7ff ffa6 	bl	8001b00 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001bb4:	20a8      	movs	r0, #168	; 0xa8
 8001bb6:	f7ff ffa3 	bl	8001b00 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001bba:	203f      	movs	r0, #63	; 0x3f
 8001bbc:	f7ff ffa0 	bl	8001b00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001bc0:	20a4      	movs	r0, #164	; 0xa4
 8001bc2:	f7ff ff9d 	bl	8001b00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001bc6:	20d3      	movs	r0, #211	; 0xd3
 8001bc8:	f7ff ff9a 	bl	8001b00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001bcc:	2000      	movs	r0, #0
 8001bce:	f7ff ff97 	bl	8001b00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001bd2:	20d5      	movs	r0, #213	; 0xd5
 8001bd4:	f7ff ff94 	bl	8001b00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001bd8:	20f0      	movs	r0, #240	; 0xf0
 8001bda:	f7ff ff91 	bl	8001b00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001bde:	20d9      	movs	r0, #217	; 0xd9
 8001be0:	f7ff ff8e 	bl	8001b00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001be4:	2022      	movs	r0, #34	; 0x22
 8001be6:	f7ff ff8b 	bl	8001b00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001bea:	20da      	movs	r0, #218	; 0xda
 8001bec:	f7ff ff88 	bl	8001b00 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001bf0:	2012      	movs	r0, #18
 8001bf2:	f7ff ff85 	bl	8001b00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001bf6:	20db      	movs	r0, #219	; 0xdb
 8001bf8:	f7ff ff82 	bl	8001b00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001bfc:	2020      	movs	r0, #32
 8001bfe:	f7ff ff7f 	bl	8001b00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001c02:	208d      	movs	r0, #141	; 0x8d
 8001c04:	f7ff ff7c 	bl	8001b00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001c08:	2014      	movs	r0, #20
 8001c0a:	f7ff ff79 	bl	8001b00 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001c0e:	2001      	movs	r0, #1
 8001c10:	f000 f988 	bl	8001f24 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001c14:	2000      	movs	r0, #0
 8001c16:	f000 f80f 	bl	8001c38 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001c1a:	f000 f82f 	bl	8001c7c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001c1e:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <ssd1306_Init+0xd0>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001c24:	4b03      	ldr	r3, [pc, #12]	; (8001c34 <ssd1306_Init+0xd0>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001c2a:	4b02      	ldr	r3, [pc, #8]	; (8001c34 <ssd1306_Init+0xd0>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	711a      	strb	r2, [r3, #4]
}
 8001c30:	bf00      	nop
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	200005f8 	.word	0x200005f8

08001c38 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	e00d      	b.n	8001c64 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <ssd1306_Fill+0x1a>
 8001c4e:	2100      	movs	r1, #0
 8001c50:	e000      	b.n	8001c54 <ssd1306_Fill+0x1c>
 8001c52:	21ff      	movs	r1, #255	; 0xff
 8001c54:	4a08      	ldr	r2, [pc, #32]	; (8001c78 <ssd1306_Fill+0x40>)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	4413      	add	r3, r2
 8001c5a:	460a      	mov	r2, r1
 8001c5c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	3301      	adds	r3, #1
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c6a:	d3ed      	bcc.n	8001c48 <ssd1306_Fill+0x10>
    }
}
 8001c6c:	bf00      	nop
 8001c6e:	bf00      	nop
 8001c70:	3714      	adds	r7, #20
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr
 8001c78:	200001f8 	.word	0x200001f8

08001c7c <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001c82:	2300      	movs	r3, #0
 8001c84:	71fb      	strb	r3, [r7, #7]
 8001c86:	e016      	b.n	8001cb6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	3b50      	subs	r3, #80	; 0x50
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff ff36 	bl	8001b00 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001c94:	2000      	movs	r0, #0
 8001c96:	f7ff ff33 	bl	8001b00 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8001c9a:	2010      	movs	r0, #16
 8001c9c:	f7ff ff30 	bl	8001b00 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	01db      	lsls	r3, r3, #7
 8001ca4:	4a08      	ldr	r2, [pc, #32]	; (8001cc8 <ssd1306_UpdateScreen+0x4c>)
 8001ca6:	4413      	add	r3, r2
 8001ca8:	2180      	movs	r1, #128	; 0x80
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff ff40 	bl	8001b30 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	71fb      	strb	r3, [r7, #7]
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	2b07      	cmp	r3, #7
 8001cba:	d9e5      	bls.n	8001c88 <ssd1306_UpdateScreen+0xc>
    }
}
 8001cbc:	bf00      	nop
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200001f8 	.word	0x200001f8

08001ccc <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	71bb      	strb	r3, [r7, #6]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	db3d      	blt.n	8001d62 <ssd1306_DrawPixel+0x96>
 8001ce6:	79bb      	ldrb	r3, [r7, #6]
 8001ce8:	2b3f      	cmp	r3, #63	; 0x3f
 8001cea:	d83a      	bhi.n	8001d62 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001cec:	797b      	ldrb	r3, [r7, #5]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d11a      	bne.n	8001d28 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001cf2:	79fa      	ldrb	r2, [r7, #7]
 8001cf4:	79bb      	ldrb	r3, [r7, #6]
 8001cf6:	08db      	lsrs	r3, r3, #3
 8001cf8:	b2d8      	uxtb	r0, r3
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	01db      	lsls	r3, r3, #7
 8001cfe:	4413      	add	r3, r2
 8001d00:	4a1a      	ldr	r2, [pc, #104]	; (8001d6c <ssd1306_DrawPixel+0xa0>)
 8001d02:	5cd3      	ldrb	r3, [r2, r3]
 8001d04:	b25a      	sxtb	r2, r3
 8001d06:	79bb      	ldrb	r3, [r7, #6]
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d12:	b25b      	sxtb	r3, r3
 8001d14:	4313      	orrs	r3, r2
 8001d16:	b259      	sxtb	r1, r3
 8001d18:	79fa      	ldrb	r2, [r7, #7]
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	01db      	lsls	r3, r3, #7
 8001d1e:	4413      	add	r3, r2
 8001d20:	b2c9      	uxtb	r1, r1
 8001d22:	4a12      	ldr	r2, [pc, #72]	; (8001d6c <ssd1306_DrawPixel+0xa0>)
 8001d24:	54d1      	strb	r1, [r2, r3]
 8001d26:	e01d      	b.n	8001d64 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001d28:	79fa      	ldrb	r2, [r7, #7]
 8001d2a:	79bb      	ldrb	r3, [r7, #6]
 8001d2c:	08db      	lsrs	r3, r3, #3
 8001d2e:	b2d8      	uxtb	r0, r3
 8001d30:	4603      	mov	r3, r0
 8001d32:	01db      	lsls	r3, r3, #7
 8001d34:	4413      	add	r3, r2
 8001d36:	4a0d      	ldr	r2, [pc, #52]	; (8001d6c <ssd1306_DrawPixel+0xa0>)
 8001d38:	5cd3      	ldrb	r3, [r2, r3]
 8001d3a:	b25a      	sxtb	r2, r3
 8001d3c:	79bb      	ldrb	r3, [r7, #6]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	2101      	movs	r1, #1
 8001d44:	fa01 f303 	lsl.w	r3, r1, r3
 8001d48:	b25b      	sxtb	r3, r3
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	b25b      	sxtb	r3, r3
 8001d4e:	4013      	ands	r3, r2
 8001d50:	b259      	sxtb	r1, r3
 8001d52:	79fa      	ldrb	r2, [r7, #7]
 8001d54:	4603      	mov	r3, r0
 8001d56:	01db      	lsls	r3, r3, #7
 8001d58:	4413      	add	r3, r2
 8001d5a:	b2c9      	uxtb	r1, r1
 8001d5c:	4a03      	ldr	r2, [pc, #12]	; (8001d6c <ssd1306_DrawPixel+0xa0>)
 8001d5e:	54d1      	strb	r1, [r2, r3]
 8001d60:	e000      	b.n	8001d64 <ssd1306_DrawPixel+0x98>
        return;
 8001d62:	bf00      	nop
    }
}
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr
 8001d6c:	200001f8 	.word	0x200001f8

08001d70 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001d70:	b590      	push	{r4, r7, lr}
 8001d72:	b089      	sub	sp, #36	; 0x24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4604      	mov	r4, r0
 8001d78:	1d38      	adds	r0, r7, #4
 8001d7a:	e880 0006 	stmia.w	r0, {r1, r2}
 8001d7e:	461a      	mov	r2, r3
 8001d80:	4623      	mov	r3, r4
 8001d82:	73fb      	strb	r3, [r7, #15]
 8001d84:	4613      	mov	r3, r2
 8001d86:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
 8001d8a:	2b1f      	cmp	r3, #31
 8001d8c:	d902      	bls.n	8001d94 <ssd1306_WriteChar+0x24>
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
 8001d90:	2b7e      	cmp	r3, #126	; 0x7e
 8001d92:	d901      	bls.n	8001d98 <ssd1306_WriteChar+0x28>
        return 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	e06d      	b.n	8001e74 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001d98:	4b38      	ldr	r3, [pc, #224]	; (8001e7c <ssd1306_WriteChar+0x10c>)
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	793b      	ldrb	r3, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	2b80      	cmp	r3, #128	; 0x80
 8001da4:	dc06      	bgt.n	8001db4 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001da6:	4b35      	ldr	r3, [pc, #212]	; (8001e7c <ssd1306_WriteChar+0x10c>)
 8001da8:	885b      	ldrh	r3, [r3, #2]
 8001daa:	461a      	mov	r2, r3
 8001dac:	797b      	ldrb	r3, [r7, #5]
 8001dae:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001db0:	2b40      	cmp	r3, #64	; 0x40
 8001db2:	dd01      	ble.n	8001db8 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	e05d      	b.n	8001e74 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001db8:	2300      	movs	r3, #0
 8001dba:	61fb      	str	r3, [r7, #28]
 8001dbc:	e04c      	b.n	8001e58 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
 8001dc2:	3b20      	subs	r3, #32
 8001dc4:	7979      	ldrb	r1, [r7, #5]
 8001dc6:	fb01 f303 	mul.w	r3, r1, r3
 8001dca:	4619      	mov	r1, r3
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	440b      	add	r3, r1
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	4413      	add	r3, r2
 8001dd4:	881b      	ldrh	r3, [r3, #0]
 8001dd6:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61bb      	str	r3, [r7, #24]
 8001ddc:	e034      	b.n	8001e48 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d012      	beq.n	8001e14 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001dee:	4b23      	ldr	r3, [pc, #140]	; (8001e7c <ssd1306_WriteChar+0x10c>)
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	4413      	add	r3, r2
 8001dfa:	b2d8      	uxtb	r0, r3
 8001dfc:	4b1f      	ldr	r3, [pc, #124]	; (8001e7c <ssd1306_WriteChar+0x10c>)
 8001dfe:	885b      	ldrh	r3, [r3, #2]
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	4413      	add	r3, r2
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	7bba      	ldrb	r2, [r7, #14]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f7ff ff5d 	bl	8001ccc <ssd1306_DrawPixel>
 8001e12:	e016      	b.n	8001e42 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001e14:	4b19      	ldr	r3, [pc, #100]	; (8001e7c <ssd1306_WriteChar+0x10c>)
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	4413      	add	r3, r2
 8001e20:	b2d8      	uxtb	r0, r3
 8001e22:	4b16      	ldr	r3, [pc, #88]	; (8001e7c <ssd1306_WriteChar+0x10c>)
 8001e24:	885b      	ldrh	r3, [r3, #2]
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	b2d9      	uxtb	r1, r3
 8001e30:	7bbb      	ldrb	r3, [r7, #14]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	bf0c      	ite	eq
 8001e36:	2301      	moveq	r3, #1
 8001e38:	2300      	movne	r3, #0
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	f7ff ff45 	bl	8001ccc <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	3301      	adds	r3, #1
 8001e46:	61bb      	str	r3, [r7, #24]
 8001e48:	793b      	ldrb	r3, [r7, #4]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d3c5      	bcc.n	8001dde <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	3301      	adds	r3, #1
 8001e56:	61fb      	str	r3, [r7, #28]
 8001e58:	797b      	ldrb	r3, [r7, #5]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d3ad      	bcc.n	8001dbe <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <ssd1306_WriteChar+0x10c>)
 8001e64:	881a      	ldrh	r2, [r3, #0]
 8001e66:	793b      	ldrb	r3, [r7, #4]
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <ssd1306_WriteChar+0x10c>)
 8001e70:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3724      	adds	r7, #36	; 0x24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd90      	pop	{r4, r7, pc}
 8001e7c:	200005f8 	.word	0x200005f8

08001e80 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	1d38      	adds	r0, r7, #4
 8001e8a:	e880 0006 	stmia.w	r0, {r1, r2}
 8001e8e:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001e90:	e012      	b.n	8001eb8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	7818      	ldrb	r0, [r3, #0]
 8001e96:	78fb      	ldrb	r3, [r7, #3]
 8001e98:	1d3a      	adds	r2, r7, #4
 8001e9a:	ca06      	ldmia	r2, {r1, r2}
 8001e9c:	f7ff ff68 	bl	8001d70 <ssd1306_WriteChar>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d002      	beq.n	8001eb2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	e008      	b.n	8001ec4 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1e8      	bne.n	8001e92 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	781b      	ldrb	r3, [r3, #0]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	460a      	mov	r2, r1
 8001ed6:	71fb      	strb	r3, [r7, #7]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <ssd1306_SetCursor+0x2c>)
 8001ee2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001ee4:	79bb      	ldrb	r3, [r7, #6]
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	4b03      	ldr	r3, [pc, #12]	; (8001ef8 <ssd1306_SetCursor+0x2c>)
 8001eea:	805a      	strh	r2, [r3, #2]
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	200005f8 	.word	0x200005f8

08001efc <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001f06:	2381      	movs	r3, #129	; 0x81
 8001f08:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff fdf7 	bl	8001b00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff fdf3 	bl	8001b00 <ssd1306_WriteCommand>
}
 8001f1a:	bf00      	nop
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d005      	beq.n	8001f40 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001f34:	23af      	movs	r3, #175	; 0xaf
 8001f36:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001f38:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <ssd1306_SetDisplayOn+0x38>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	715a      	strb	r2, [r3, #5]
 8001f3e:	e004      	b.n	8001f4a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001f40:	23ae      	movs	r3, #174	; 0xae
 8001f42:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001f44:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <ssd1306_SetDisplayOn+0x38>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff fdd7 	bl	8001b00 <ssd1306_WriteCommand>
}
 8001f52:	bf00      	nop
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200005f8 	.word	0x200005f8

08001f60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f66:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <HAL_MspInit+0x5c>)
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	4a14      	ldr	r2, [pc, #80]	; (8001fbc <HAL_MspInit+0x5c>)
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	6193      	str	r3, [r2, #24]
 8001f72:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <HAL_MspInit+0x5c>)
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	60bb      	str	r3, [r7, #8]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f7e:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <HAL_MspInit+0x5c>)
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	4a0e      	ldr	r2, [pc, #56]	; (8001fbc <HAL_MspInit+0x5c>)
 8001f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f88:	61d3      	str	r3, [r2, #28]
 8001f8a:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <HAL_MspInit+0x5c>)
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f92:	607b      	str	r3, [r7, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f96:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <HAL_MspInit+0x60>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	4a04      	ldr	r2, [pc, #16]	; (8001fc0 <HAL_MspInit+0x60>)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40010000 	.word	0x40010000

08001fc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b088      	sub	sp, #32
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fcc:	f107 0310 	add.w	r3, r7, #16
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a16      	ldr	r2, [pc, #88]	; (8002038 <HAL_I2C_MspInit+0x74>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d124      	bne.n	800202e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe4:	4b15      	ldr	r3, [pc, #84]	; (800203c <HAL_I2C_MspInit+0x78>)
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	4a14      	ldr	r2, [pc, #80]	; (800203c <HAL_I2C_MspInit+0x78>)
 8001fea:	f043 0308 	orr.w	r3, r3, #8
 8001fee:	6193      	str	r3, [r2, #24]
 8001ff0:	4b12      	ldr	r3, [pc, #72]	; (800203c <HAL_I2C_MspInit+0x78>)
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	f003 0308 	and.w	r3, r3, #8
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ffc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002000:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002002:	2312      	movs	r3, #18
 8002004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002006:	2303      	movs	r3, #3
 8002008:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800200a:	f107 0310 	add.w	r3, r7, #16
 800200e:	4619      	mov	r1, r3
 8002010:	480b      	ldr	r0, [pc, #44]	; (8002040 <HAL_I2C_MspInit+0x7c>)
 8002012:	f000 fc9b 	bl	800294c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002016:	4b09      	ldr	r3, [pc, #36]	; (800203c <HAL_I2C_MspInit+0x78>)
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	4a08      	ldr	r2, [pc, #32]	; (800203c <HAL_I2C_MspInit+0x78>)
 800201c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002020:	61d3      	str	r3, [r2, #28]
 8002022:	4b06      	ldr	r3, [pc, #24]	; (800203c <HAL_I2C_MspInit+0x78>)
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800202e:	bf00      	nop
 8002030:	3720      	adds	r7, #32
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40005800 	.word	0x40005800
 800203c:	40021000 	.word	0x40021000
 8002040:	40010c00 	.word	0x40010c00

08002044 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a1e      	ldr	r2, [pc, #120]	; (80020cc <HAL_TIM_Base_MspInit+0x88>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d11c      	bne.n	8002090 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002056:	4b1e      	ldr	r3, [pc, #120]	; (80020d0 <HAL_TIM_Base_MspInit+0x8c>)
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	4a1d      	ldr	r2, [pc, #116]	; (80020d0 <HAL_TIM_Base_MspInit+0x8c>)
 800205c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002060:	6193      	str	r3, [r2, #24]
 8002062:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <HAL_TIM_Base_MspInit+0x8c>)
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800206e:	2200      	movs	r2, #0
 8002070:	2100      	movs	r1, #0
 8002072:	2018      	movs	r0, #24
 8002074:	f000 fa33 	bl	80024de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002078:	2018      	movs	r0, #24
 800207a:	f000 fa4c 	bl	8002516 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800207e:	2200      	movs	r2, #0
 8002080:	2100      	movs	r1, #0
 8002082:	2019      	movs	r0, #25
 8002084:	f000 fa2b 	bl	80024de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002088:	2019      	movs	r0, #25
 800208a:	f000 fa44 	bl	8002516 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800208e:	e018      	b.n	80020c2 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002098:	d113      	bne.n	80020c2 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800209a:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <HAL_TIM_Base_MspInit+0x8c>)
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	4a0c      	ldr	r2, [pc, #48]	; (80020d0 <HAL_TIM_Base_MspInit+0x8c>)
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	61d3      	str	r3, [r2, #28]
 80020a6:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <HAL_TIM_Base_MspInit+0x8c>)
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	60bb      	str	r3, [r7, #8]
 80020b0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020b2:	2200      	movs	r2, #0
 80020b4:	2100      	movs	r1, #0
 80020b6:	201c      	movs	r0, #28
 80020b8:	f000 fa11 	bl	80024de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020bc:	201c      	movs	r0, #28
 80020be:	f000 fa2a 	bl	8002516 <HAL_NVIC_EnableIRQ>
}
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40012c00 	.word	0x40012c00
 80020d0:	40021000 	.word	0x40021000

080020d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020d8:	e7fe      	b.n	80020d8 <NMI_Handler+0x4>

080020da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020de:	e7fe      	b.n	80020de <HardFault_Handler+0x4>

080020e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020e4:	e7fe      	b.n	80020e4 <MemManage_Handler+0x4>

080020e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ea:	e7fe      	b.n	80020ea <BusFault_Handler+0x4>

080020ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020f0:	e7fe      	b.n	80020f0 <UsageFault_Handler+0x4>

080020f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020f2:	b480      	push	{r7}
 80020f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr

080020fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020fe:	b480      	push	{r7}
 8002100:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	46bd      	mov	sp, r7
 8002106:	bc80      	pop	{r7}
 8002108:	4770      	bx	lr

0800210a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800210a:	b480      	push	{r7}
 800210c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr

08002116 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800211a:	f000 f8c9 	bl	80022b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002128:	4802      	ldr	r0, [pc, #8]	; (8002134 <TIM1_BRK_IRQHandler+0x10>)
 800212a:	f001 ff35 	bl	8003f98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	200000f8 	.word	0x200000f8

08002138 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800213c:	4802      	ldr	r0, [pc, #8]	; (8002148 <TIM1_UP_IRQHandler+0x10>)
 800213e:	f001 ff2b 	bl	8003f98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	200000f8 	.word	0x200000f8

0800214c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002150:	4802      	ldr	r0, [pc, #8]	; (800215c <TIM2_IRQHandler+0x10>)
 8002152:	f001 ff21 	bl	8003f98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000140 	.word	0x20000140

08002160 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002168:	4a14      	ldr	r2, [pc, #80]	; (80021bc <_sbrk+0x5c>)
 800216a:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <_sbrk+0x60>)
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002174:	4b13      	ldr	r3, [pc, #76]	; (80021c4 <_sbrk+0x64>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d102      	bne.n	8002182 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800217c:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <_sbrk+0x64>)
 800217e:	4a12      	ldr	r2, [pc, #72]	; (80021c8 <_sbrk+0x68>)
 8002180:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002182:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <_sbrk+0x64>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4413      	add	r3, r2
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	429a      	cmp	r2, r3
 800218e:	d207      	bcs.n	80021a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002190:	f002 fc8c 	bl	8004aac <__errno>
 8002194:	4603      	mov	r3, r0
 8002196:	220c      	movs	r2, #12
 8002198:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800219a:	f04f 33ff 	mov.w	r3, #4294967295
 800219e:	e009      	b.n	80021b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021a0:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <_sbrk+0x64>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021a6:	4b07      	ldr	r3, [pc, #28]	; (80021c4 <_sbrk+0x64>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4413      	add	r3, r2
 80021ae:	4a05      	ldr	r2, [pc, #20]	; (80021c4 <_sbrk+0x64>)
 80021b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021b2:	68fb      	ldr	r3, [r7, #12]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20005000 	.word	0x20005000
 80021c0:	00000400 	.word	0x00000400
 80021c4:	20000600 	.word	0x20000600
 80021c8:	20000638 	.word	0x20000638

080021cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr

080021d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021d8:	480c      	ldr	r0, [pc, #48]	; (800220c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021da:	490d      	ldr	r1, [pc, #52]	; (8002210 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021dc:	4a0d      	ldr	r2, [pc, #52]	; (8002214 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021e0:	e002      	b.n	80021e8 <LoopCopyDataInit>

080021e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021e6:	3304      	adds	r3, #4

080021e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021ec:	d3f9      	bcc.n	80021e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ee:	4a0a      	ldr	r2, [pc, #40]	; (8002218 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021f0:	4c0a      	ldr	r4, [pc, #40]	; (800221c <LoopFillZerobss+0x22>)
  movs r3, #0
 80021f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021f4:	e001      	b.n	80021fa <LoopFillZerobss>

080021f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021f8:	3204      	adds	r2, #4

080021fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021fc:	d3fb      	bcc.n	80021f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021fe:	f7ff ffe5 	bl	80021cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002202:	f002 fc59 	bl	8004ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002206:	f7fd ffa1 	bl	800014c <main>
  bx lr
 800220a:	4770      	bx	lr
  ldr r0, =_sdata
 800220c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002210:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002214:	080063dc 	.word	0x080063dc
  ldr r2, =_sbss
 8002218:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800221c:	20000638 	.word	0x20000638

08002220 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002220:	e7fe      	b.n	8002220 <ADC1_2_IRQHandler>
	...

08002224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002228:	4b08      	ldr	r3, [pc, #32]	; (800224c <HAL_Init+0x28>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a07      	ldr	r2, [pc, #28]	; (800224c <HAL_Init+0x28>)
 800222e:	f043 0310 	orr.w	r3, r3, #16
 8002232:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002234:	2003      	movs	r0, #3
 8002236:	f000 f947 	bl	80024c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800223a:	200f      	movs	r0, #15
 800223c:	f000 f808 	bl	8002250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002240:	f7ff fe8e 	bl	8001f60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40022000 	.word	0x40022000

08002250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002258:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <HAL_InitTick+0x54>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <HAL_InitTick+0x58>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	4619      	mov	r1, r3
 8002262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002266:	fbb3 f3f1 	udiv	r3, r3, r1
 800226a:	fbb2 f3f3 	udiv	r3, r2, r3
 800226e:	4618      	mov	r0, r3
 8002270:	f000 f95f 	bl	8002532 <HAL_SYSTICK_Config>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e00e      	b.n	800229c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b0f      	cmp	r3, #15
 8002282:	d80a      	bhi.n	800229a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002284:	2200      	movs	r2, #0
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	f04f 30ff 	mov.w	r0, #4294967295
 800228c:	f000 f927 	bl	80024de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002290:	4a06      	ldr	r2, [pc, #24]	; (80022ac <HAL_InitTick+0x5c>)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002296:	2300      	movs	r3, #0
 8002298:	e000      	b.n	800229c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
}
 800229c:	4618      	mov	r0, r3
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20000014 	.word	0x20000014
 80022a8:	2000001c 	.word	0x2000001c
 80022ac:	20000018 	.word	0x20000018

080022b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022b4:	4b05      	ldr	r3, [pc, #20]	; (80022cc <HAL_IncTick+0x1c>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	461a      	mov	r2, r3
 80022ba:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <HAL_IncTick+0x20>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4413      	add	r3, r2
 80022c0:	4a03      	ldr	r2, [pc, #12]	; (80022d0 <HAL_IncTick+0x20>)
 80022c2:	6013      	str	r3, [r2, #0]
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr
 80022cc:	2000001c 	.word	0x2000001c
 80022d0:	20000604 	.word	0x20000604

080022d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return uwTick;
 80022d8:	4b02      	ldr	r3, [pc, #8]	; (80022e4 <HAL_GetTick+0x10>)
 80022da:	681b      	ldr	r3, [r3, #0]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr
 80022e4:	20000604 	.word	0x20000604

080022e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022f0:	f7ff fff0 	bl	80022d4 <HAL_GetTick>
 80022f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002300:	d005      	beq.n	800230e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002302:	4b0a      	ldr	r3, [pc, #40]	; (800232c <HAL_Delay+0x44>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4413      	add	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800230e:	bf00      	nop
 8002310:	f7ff ffe0 	bl	80022d4 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	429a      	cmp	r2, r3
 800231e:	d8f7      	bhi.n	8002310 <HAL_Delay+0x28>
  {
  }
}
 8002320:	bf00      	nop
 8002322:	bf00      	nop
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	2000001c 	.word	0x2000001c

08002330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002340:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <__NVIC_SetPriorityGrouping+0x44>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800234c:	4013      	ands	r3, r2
 800234e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002358:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800235c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002362:	4a04      	ldr	r2, [pc, #16]	; (8002374 <__NVIC_SetPriorityGrouping+0x44>)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	60d3      	str	r3, [r2, #12]
}
 8002368:	bf00      	nop
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	bc80      	pop	{r7}
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800237c:	4b04      	ldr	r3, [pc, #16]	; (8002390 <__NVIC_GetPriorityGrouping+0x18>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	0a1b      	lsrs	r3, r3, #8
 8002382:	f003 0307 	and.w	r3, r3, #7
}
 8002386:	4618      	mov	r0, r3
 8002388:	46bd      	mov	sp, r7
 800238a:	bc80      	pop	{r7}
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800239e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	db0b      	blt.n	80023be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	f003 021f 	and.w	r2, r3, #31
 80023ac:	4906      	ldr	r1, [pc, #24]	; (80023c8 <__NVIC_EnableIRQ+0x34>)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	095b      	lsrs	r3, r3, #5
 80023b4:	2001      	movs	r0, #1
 80023b6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr
 80023c8:	e000e100 	.word	0xe000e100

080023cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	6039      	str	r1, [r7, #0]
 80023d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	db0a      	blt.n	80023f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	490c      	ldr	r1, [pc, #48]	; (8002418 <__NVIC_SetPriority+0x4c>)
 80023e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ea:	0112      	lsls	r2, r2, #4
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	440b      	add	r3, r1
 80023f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f4:	e00a      	b.n	800240c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	4908      	ldr	r1, [pc, #32]	; (800241c <__NVIC_SetPriority+0x50>)
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	3b04      	subs	r3, #4
 8002404:	0112      	lsls	r2, r2, #4
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	440b      	add	r3, r1
 800240a:	761a      	strb	r2, [r3, #24]
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	bc80      	pop	{r7}
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	e000e100 	.word	0xe000e100
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002420:	b480      	push	{r7}
 8002422:	b089      	sub	sp, #36	; 0x24
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f1c3 0307 	rsb	r3, r3, #7
 800243a:	2b04      	cmp	r3, #4
 800243c:	bf28      	it	cs
 800243e:	2304      	movcs	r3, #4
 8002440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	3304      	adds	r3, #4
 8002446:	2b06      	cmp	r3, #6
 8002448:	d902      	bls.n	8002450 <NVIC_EncodePriority+0x30>
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3b03      	subs	r3, #3
 800244e:	e000      	b.n	8002452 <NVIC_EncodePriority+0x32>
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002454:	f04f 32ff 	mov.w	r2, #4294967295
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43da      	mvns	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	401a      	ands	r2, r3
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002468:	f04f 31ff 	mov.w	r1, #4294967295
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	fa01 f303 	lsl.w	r3, r1, r3
 8002472:	43d9      	mvns	r1, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002478:	4313      	orrs	r3, r2
         );
}
 800247a:	4618      	mov	r0, r3
 800247c:	3724      	adds	r7, #36	; 0x24
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr

08002484 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3b01      	subs	r3, #1
 8002490:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002494:	d301      	bcc.n	800249a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002496:	2301      	movs	r3, #1
 8002498:	e00f      	b.n	80024ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800249a:	4a0a      	ldr	r2, [pc, #40]	; (80024c4 <SysTick_Config+0x40>)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3b01      	subs	r3, #1
 80024a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024a2:	210f      	movs	r1, #15
 80024a4:	f04f 30ff 	mov.w	r0, #4294967295
 80024a8:	f7ff ff90 	bl	80023cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024ac:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <SysTick_Config+0x40>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024b2:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <SysTick_Config+0x40>)
 80024b4:	2207      	movs	r2, #7
 80024b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	e000e010 	.word	0xe000e010

080024c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f7ff ff2d 	bl	8002330 <__NVIC_SetPriorityGrouping>
}
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024de:	b580      	push	{r7, lr}
 80024e0:	b086      	sub	sp, #24
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	4603      	mov	r3, r0
 80024e6:	60b9      	str	r1, [r7, #8]
 80024e8:	607a      	str	r2, [r7, #4]
 80024ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024f0:	f7ff ff42 	bl	8002378 <__NVIC_GetPriorityGrouping>
 80024f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	68b9      	ldr	r1, [r7, #8]
 80024fa:	6978      	ldr	r0, [r7, #20]
 80024fc:	f7ff ff90 	bl	8002420 <NVIC_EncodePriority>
 8002500:	4602      	mov	r2, r0
 8002502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002506:	4611      	mov	r1, r2
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff ff5f 	bl	80023cc <__NVIC_SetPriority>
}
 800250e:	bf00      	nop
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	4603      	mov	r3, r0
 800251e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff ff35 	bl	8002394 <__NVIC_EnableIRQ>
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff ffa2 	bl	8002484 <SysTick_Config>
 8002540:	4603      	mov	r3, r0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800254c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800254e:	b087      	sub	sp, #28
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800255e:	2300      	movs	r3, #0
 8002560:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002566:	4b2f      	ldr	r3, [pc, #188]	; (8002624 <HAL_FLASH_Program+0xd8>)
 8002568:	7e1b      	ldrb	r3, [r3, #24]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_FLASH_Program+0x26>
 800256e:	2302      	movs	r3, #2
 8002570:	e054      	b.n	800261c <HAL_FLASH_Program+0xd0>
 8002572:	4b2c      	ldr	r3, [pc, #176]	; (8002624 <HAL_FLASH_Program+0xd8>)
 8002574:	2201      	movs	r2, #1
 8002576:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002578:	f24c 3050 	movw	r0, #50000	; 0xc350
 800257c:	f000 f8a8 	bl	80026d0 <FLASH_WaitForLastOperation>
 8002580:	4603      	mov	r3, r0
 8002582:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002584:	7dfb      	ldrb	r3, [r7, #23]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d144      	bne.n	8002614 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d102      	bne.n	8002596 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002590:	2301      	movs	r3, #1
 8002592:	757b      	strb	r3, [r7, #21]
 8002594:	e007      	b.n	80025a6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2b02      	cmp	r3, #2
 800259a:	d102      	bne.n	80025a2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800259c:	2302      	movs	r3, #2
 800259e:	757b      	strb	r3, [r7, #21]
 80025a0:	e001      	b.n	80025a6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80025a2:	2304      	movs	r3, #4
 80025a4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80025a6:	2300      	movs	r3, #0
 80025a8:	75bb      	strb	r3, [r7, #22]
 80025aa:	e02d      	b.n	8002608 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80025ac:	7dbb      	ldrb	r3, [r7, #22]
 80025ae:	005a      	lsls	r2, r3, #1
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	eb02 0c03 	add.w	ip, r2, r3
 80025b6:	7dbb      	ldrb	r3, [r7, #22]
 80025b8:	0119      	lsls	r1, r3, #4
 80025ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025be:	f1c1 0620 	rsb	r6, r1, #32
 80025c2:	f1a1 0020 	sub.w	r0, r1, #32
 80025c6:	fa22 f401 	lsr.w	r4, r2, r1
 80025ca:	fa03 f606 	lsl.w	r6, r3, r6
 80025ce:	4334      	orrs	r4, r6
 80025d0:	fa23 f000 	lsr.w	r0, r3, r0
 80025d4:	4304      	orrs	r4, r0
 80025d6:	fa23 f501 	lsr.w	r5, r3, r1
 80025da:	b2a3      	uxth	r3, r4
 80025dc:	4619      	mov	r1, r3
 80025de:	4660      	mov	r0, ip
 80025e0:	f000 f85a 	bl	8002698 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80025e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025e8:	f000 f872 	bl	80026d0 <FLASH_WaitForLastOperation>
 80025ec:	4603      	mov	r3, r0
 80025ee:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80025f0:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <HAL_FLASH_Program+0xdc>)
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	4a0c      	ldr	r2, [pc, #48]	; (8002628 <HAL_FLASH_Program+0xdc>)
 80025f6:	f023 0301 	bic.w	r3, r3, #1
 80025fa:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80025fc:	7dfb      	ldrb	r3, [r7, #23]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d107      	bne.n	8002612 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002602:	7dbb      	ldrb	r3, [r7, #22]
 8002604:	3301      	adds	r3, #1
 8002606:	75bb      	strb	r3, [r7, #22]
 8002608:	7dba      	ldrb	r2, [r7, #22]
 800260a:	7d7b      	ldrb	r3, [r7, #21]
 800260c:	429a      	cmp	r2, r3
 800260e:	d3cd      	bcc.n	80025ac <HAL_FLASH_Program+0x60>
 8002610:	e000      	b.n	8002614 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002612:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002614:	4b03      	ldr	r3, [pc, #12]	; (8002624 <HAL_FLASH_Program+0xd8>)
 8002616:	2200      	movs	r2, #0
 8002618:	761a      	strb	r2, [r3, #24]

  return status;
 800261a:	7dfb      	ldrb	r3, [r7, #23]
}
 800261c:	4618      	mov	r0, r3
 800261e:	371c      	adds	r7, #28
 8002620:	46bd      	mov	sp, r7
 8002622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002624:	20000608 	.word	0x20000608
 8002628:	40022000 	.word	0x40022000

0800262c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002632:	2300      	movs	r3, #0
 8002634:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002636:	4b0d      	ldr	r3, [pc, #52]	; (800266c <HAL_FLASH_Unlock+0x40>)
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00d      	beq.n	800265e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002642:	4b0a      	ldr	r3, [pc, #40]	; (800266c <HAL_FLASH_Unlock+0x40>)
 8002644:	4a0a      	ldr	r2, [pc, #40]	; (8002670 <HAL_FLASH_Unlock+0x44>)
 8002646:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002648:	4b08      	ldr	r3, [pc, #32]	; (800266c <HAL_FLASH_Unlock+0x40>)
 800264a:	4a0a      	ldr	r2, [pc, #40]	; (8002674 <HAL_FLASH_Unlock+0x48>)
 800264c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800264e:	4b07      	ldr	r3, [pc, #28]	; (800266c <HAL_FLASH_Unlock+0x40>)
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800265e:	79fb      	ldrb	r3, [r7, #7]
}
 8002660:	4618      	mov	r0, r3
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	40022000 	.word	0x40022000
 8002670:	45670123 	.word	0x45670123
 8002674:	cdef89ab 	.word	0xcdef89ab

08002678 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800267c:	4b05      	ldr	r3, [pc, #20]	; (8002694 <HAL_FLASH_Lock+0x1c>)
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	4a04      	ldr	r2, [pc, #16]	; (8002694 <HAL_FLASH_Lock+0x1c>)
 8002682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002686:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	46bd      	mov	sp, r7
 800268e:	bc80      	pop	{r7}
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40022000 	.word	0x40022000

08002698 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80026a4:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <FLASH_Program_HalfWord+0x30>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80026aa:	4b08      	ldr	r3, [pc, #32]	; (80026cc <FLASH_Program_HalfWord+0x34>)
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	4a07      	ldr	r2, [pc, #28]	; (80026cc <FLASH_Program_HalfWord+0x34>)
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	887a      	ldrh	r2, [r7, #2]
 80026ba:	801a      	strh	r2, [r3, #0]
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bc80      	pop	{r7}
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	20000608 	.word	0x20000608
 80026cc:	40022000 	.word	0x40022000

080026d0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80026d8:	f7ff fdfc 	bl	80022d4 <HAL_GetTick>
 80026dc:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80026de:	e010      	b.n	8002702 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e6:	d00c      	beq.n	8002702 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d007      	beq.n	80026fe <FLASH_WaitForLastOperation+0x2e>
 80026ee:	f7ff fdf1 	bl	80022d4 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d201      	bcs.n	8002702 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e025      	b.n	800274e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002702:	4b15      	ldr	r3, [pc, #84]	; (8002758 <FLASH_WaitForLastOperation+0x88>)
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1e8      	bne.n	80026e0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800270e:	4b12      	ldr	r3, [pc, #72]	; (8002758 <FLASH_WaitForLastOperation+0x88>)
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	f003 0320 	and.w	r3, r3, #32
 8002716:	2b00      	cmp	r3, #0
 8002718:	d002      	beq.n	8002720 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800271a:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <FLASH_WaitForLastOperation+0x88>)
 800271c:	2220      	movs	r2, #32
 800271e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002720:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <FLASH_WaitForLastOperation+0x88>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f003 0310 	and.w	r3, r3, #16
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10b      	bne.n	8002744 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800272c:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <FLASH_WaitForLastOperation+0x88>)
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002734:	2b00      	cmp	r3, #0
 8002736:	d105      	bne.n	8002744 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002738:	4b07      	ldr	r3, [pc, #28]	; (8002758 <FLASH_WaitForLastOperation+0x88>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002744:	f000 f80a 	bl	800275c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e000      	b.n	800274e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40022000 	.word	0x40022000

0800275c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002762:	2300      	movs	r3, #0
 8002764:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002766:	4b23      	ldr	r3, [pc, #140]	; (80027f4 <FLASH_SetErrorCode+0x98>)
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	f003 0310 	and.w	r3, r3, #16
 800276e:	2b00      	cmp	r3, #0
 8002770:	d009      	beq.n	8002786 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002772:	4b21      	ldr	r3, [pc, #132]	; (80027f8 <FLASH_SetErrorCode+0x9c>)
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	f043 0302 	orr.w	r3, r3, #2
 800277a:	4a1f      	ldr	r2, [pc, #124]	; (80027f8 <FLASH_SetErrorCode+0x9c>)
 800277c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f043 0310 	orr.w	r3, r3, #16
 8002784:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002786:	4b1b      	ldr	r3, [pc, #108]	; (80027f4 <FLASH_SetErrorCode+0x98>)
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f003 0304 	and.w	r3, r3, #4
 800278e:	2b00      	cmp	r3, #0
 8002790:	d009      	beq.n	80027a6 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002792:	4b19      	ldr	r3, [pc, #100]	; (80027f8 <FLASH_SetErrorCode+0x9c>)
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	4a17      	ldr	r2, [pc, #92]	; (80027f8 <FLASH_SetErrorCode+0x9c>)
 800279c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f043 0304 	orr.w	r3, r3, #4
 80027a4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80027a6:	4b13      	ldr	r3, [pc, #76]	; (80027f4 <FLASH_SetErrorCode+0x98>)
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00b      	beq.n	80027ca <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80027b2:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <FLASH_SetErrorCode+0x9c>)
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	f043 0304 	orr.w	r3, r3, #4
 80027ba:	4a0f      	ldr	r2, [pc, #60]	; (80027f8 <FLASH_SetErrorCode+0x9c>)
 80027bc:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80027be:	4b0d      	ldr	r3, [pc, #52]	; (80027f4 <FLASH_SetErrorCode+0x98>)
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	4a0c      	ldr	r2, [pc, #48]	; (80027f4 <FLASH_SetErrorCode+0x98>)
 80027c4:	f023 0301 	bic.w	r3, r3, #1
 80027c8:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f240 1201 	movw	r2, #257	; 0x101
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d106      	bne.n	80027e2 <FLASH_SetErrorCode+0x86>
 80027d4:	4b07      	ldr	r3, [pc, #28]	; (80027f4 <FLASH_SetErrorCode+0x98>)
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	4a06      	ldr	r2, [pc, #24]	; (80027f4 <FLASH_SetErrorCode+0x98>)
 80027da:	f023 0301 	bic.w	r3, r3, #1
 80027de:	61d3      	str	r3, [r2, #28]
}  
 80027e0:	e002      	b.n	80027e8 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80027e2:	4a04      	ldr	r2, [pc, #16]	; (80027f4 <FLASH_SetErrorCode+0x98>)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	60d3      	str	r3, [r2, #12]
}  
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40022000 	.word	0x40022000
 80027f8:	20000608 	.word	0x20000608

080027fc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800280a:	2300      	movs	r3, #0
 800280c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800280e:	4b2f      	ldr	r3, [pc, #188]	; (80028cc <HAL_FLASHEx_Erase+0xd0>)
 8002810:	7e1b      	ldrb	r3, [r3, #24]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <HAL_FLASHEx_Erase+0x1e>
 8002816:	2302      	movs	r3, #2
 8002818:	e053      	b.n	80028c2 <HAL_FLASHEx_Erase+0xc6>
 800281a:	4b2c      	ldr	r3, [pc, #176]	; (80028cc <HAL_FLASHEx_Erase+0xd0>)
 800281c:	2201      	movs	r2, #1
 800281e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b02      	cmp	r3, #2
 8002826:	d116      	bne.n	8002856 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002828:	f24c 3050 	movw	r0, #50000	; 0xc350
 800282c:	f7ff ff50 	bl	80026d0 <FLASH_WaitForLastOperation>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d141      	bne.n	80028ba <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002836:	2001      	movs	r0, #1
 8002838:	f000 f84c 	bl	80028d4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800283c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002840:	f7ff ff46 	bl	80026d0 <FLASH_WaitForLastOperation>
 8002844:	4603      	mov	r3, r0
 8002846:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002848:	4b21      	ldr	r3, [pc, #132]	; (80028d0 <HAL_FLASHEx_Erase+0xd4>)
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	4a20      	ldr	r2, [pc, #128]	; (80028d0 <HAL_FLASHEx_Erase+0xd4>)
 800284e:	f023 0304 	bic.w	r3, r3, #4
 8002852:	6113      	str	r3, [r2, #16]
 8002854:	e031      	b.n	80028ba <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002856:	f24c 3050 	movw	r0, #50000	; 0xc350
 800285a:	f7ff ff39 	bl	80026d0 <FLASH_WaitForLastOperation>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d12a      	bne.n	80028ba <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	f04f 32ff 	mov.w	r2, #4294967295
 800286a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	e019      	b.n	80028a8 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002874:	68b8      	ldr	r0, [r7, #8]
 8002876:	f000 f849 	bl	800290c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800287a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800287e:	f7ff ff27 	bl	80026d0 <FLASH_WaitForLastOperation>
 8002882:	4603      	mov	r3, r0
 8002884:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002886:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <HAL_FLASHEx_Erase+0xd4>)
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	4a11      	ldr	r2, [pc, #68]	; (80028d0 <HAL_FLASHEx_Erase+0xd4>)
 800288c:	f023 0302 	bic.w	r3, r3, #2
 8002890:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002892:	7bfb      	ldrb	r3, [r7, #15]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	601a      	str	r2, [r3, #0]
            break;
 800289e:	e00c      	b.n	80028ba <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028a6:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	029a      	lsls	r2, r3, #10
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d3dc      	bcc.n	8002874 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80028ba:	4b04      	ldr	r3, [pc, #16]	; (80028cc <HAL_FLASHEx_Erase+0xd0>)
 80028bc:	2200      	movs	r2, #0
 80028be:	761a      	strb	r2, [r3, #24]

  return status;
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	20000608 	.word	0x20000608
 80028d0:	40022000 	.word	0x40022000

080028d4 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80028dc:	4b09      	ldr	r3, [pc, #36]	; (8002904 <FLASH_MassErase+0x30>)
 80028de:	2200      	movs	r2, #0
 80028e0:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80028e2:	4b09      	ldr	r3, [pc, #36]	; (8002908 <FLASH_MassErase+0x34>)
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	4a08      	ldr	r2, [pc, #32]	; (8002908 <FLASH_MassErase+0x34>)
 80028e8:	f043 0304 	orr.w	r3, r3, #4
 80028ec:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80028ee:	4b06      	ldr	r3, [pc, #24]	; (8002908 <FLASH_MassErase+0x34>)
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	4a05      	ldr	r2, [pc, #20]	; (8002908 <FLASH_MassErase+0x34>)
 80028f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028f8:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr
 8002904:	20000608 	.word	0x20000608
 8002908:	40022000 	.word	0x40022000

0800290c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002914:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <FLASH_PageErase+0x38>)
 8002916:	2200      	movs	r2, #0
 8002918:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800291a:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <FLASH_PageErase+0x3c>)
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	4a0a      	ldr	r2, [pc, #40]	; (8002948 <FLASH_PageErase+0x3c>)
 8002920:	f043 0302 	orr.w	r3, r3, #2
 8002924:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002926:	4a08      	ldr	r2, [pc, #32]	; (8002948 <FLASH_PageErase+0x3c>)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800292c:	4b06      	ldr	r3, [pc, #24]	; (8002948 <FLASH_PageErase+0x3c>)
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	4a05      	ldr	r2, [pc, #20]	; (8002948 <FLASH_PageErase+0x3c>)
 8002932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002936:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	bc80      	pop	{r7}
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	20000608 	.word	0x20000608
 8002948:	40022000 	.word	0x40022000

0800294c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800294c:	b480      	push	{r7}
 800294e:	b08b      	sub	sp, #44	; 0x2c
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002956:	2300      	movs	r3, #0
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800295a:	2300      	movs	r3, #0
 800295c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800295e:	e169      	b.n	8002c34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002960:	2201      	movs	r2, #1
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	69fa      	ldr	r2, [r7, #28]
 8002970:	4013      	ands	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	429a      	cmp	r2, r3
 800297a:	f040 8158 	bne.w	8002c2e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	4a9a      	ldr	r2, [pc, #616]	; (8002bec <HAL_GPIO_Init+0x2a0>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d05e      	beq.n	8002a46 <HAL_GPIO_Init+0xfa>
 8002988:	4a98      	ldr	r2, [pc, #608]	; (8002bec <HAL_GPIO_Init+0x2a0>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d875      	bhi.n	8002a7a <HAL_GPIO_Init+0x12e>
 800298e:	4a98      	ldr	r2, [pc, #608]	; (8002bf0 <HAL_GPIO_Init+0x2a4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d058      	beq.n	8002a46 <HAL_GPIO_Init+0xfa>
 8002994:	4a96      	ldr	r2, [pc, #600]	; (8002bf0 <HAL_GPIO_Init+0x2a4>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d86f      	bhi.n	8002a7a <HAL_GPIO_Init+0x12e>
 800299a:	4a96      	ldr	r2, [pc, #600]	; (8002bf4 <HAL_GPIO_Init+0x2a8>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d052      	beq.n	8002a46 <HAL_GPIO_Init+0xfa>
 80029a0:	4a94      	ldr	r2, [pc, #592]	; (8002bf4 <HAL_GPIO_Init+0x2a8>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d869      	bhi.n	8002a7a <HAL_GPIO_Init+0x12e>
 80029a6:	4a94      	ldr	r2, [pc, #592]	; (8002bf8 <HAL_GPIO_Init+0x2ac>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d04c      	beq.n	8002a46 <HAL_GPIO_Init+0xfa>
 80029ac:	4a92      	ldr	r2, [pc, #584]	; (8002bf8 <HAL_GPIO_Init+0x2ac>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d863      	bhi.n	8002a7a <HAL_GPIO_Init+0x12e>
 80029b2:	4a92      	ldr	r2, [pc, #584]	; (8002bfc <HAL_GPIO_Init+0x2b0>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d046      	beq.n	8002a46 <HAL_GPIO_Init+0xfa>
 80029b8:	4a90      	ldr	r2, [pc, #576]	; (8002bfc <HAL_GPIO_Init+0x2b0>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d85d      	bhi.n	8002a7a <HAL_GPIO_Init+0x12e>
 80029be:	2b12      	cmp	r3, #18
 80029c0:	d82a      	bhi.n	8002a18 <HAL_GPIO_Init+0xcc>
 80029c2:	2b12      	cmp	r3, #18
 80029c4:	d859      	bhi.n	8002a7a <HAL_GPIO_Init+0x12e>
 80029c6:	a201      	add	r2, pc, #4	; (adr r2, 80029cc <HAL_GPIO_Init+0x80>)
 80029c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029cc:	08002a47 	.word	0x08002a47
 80029d0:	08002a21 	.word	0x08002a21
 80029d4:	08002a33 	.word	0x08002a33
 80029d8:	08002a75 	.word	0x08002a75
 80029dc:	08002a7b 	.word	0x08002a7b
 80029e0:	08002a7b 	.word	0x08002a7b
 80029e4:	08002a7b 	.word	0x08002a7b
 80029e8:	08002a7b 	.word	0x08002a7b
 80029ec:	08002a7b 	.word	0x08002a7b
 80029f0:	08002a7b 	.word	0x08002a7b
 80029f4:	08002a7b 	.word	0x08002a7b
 80029f8:	08002a7b 	.word	0x08002a7b
 80029fc:	08002a7b 	.word	0x08002a7b
 8002a00:	08002a7b 	.word	0x08002a7b
 8002a04:	08002a7b 	.word	0x08002a7b
 8002a08:	08002a7b 	.word	0x08002a7b
 8002a0c:	08002a7b 	.word	0x08002a7b
 8002a10:	08002a29 	.word	0x08002a29
 8002a14:	08002a3d 	.word	0x08002a3d
 8002a18:	4a79      	ldr	r2, [pc, #484]	; (8002c00 <HAL_GPIO_Init+0x2b4>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d013      	beq.n	8002a46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a1e:	e02c      	b.n	8002a7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	623b      	str	r3, [r7, #32]
          break;
 8002a26:	e029      	b.n	8002a7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	623b      	str	r3, [r7, #32]
          break;
 8002a30:	e024      	b.n	8002a7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	3308      	adds	r3, #8
 8002a38:	623b      	str	r3, [r7, #32]
          break;
 8002a3a:	e01f      	b.n	8002a7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	330c      	adds	r3, #12
 8002a42:	623b      	str	r3, [r7, #32]
          break;
 8002a44:	e01a      	b.n	8002a7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d102      	bne.n	8002a54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a4e:	2304      	movs	r3, #4
 8002a50:	623b      	str	r3, [r7, #32]
          break;
 8002a52:	e013      	b.n	8002a7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d105      	bne.n	8002a68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a5c:	2308      	movs	r3, #8
 8002a5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	69fa      	ldr	r2, [r7, #28]
 8002a64:	611a      	str	r2, [r3, #16]
          break;
 8002a66:	e009      	b.n	8002a7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a68:	2308      	movs	r3, #8
 8002a6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	69fa      	ldr	r2, [r7, #28]
 8002a70:	615a      	str	r2, [r3, #20]
          break;
 8002a72:	e003      	b.n	8002a7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a74:	2300      	movs	r3, #0
 8002a76:	623b      	str	r3, [r7, #32]
          break;
 8002a78:	e000      	b.n	8002a7c <HAL_GPIO_Init+0x130>
          break;
 8002a7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	2bff      	cmp	r3, #255	; 0xff
 8002a80:	d801      	bhi.n	8002a86 <HAL_GPIO_Init+0x13a>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	e001      	b.n	8002a8a <HAL_GPIO_Init+0x13e>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3304      	adds	r3, #4
 8002a8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	2bff      	cmp	r3, #255	; 0xff
 8002a90:	d802      	bhi.n	8002a98 <HAL_GPIO_Init+0x14c>
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	e002      	b.n	8002a9e <HAL_GPIO_Init+0x152>
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	3b08      	subs	r3, #8
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	210f      	movs	r1, #15
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	401a      	ands	r2, r3
 8002ab0:	6a39      	ldr	r1, [r7, #32]
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 80b1 	beq.w	8002c2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002acc:	4b4d      	ldr	r3, [pc, #308]	; (8002c04 <HAL_GPIO_Init+0x2b8>)
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	4a4c      	ldr	r2, [pc, #304]	; (8002c04 <HAL_GPIO_Init+0x2b8>)
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	6193      	str	r3, [r2, #24]
 8002ad8:	4b4a      	ldr	r3, [pc, #296]	; (8002c04 <HAL_GPIO_Init+0x2b8>)
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	60bb      	str	r3, [r7, #8]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ae4:	4a48      	ldr	r2, [pc, #288]	; (8002c08 <HAL_GPIO_Init+0x2bc>)
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	089b      	lsrs	r3, r3, #2
 8002aea:	3302      	adds	r3, #2
 8002aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	220f      	movs	r2, #15
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	43db      	mvns	r3, r3
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	4013      	ands	r3, r2
 8002b06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a40      	ldr	r2, [pc, #256]	; (8002c0c <HAL_GPIO_Init+0x2c0>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d013      	beq.n	8002b38 <HAL_GPIO_Init+0x1ec>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a3f      	ldr	r2, [pc, #252]	; (8002c10 <HAL_GPIO_Init+0x2c4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d00d      	beq.n	8002b34 <HAL_GPIO_Init+0x1e8>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a3e      	ldr	r2, [pc, #248]	; (8002c14 <HAL_GPIO_Init+0x2c8>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d007      	beq.n	8002b30 <HAL_GPIO_Init+0x1e4>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a3d      	ldr	r2, [pc, #244]	; (8002c18 <HAL_GPIO_Init+0x2cc>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d101      	bne.n	8002b2c <HAL_GPIO_Init+0x1e0>
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e006      	b.n	8002b3a <HAL_GPIO_Init+0x1ee>
 8002b2c:	2304      	movs	r3, #4
 8002b2e:	e004      	b.n	8002b3a <HAL_GPIO_Init+0x1ee>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e002      	b.n	8002b3a <HAL_GPIO_Init+0x1ee>
 8002b34:	2301      	movs	r3, #1
 8002b36:	e000      	b.n	8002b3a <HAL_GPIO_Init+0x1ee>
 8002b38:	2300      	movs	r3, #0
 8002b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b3c:	f002 0203 	and.w	r2, r2, #3
 8002b40:	0092      	lsls	r2, r2, #2
 8002b42:	4093      	lsls	r3, r2
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b4a:	492f      	ldr	r1, [pc, #188]	; (8002c08 <HAL_GPIO_Init+0x2bc>)
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	089b      	lsrs	r3, r3, #2
 8002b50:	3302      	adds	r3, #2
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d006      	beq.n	8002b72 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b64:	4b2d      	ldr	r3, [pc, #180]	; (8002c1c <HAL_GPIO_Init+0x2d0>)
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	492c      	ldr	r1, [pc, #176]	; (8002c1c <HAL_GPIO_Init+0x2d0>)
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	600b      	str	r3, [r1, #0]
 8002b70:	e006      	b.n	8002b80 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b72:	4b2a      	ldr	r3, [pc, #168]	; (8002c1c <HAL_GPIO_Init+0x2d0>)
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	4928      	ldr	r1, [pc, #160]	; (8002c1c <HAL_GPIO_Init+0x2d0>)
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d006      	beq.n	8002b9a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b8c:	4b23      	ldr	r3, [pc, #140]	; (8002c1c <HAL_GPIO_Init+0x2d0>)
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	4922      	ldr	r1, [pc, #136]	; (8002c1c <HAL_GPIO_Init+0x2d0>)
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	604b      	str	r3, [r1, #4]
 8002b98:	e006      	b.n	8002ba8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b9a:	4b20      	ldr	r3, [pc, #128]	; (8002c1c <HAL_GPIO_Init+0x2d0>)
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	491e      	ldr	r1, [pc, #120]	; (8002c1c <HAL_GPIO_Init+0x2d0>)
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d006      	beq.n	8002bc2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bb4:	4b19      	ldr	r3, [pc, #100]	; (8002c1c <HAL_GPIO_Init+0x2d0>)
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	4918      	ldr	r1, [pc, #96]	; (8002c1c <HAL_GPIO_Init+0x2d0>)
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	608b      	str	r3, [r1, #8]
 8002bc0:	e006      	b.n	8002bd0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bc2:	4b16      	ldr	r3, [pc, #88]	; (8002c1c <HAL_GPIO_Init+0x2d0>)
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	4914      	ldr	r1, [pc, #80]	; (8002c1c <HAL_GPIO_Init+0x2d0>)
 8002bcc:	4013      	ands	r3, r2
 8002bce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d021      	beq.n	8002c20 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bdc:	4b0f      	ldr	r3, [pc, #60]	; (8002c1c <HAL_GPIO_Init+0x2d0>)
 8002bde:	68da      	ldr	r2, [r3, #12]
 8002be0:	490e      	ldr	r1, [pc, #56]	; (8002c1c <HAL_GPIO_Init+0x2d0>)
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	60cb      	str	r3, [r1, #12]
 8002be8:	e021      	b.n	8002c2e <HAL_GPIO_Init+0x2e2>
 8002bea:	bf00      	nop
 8002bec:	10320000 	.word	0x10320000
 8002bf0:	10310000 	.word	0x10310000
 8002bf4:	10220000 	.word	0x10220000
 8002bf8:	10210000 	.word	0x10210000
 8002bfc:	10120000 	.word	0x10120000
 8002c00:	10110000 	.word	0x10110000
 8002c04:	40021000 	.word	0x40021000
 8002c08:	40010000 	.word	0x40010000
 8002c0c:	40010800 	.word	0x40010800
 8002c10:	40010c00 	.word	0x40010c00
 8002c14:	40011000 	.word	0x40011000
 8002c18:	40011400 	.word	0x40011400
 8002c1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c20:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <HAL_GPIO_Init+0x304>)
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	43db      	mvns	r3, r3
 8002c28:	4909      	ldr	r1, [pc, #36]	; (8002c50 <HAL_GPIO_Init+0x304>)
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	3301      	adds	r3, #1
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f47f ae8e 	bne.w	8002960 <HAL_GPIO_Init+0x14>
  }
}
 8002c44:	bf00      	nop
 8002c46:	bf00      	nop
 8002c48:	372c      	adds	r7, #44	; 0x2c
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr
 8002c50:	40010400 	.word	0x40010400

08002c54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	887b      	ldrh	r3, [r7, #2]
 8002c66:	4013      	ands	r3, r2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d002      	beq.n	8002c72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	73fb      	strb	r3, [r7, #15]
 8002c70:	e001      	b.n	8002c76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c72:	2300      	movs	r3, #0
 8002c74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bc80      	pop	{r7}
 8002c80:	4770      	bx	lr

08002c82 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	807b      	strh	r3, [r7, #2]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c92:	787b      	ldrb	r3, [r7, #1]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c98:	887a      	ldrh	r2, [r7, #2]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c9e:	e003      	b.n	8002ca8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ca0:	887b      	ldrh	r3, [r7, #2]
 8002ca2:	041a      	lsls	r2, r3, #16
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	611a      	str	r2, [r3, #16]
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr

08002cb2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b085      	sub	sp, #20
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	460b      	mov	r3, r1
 8002cbc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cc4:	887a      	ldrh	r2, [r7, #2]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	041a      	lsls	r2, r3, #16
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	43d9      	mvns	r1, r3
 8002cd0:	887b      	ldrh	r3, [r7, #2]
 8002cd2:	400b      	ands	r3, r1
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	611a      	str	r2, [r3, #16]
}
 8002cda:	bf00      	nop
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e12b      	b.n	8002f4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d106      	bne.n	8002d10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7ff f95a 	bl	8001fc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2224      	movs	r2, #36	; 0x24
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 0201 	bic.w	r2, r2, #1
 8002d26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d48:	f000 fffa 	bl	8003d40 <HAL_RCC_GetPCLK1Freq>
 8002d4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	4a81      	ldr	r2, [pc, #516]	; (8002f58 <HAL_I2C_Init+0x274>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d807      	bhi.n	8002d68 <HAL_I2C_Init+0x84>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4a80      	ldr	r2, [pc, #512]	; (8002f5c <HAL_I2C_Init+0x278>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	bf94      	ite	ls
 8002d60:	2301      	movls	r3, #1
 8002d62:	2300      	movhi	r3, #0
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	e006      	b.n	8002d76 <HAL_I2C_Init+0x92>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	4a7d      	ldr	r2, [pc, #500]	; (8002f60 <HAL_I2C_Init+0x27c>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	bf94      	ite	ls
 8002d70:	2301      	movls	r3, #1
 8002d72:	2300      	movhi	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e0e7      	b.n	8002f4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4a78      	ldr	r2, [pc, #480]	; (8002f64 <HAL_I2C_Init+0x280>)
 8002d82:	fba2 2303 	umull	r2, r3, r2, r3
 8002d86:	0c9b      	lsrs	r3, r3, #18
 8002d88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68ba      	ldr	r2, [r7, #8]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	4a6a      	ldr	r2, [pc, #424]	; (8002f58 <HAL_I2C_Init+0x274>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d802      	bhi.n	8002db8 <HAL_I2C_Init+0xd4>
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	3301      	adds	r3, #1
 8002db6:	e009      	b.n	8002dcc <HAL_I2C_Init+0xe8>
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002dbe:	fb02 f303 	mul.w	r3, r2, r3
 8002dc2:	4a69      	ldr	r2, [pc, #420]	; (8002f68 <HAL_I2C_Init+0x284>)
 8002dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc8:	099b      	lsrs	r3, r3, #6
 8002dca:	3301      	adds	r3, #1
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6812      	ldr	r2, [r2, #0]
 8002dd0:	430b      	orrs	r3, r1
 8002dd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002dde:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	495c      	ldr	r1, [pc, #368]	; (8002f58 <HAL_I2C_Init+0x274>)
 8002de8:	428b      	cmp	r3, r1
 8002dea:	d819      	bhi.n	8002e20 <HAL_I2C_Init+0x13c>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	1e59      	subs	r1, r3, #1
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dfa:	1c59      	adds	r1, r3, #1
 8002dfc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e00:	400b      	ands	r3, r1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00a      	beq.n	8002e1c <HAL_I2C_Init+0x138>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	1e59      	subs	r1, r3, #1
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e14:	3301      	adds	r3, #1
 8002e16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e1a:	e051      	b.n	8002ec0 <HAL_I2C_Init+0x1dc>
 8002e1c:	2304      	movs	r3, #4
 8002e1e:	e04f      	b.n	8002ec0 <HAL_I2C_Init+0x1dc>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d111      	bne.n	8002e4c <HAL_I2C_Init+0x168>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	1e58      	subs	r0, r3, #1
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6859      	ldr	r1, [r3, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	440b      	add	r3, r1
 8002e36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	bf0c      	ite	eq
 8002e44:	2301      	moveq	r3, #1
 8002e46:	2300      	movne	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	e012      	b.n	8002e72 <HAL_I2C_Init+0x18e>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	1e58      	subs	r0, r3, #1
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6859      	ldr	r1, [r3, #4]
 8002e54:	460b      	mov	r3, r1
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	0099      	lsls	r1, r3, #2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e62:	3301      	adds	r3, #1
 8002e64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	bf0c      	ite	eq
 8002e6c:	2301      	moveq	r3, #1
 8002e6e:	2300      	movne	r3, #0
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <HAL_I2C_Init+0x196>
 8002e76:	2301      	movs	r3, #1
 8002e78:	e022      	b.n	8002ec0 <HAL_I2C_Init+0x1dc>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10e      	bne.n	8002ea0 <HAL_I2C_Init+0x1bc>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	1e58      	subs	r0, r3, #1
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6859      	ldr	r1, [r3, #4]
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	440b      	add	r3, r1
 8002e90:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e94:	3301      	adds	r3, #1
 8002e96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e9e:	e00f      	b.n	8002ec0 <HAL_I2C_Init+0x1dc>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	1e58      	subs	r0, r3, #1
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6859      	ldr	r1, [r3, #4]
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	0099      	lsls	r1, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ebc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	6809      	ldr	r1, [r1, #0]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	69da      	ldr	r2, [r3, #28]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002eee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	6911      	ldr	r1, [r2, #16]
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	68d2      	ldr	r2, [r2, #12]
 8002efa:	4311      	orrs	r1, r2
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	6812      	ldr	r2, [r2, #0]
 8002f00:	430b      	orrs	r3, r1
 8002f02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	695a      	ldr	r2, [r3, #20]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f042 0201 	orr.w	r2, r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	000186a0 	.word	0x000186a0
 8002f5c:	001e847f 	.word	0x001e847f
 8002f60:	003d08ff 	.word	0x003d08ff
 8002f64:	431bde83 	.word	0x431bde83
 8002f68:	10624dd3 	.word	0x10624dd3

08002f6c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b088      	sub	sp, #32
 8002f70:	af02      	add	r7, sp, #8
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	4608      	mov	r0, r1
 8002f76:	4611      	mov	r1, r2
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	817b      	strh	r3, [r7, #10]
 8002f7e:	460b      	mov	r3, r1
 8002f80:	813b      	strh	r3, [r7, #8]
 8002f82:	4613      	mov	r3, r2
 8002f84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f86:	f7ff f9a5 	bl	80022d4 <HAL_GetTick>
 8002f8a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b20      	cmp	r3, #32
 8002f96:	f040 80d9 	bne.w	800314c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	2319      	movs	r3, #25
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	496d      	ldr	r1, [pc, #436]	; (8003158 <HAL_I2C_Mem_Write+0x1ec>)
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f000 f971 	bl	800328c <I2C_WaitOnFlagUntilTimeout>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e0cc      	b.n	800314e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d101      	bne.n	8002fc2 <HAL_I2C_Mem_Write+0x56>
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	e0c5      	b.n	800314e <HAL_I2C_Mem_Write+0x1e2>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d007      	beq.n	8002fe8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 0201 	orr.w	r2, r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ff6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2221      	movs	r2, #33	; 0x21
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2240      	movs	r2, #64	; 0x40
 8003004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6a3a      	ldr	r2, [r7, #32]
 8003012:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003018:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301e:	b29a      	uxth	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4a4d      	ldr	r2, [pc, #308]	; (800315c <HAL_I2C_Mem_Write+0x1f0>)
 8003028:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800302a:	88f8      	ldrh	r0, [r7, #6]
 800302c:	893a      	ldrh	r2, [r7, #8]
 800302e:	8979      	ldrh	r1, [r7, #10]
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	9301      	str	r3, [sp, #4]
 8003034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	4603      	mov	r3, r0
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f000 f890 	bl	8003160 <I2C_RequestMemoryWrite>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d052      	beq.n	80030ec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e081      	b.n	800314e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 f9f2 	bl	8003438 <I2C_WaitOnTXEFlagUntilTimeout>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00d      	beq.n	8003076 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	2b04      	cmp	r3, #4
 8003060:	d107      	bne.n	8003072 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003070:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e06b      	b.n	800314e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307a:	781a      	ldrb	r2, [r3, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003090:	3b01      	subs	r3, #1
 8003092:	b29a      	uxth	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309c:	b29b      	uxth	r3, r3
 800309e:	3b01      	subs	r3, #1
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d11b      	bne.n	80030ec <HAL_I2C_Mem_Write+0x180>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d017      	beq.n	80030ec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	781a      	ldrb	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	1c5a      	adds	r2, r3, #1
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d6:	3b01      	subs	r3, #1
 80030d8:	b29a      	uxth	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	3b01      	subs	r3, #1
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1aa      	bne.n	800304a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f000 f9de 	bl	80034ba <I2C_WaitOnBTFFlagUntilTimeout>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00d      	beq.n	8003120 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003108:	2b04      	cmp	r3, #4
 800310a:	d107      	bne.n	800311c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800311a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e016      	b.n	800314e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800312e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2220      	movs	r2, #32
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003148:	2300      	movs	r3, #0
 800314a:	e000      	b.n	800314e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800314c:	2302      	movs	r3, #2
  }
}
 800314e:	4618      	mov	r0, r3
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	00100002 	.word	0x00100002
 800315c:	ffff0000 	.word	0xffff0000

08003160 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b088      	sub	sp, #32
 8003164:	af02      	add	r7, sp, #8
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	4608      	mov	r0, r1
 800316a:	4611      	mov	r1, r2
 800316c:	461a      	mov	r2, r3
 800316e:	4603      	mov	r3, r0
 8003170:	817b      	strh	r3, [r7, #10]
 8003172:	460b      	mov	r3, r1
 8003174:	813b      	strh	r3, [r7, #8]
 8003176:	4613      	mov	r3, r2
 8003178:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003188:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	2200      	movs	r2, #0
 8003192:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 f878 	bl	800328c <I2C_WaitOnFlagUntilTimeout>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00d      	beq.n	80031be <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031b0:	d103      	bne.n	80031ba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e05f      	b.n	800327e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031be:	897b      	ldrh	r3, [r7, #10]
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	461a      	mov	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	6a3a      	ldr	r2, [r7, #32]
 80031d2:	492d      	ldr	r1, [pc, #180]	; (8003288 <I2C_RequestMemoryWrite+0x128>)
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 f8b0 	bl	800333a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e04c      	b.n	800327e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031e4:	2300      	movs	r3, #0
 80031e6:	617b      	str	r3, [r7, #20]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	617b      	str	r3, [r7, #20]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	617b      	str	r3, [r7, #20]
 80031f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031fc:	6a39      	ldr	r1, [r7, #32]
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 f91a 	bl	8003438 <I2C_WaitOnTXEFlagUntilTimeout>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00d      	beq.n	8003226 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	2b04      	cmp	r3, #4
 8003210:	d107      	bne.n	8003222 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003220:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e02b      	b.n	800327e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003226:	88fb      	ldrh	r3, [r7, #6]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d105      	bne.n	8003238 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800322c:	893b      	ldrh	r3, [r7, #8]
 800322e:	b2da      	uxtb	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	611a      	str	r2, [r3, #16]
 8003236:	e021      	b.n	800327c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003238:	893b      	ldrh	r3, [r7, #8]
 800323a:	0a1b      	lsrs	r3, r3, #8
 800323c:	b29b      	uxth	r3, r3
 800323e:	b2da      	uxtb	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003248:	6a39      	ldr	r1, [r7, #32]
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 f8f4 	bl	8003438 <I2C_WaitOnTXEFlagUntilTimeout>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00d      	beq.n	8003272 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	2b04      	cmp	r3, #4
 800325c:	d107      	bne.n	800326e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800326c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e005      	b.n	800327e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003272:	893b      	ldrh	r3, [r7, #8]
 8003274:	b2da      	uxtb	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	00010002 	.word	0x00010002

0800328c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	603b      	str	r3, [r7, #0]
 8003298:	4613      	mov	r3, r2
 800329a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800329c:	e025      	b.n	80032ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a4:	d021      	beq.n	80032ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a6:	f7ff f815 	bl	80022d4 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d302      	bcc.n	80032bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d116      	bne.n	80032ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2220      	movs	r2, #32
 80032c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	f043 0220 	orr.w	r2, r3, #32
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e023      	b.n	8003332 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	0c1b      	lsrs	r3, r3, #16
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d10d      	bne.n	8003310 <I2C_WaitOnFlagUntilTimeout+0x84>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	43da      	mvns	r2, r3
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	4013      	ands	r3, r2
 8003300:	b29b      	uxth	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	bf0c      	ite	eq
 8003306:	2301      	moveq	r3, #1
 8003308:	2300      	movne	r3, #0
 800330a:	b2db      	uxtb	r3, r3
 800330c:	461a      	mov	r2, r3
 800330e:	e00c      	b.n	800332a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	43da      	mvns	r2, r3
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	4013      	ands	r3, r2
 800331c:	b29b      	uxth	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	bf0c      	ite	eq
 8003322:	2301      	moveq	r3, #1
 8003324:	2300      	movne	r3, #0
 8003326:	b2db      	uxtb	r3, r3
 8003328:	461a      	mov	r2, r3
 800332a:	79fb      	ldrb	r3, [r7, #7]
 800332c:	429a      	cmp	r2, r3
 800332e:	d0b6      	beq.n	800329e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b084      	sub	sp, #16
 800333e:	af00      	add	r7, sp, #0
 8003340:	60f8      	str	r0, [r7, #12]
 8003342:	60b9      	str	r1, [r7, #8]
 8003344:	607a      	str	r2, [r7, #4]
 8003346:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003348:	e051      	b.n	80033ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003358:	d123      	bne.n	80033a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003368:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003372:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2220      	movs	r2, #32
 800337e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	f043 0204 	orr.w	r2, r3, #4
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e046      	b.n	8003430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a8:	d021      	beq.n	80033ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033aa:	f7fe ff93 	bl	80022d4 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d302      	bcc.n	80033c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d116      	bne.n	80033ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	f043 0220 	orr.w	r2, r3, #32
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e020      	b.n	8003430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	0c1b      	lsrs	r3, r3, #16
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d10c      	bne.n	8003412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	43da      	mvns	r2, r3
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	4013      	ands	r3, r2
 8003404:	b29b      	uxth	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	bf14      	ite	ne
 800340a:	2301      	movne	r3, #1
 800340c:	2300      	moveq	r3, #0
 800340e:	b2db      	uxtb	r3, r3
 8003410:	e00b      	b.n	800342a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	43da      	mvns	r2, r3
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	4013      	ands	r3, r2
 800341e:	b29b      	uxth	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	bf14      	ite	ne
 8003424:	2301      	movne	r3, #1
 8003426:	2300      	moveq	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d18d      	bne.n	800334a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003444:	e02d      	b.n	80034a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f000 f878 	bl	800353c <I2C_IsAcknowledgeFailed>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e02d      	b.n	80034b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345c:	d021      	beq.n	80034a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800345e:	f7fe ff39 	bl	80022d4 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	429a      	cmp	r2, r3
 800346c:	d302      	bcc.n	8003474 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d116      	bne.n	80034a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2220      	movs	r2, #32
 800347e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	f043 0220 	orr.w	r2, r3, #32
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e007      	b.n	80034b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ac:	2b80      	cmp	r3, #128	; 0x80
 80034ae:	d1ca      	bne.n	8003446 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b084      	sub	sp, #16
 80034be:	af00      	add	r7, sp, #0
 80034c0:	60f8      	str	r0, [r7, #12]
 80034c2:	60b9      	str	r1, [r7, #8]
 80034c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034c6:	e02d      	b.n	8003524 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 f837 	bl	800353c <I2C_IsAcknowledgeFailed>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e02d      	b.n	8003534 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034de:	d021      	beq.n	8003524 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e0:	f7fe fef8 	bl	80022d4 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d302      	bcc.n	80034f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d116      	bne.n	8003524 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2220      	movs	r2, #32
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	f043 0220 	orr.w	r2, r3, #32
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e007      	b.n	8003534 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	f003 0304 	and.w	r3, r3, #4
 800352e:	2b04      	cmp	r3, #4
 8003530:	d1ca      	bne.n	80034c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800354e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003552:	d11b      	bne.n	800358c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800355c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2220      	movs	r2, #32
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	f043 0204 	orr.w	r2, r3, #4
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e000      	b.n	800358e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	bc80      	pop	{r7}
 8003596:	4770      	bx	lr

08003598 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e272      	b.n	8003a90 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 8087 	beq.w	80036c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035b8:	4b92      	ldr	r3, [pc, #584]	; (8003804 <HAL_RCC_OscConfig+0x26c>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f003 030c 	and.w	r3, r3, #12
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d00c      	beq.n	80035de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035c4:	4b8f      	ldr	r3, [pc, #572]	; (8003804 <HAL_RCC_OscConfig+0x26c>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 030c 	and.w	r3, r3, #12
 80035cc:	2b08      	cmp	r3, #8
 80035ce:	d112      	bne.n	80035f6 <HAL_RCC_OscConfig+0x5e>
 80035d0:	4b8c      	ldr	r3, [pc, #560]	; (8003804 <HAL_RCC_OscConfig+0x26c>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035dc:	d10b      	bne.n	80035f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035de:	4b89      	ldr	r3, [pc, #548]	; (8003804 <HAL_RCC_OscConfig+0x26c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d06c      	beq.n	80036c4 <HAL_RCC_OscConfig+0x12c>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d168      	bne.n	80036c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e24c      	b.n	8003a90 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035fe:	d106      	bne.n	800360e <HAL_RCC_OscConfig+0x76>
 8003600:	4b80      	ldr	r3, [pc, #512]	; (8003804 <HAL_RCC_OscConfig+0x26c>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a7f      	ldr	r2, [pc, #508]	; (8003804 <HAL_RCC_OscConfig+0x26c>)
 8003606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800360a:	6013      	str	r3, [r2, #0]
 800360c:	e02e      	b.n	800366c <HAL_RCC_OscConfig+0xd4>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10c      	bne.n	8003630 <HAL_RCC_OscConfig+0x98>
 8003616:	4b7b      	ldr	r3, [pc, #492]	; (8003804 <HAL_RCC_OscConfig+0x26c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a7a      	ldr	r2, [pc, #488]	; (8003804 <HAL_RCC_OscConfig+0x26c>)
 800361c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003620:	6013      	str	r3, [r2, #0]
 8003622:	4b78      	ldr	r3, [pc, #480]	; (8003804 <HAL_RCC_OscConfig+0x26c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a77      	ldr	r2, [pc, #476]	; (8003804 <HAL_RCC_OscConfig+0x26c>)
 8003628:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800362c:	6013      	str	r3, [r2, #0]
 800362e:	e01d      	b.n	800366c <HAL_RCC_OscConfig+0xd4>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003638:	d10c      	bne.n	8003654 <HAL_RCC_OscConfig+0xbc>
 800363a:	4b72      	ldr	r3, [pc, #456]	; (8003804 <HAL_RCC_OscConfig+0x26c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a71      	ldr	r2, [pc, #452]	; (8003804 <HAL_RCC_OscConfig+0x26c>)
 8003640:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003644:	6013      	str	r3, [r2, #0]
 8003646:	4b6f      	ldr	r3, [pc, #444]	; (8003804 <HAL_RCC_OscConfig+0x26c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a6e      	ldr	r2, [pc, #440]	; (8003804 <HAL_RCC_OscConfig+0x26c>)
 800364c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	e00b      	b.n	800366c <HAL_RCC_OscConfig+0xd4>
 8003654:	4b6b      	ldr	r3, [pc, #428]	; (8003804 <HAL_RCC_OscConfig+0x26c>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a6a      	ldr	r2, [pc, #424]	; (8003804 <HAL_RCC_OscConfig+0x26c>)
 800365a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800365e:	6013      	str	r3, [r2, #0]
 8003660:	4b68      	ldr	r3, [pc, #416]	; (8003804 <HAL_RCC_OscConfig+0x26c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a67      	ldr	r2, [pc, #412]	; (8003804 <HAL_RCC_OscConfig+0x26c>)
 8003666:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800366a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d013      	beq.n	800369c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003674:	f7fe fe2e 	bl	80022d4 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800367c:	f7fe fe2a 	bl	80022d4 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b64      	cmp	r3, #100	; 0x64
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e200      	b.n	8003a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800368e:	4b5d      	ldr	r3, [pc, #372]	; (8003804 <HAL_RCC_OscConfig+0x26c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d0f0      	beq.n	800367c <HAL_RCC_OscConfig+0xe4>
 800369a:	e014      	b.n	80036c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369c:	f7fe fe1a 	bl	80022d4 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036a4:	f7fe fe16 	bl	80022d4 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b64      	cmp	r3, #100	; 0x64
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e1ec      	b.n	8003a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036b6:	4b53      	ldr	r3, [pc, #332]	; (8003804 <HAL_RCC_OscConfig+0x26c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f0      	bne.n	80036a4 <HAL_RCC_OscConfig+0x10c>
 80036c2:	e000      	b.n	80036c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d063      	beq.n	800379a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036d2:	4b4c      	ldr	r3, [pc, #304]	; (8003804 <HAL_RCC_OscConfig+0x26c>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f003 030c 	and.w	r3, r3, #12
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00b      	beq.n	80036f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80036de:	4b49      	ldr	r3, [pc, #292]	; (8003804 <HAL_RCC_OscConfig+0x26c>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f003 030c 	and.w	r3, r3, #12
 80036e6:	2b08      	cmp	r3, #8
 80036e8:	d11c      	bne.n	8003724 <HAL_RCC_OscConfig+0x18c>
 80036ea:	4b46      	ldr	r3, [pc, #280]	; (8003804 <HAL_RCC_OscConfig+0x26c>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d116      	bne.n	8003724 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036f6:	4b43      	ldr	r3, [pc, #268]	; (8003804 <HAL_RCC_OscConfig+0x26c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d005      	beq.n	800370e <HAL_RCC_OscConfig+0x176>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d001      	beq.n	800370e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e1c0      	b.n	8003a90 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800370e:	4b3d      	ldr	r3, [pc, #244]	; (8003804 <HAL_RCC_OscConfig+0x26c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	4939      	ldr	r1, [pc, #228]	; (8003804 <HAL_RCC_OscConfig+0x26c>)
 800371e:	4313      	orrs	r3, r2
 8003720:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003722:	e03a      	b.n	800379a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d020      	beq.n	800376e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800372c:	4b36      	ldr	r3, [pc, #216]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 800372e:	2201      	movs	r2, #1
 8003730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003732:	f7fe fdcf 	bl	80022d4 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800373a:	f7fe fdcb 	bl	80022d4 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e1a1      	b.n	8003a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800374c:	4b2d      	ldr	r3, [pc, #180]	; (8003804 <HAL_RCC_OscConfig+0x26c>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0f0      	beq.n	800373a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003758:	4b2a      	ldr	r3, [pc, #168]	; (8003804 <HAL_RCC_OscConfig+0x26c>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	4927      	ldr	r1, [pc, #156]	; (8003804 <HAL_RCC_OscConfig+0x26c>)
 8003768:	4313      	orrs	r3, r2
 800376a:	600b      	str	r3, [r1, #0]
 800376c:	e015      	b.n	800379a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800376e:	4b26      	ldr	r3, [pc, #152]	; (8003808 <HAL_RCC_OscConfig+0x270>)
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003774:	f7fe fdae 	bl	80022d4 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800377c:	f7fe fdaa 	bl	80022d4 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e180      	b.n	8003a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800378e:	4b1d      	ldr	r3, [pc, #116]	; (8003804 <HAL_RCC_OscConfig+0x26c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1f0      	bne.n	800377c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d03a      	beq.n	800381c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d019      	beq.n	80037e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ae:	4b17      	ldr	r3, [pc, #92]	; (800380c <HAL_RCC_OscConfig+0x274>)
 80037b0:	2201      	movs	r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037b4:	f7fe fd8e 	bl	80022d4 <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037bc:	f7fe fd8a 	bl	80022d4 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e160      	b.n	8003a90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ce:	4b0d      	ldr	r3, [pc, #52]	; (8003804 <HAL_RCC_OscConfig+0x26c>)
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0f0      	beq.n	80037bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80037da:	2001      	movs	r0, #1
 80037dc:	f000 fac4 	bl	8003d68 <RCC_Delay>
 80037e0:	e01c      	b.n	800381c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037e2:	4b0a      	ldr	r3, [pc, #40]	; (800380c <HAL_RCC_OscConfig+0x274>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037e8:	f7fe fd74 	bl	80022d4 <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037ee:	e00f      	b.n	8003810 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037f0:	f7fe fd70 	bl	80022d4 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d908      	bls.n	8003810 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e146      	b.n	8003a90 <HAL_RCC_OscConfig+0x4f8>
 8003802:	bf00      	nop
 8003804:	40021000 	.word	0x40021000
 8003808:	42420000 	.word	0x42420000
 800380c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003810:	4b92      	ldr	r3, [pc, #584]	; (8003a5c <HAL_RCC_OscConfig+0x4c4>)
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1e9      	bne.n	80037f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 80a6 	beq.w	8003976 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800382a:	2300      	movs	r3, #0
 800382c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800382e:	4b8b      	ldr	r3, [pc, #556]	; (8003a5c <HAL_RCC_OscConfig+0x4c4>)
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10d      	bne.n	8003856 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800383a:	4b88      	ldr	r3, [pc, #544]	; (8003a5c <HAL_RCC_OscConfig+0x4c4>)
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	4a87      	ldr	r2, [pc, #540]	; (8003a5c <HAL_RCC_OscConfig+0x4c4>)
 8003840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003844:	61d3      	str	r3, [r2, #28]
 8003846:	4b85      	ldr	r3, [pc, #532]	; (8003a5c <HAL_RCC_OscConfig+0x4c4>)
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384e:	60bb      	str	r3, [r7, #8]
 8003850:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003852:	2301      	movs	r3, #1
 8003854:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003856:	4b82      	ldr	r3, [pc, #520]	; (8003a60 <HAL_RCC_OscConfig+0x4c8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385e:	2b00      	cmp	r3, #0
 8003860:	d118      	bne.n	8003894 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003862:	4b7f      	ldr	r3, [pc, #508]	; (8003a60 <HAL_RCC_OscConfig+0x4c8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a7e      	ldr	r2, [pc, #504]	; (8003a60 <HAL_RCC_OscConfig+0x4c8>)
 8003868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800386c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800386e:	f7fe fd31 	bl	80022d4 <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003874:	e008      	b.n	8003888 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003876:	f7fe fd2d 	bl	80022d4 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b64      	cmp	r3, #100	; 0x64
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e103      	b.n	8003a90 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003888:	4b75      	ldr	r3, [pc, #468]	; (8003a60 <HAL_RCC_OscConfig+0x4c8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0f0      	beq.n	8003876 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d106      	bne.n	80038aa <HAL_RCC_OscConfig+0x312>
 800389c:	4b6f      	ldr	r3, [pc, #444]	; (8003a5c <HAL_RCC_OscConfig+0x4c4>)
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	4a6e      	ldr	r2, [pc, #440]	; (8003a5c <HAL_RCC_OscConfig+0x4c4>)
 80038a2:	f043 0301 	orr.w	r3, r3, #1
 80038a6:	6213      	str	r3, [r2, #32]
 80038a8:	e02d      	b.n	8003906 <HAL_RCC_OscConfig+0x36e>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10c      	bne.n	80038cc <HAL_RCC_OscConfig+0x334>
 80038b2:	4b6a      	ldr	r3, [pc, #424]	; (8003a5c <HAL_RCC_OscConfig+0x4c4>)
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	4a69      	ldr	r2, [pc, #420]	; (8003a5c <HAL_RCC_OscConfig+0x4c4>)
 80038b8:	f023 0301 	bic.w	r3, r3, #1
 80038bc:	6213      	str	r3, [r2, #32]
 80038be:	4b67      	ldr	r3, [pc, #412]	; (8003a5c <HAL_RCC_OscConfig+0x4c4>)
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	4a66      	ldr	r2, [pc, #408]	; (8003a5c <HAL_RCC_OscConfig+0x4c4>)
 80038c4:	f023 0304 	bic.w	r3, r3, #4
 80038c8:	6213      	str	r3, [r2, #32]
 80038ca:	e01c      	b.n	8003906 <HAL_RCC_OscConfig+0x36e>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	2b05      	cmp	r3, #5
 80038d2:	d10c      	bne.n	80038ee <HAL_RCC_OscConfig+0x356>
 80038d4:	4b61      	ldr	r3, [pc, #388]	; (8003a5c <HAL_RCC_OscConfig+0x4c4>)
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	4a60      	ldr	r2, [pc, #384]	; (8003a5c <HAL_RCC_OscConfig+0x4c4>)
 80038da:	f043 0304 	orr.w	r3, r3, #4
 80038de:	6213      	str	r3, [r2, #32]
 80038e0:	4b5e      	ldr	r3, [pc, #376]	; (8003a5c <HAL_RCC_OscConfig+0x4c4>)
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	4a5d      	ldr	r2, [pc, #372]	; (8003a5c <HAL_RCC_OscConfig+0x4c4>)
 80038e6:	f043 0301 	orr.w	r3, r3, #1
 80038ea:	6213      	str	r3, [r2, #32]
 80038ec:	e00b      	b.n	8003906 <HAL_RCC_OscConfig+0x36e>
 80038ee:	4b5b      	ldr	r3, [pc, #364]	; (8003a5c <HAL_RCC_OscConfig+0x4c4>)
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	4a5a      	ldr	r2, [pc, #360]	; (8003a5c <HAL_RCC_OscConfig+0x4c4>)
 80038f4:	f023 0301 	bic.w	r3, r3, #1
 80038f8:	6213      	str	r3, [r2, #32]
 80038fa:	4b58      	ldr	r3, [pc, #352]	; (8003a5c <HAL_RCC_OscConfig+0x4c4>)
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	4a57      	ldr	r2, [pc, #348]	; (8003a5c <HAL_RCC_OscConfig+0x4c4>)
 8003900:	f023 0304 	bic.w	r3, r3, #4
 8003904:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d015      	beq.n	800393a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800390e:	f7fe fce1 	bl	80022d4 <HAL_GetTick>
 8003912:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003914:	e00a      	b.n	800392c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003916:	f7fe fcdd 	bl	80022d4 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	f241 3288 	movw	r2, #5000	; 0x1388
 8003924:	4293      	cmp	r3, r2
 8003926:	d901      	bls.n	800392c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e0b1      	b.n	8003a90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800392c:	4b4b      	ldr	r3, [pc, #300]	; (8003a5c <HAL_RCC_OscConfig+0x4c4>)
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0ee      	beq.n	8003916 <HAL_RCC_OscConfig+0x37e>
 8003938:	e014      	b.n	8003964 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800393a:	f7fe fccb 	bl	80022d4 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003940:	e00a      	b.n	8003958 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003942:	f7fe fcc7 	bl	80022d4 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003950:	4293      	cmp	r3, r2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e09b      	b.n	8003a90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003958:	4b40      	ldr	r3, [pc, #256]	; (8003a5c <HAL_RCC_OscConfig+0x4c4>)
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1ee      	bne.n	8003942 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003964:	7dfb      	ldrb	r3, [r7, #23]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d105      	bne.n	8003976 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800396a:	4b3c      	ldr	r3, [pc, #240]	; (8003a5c <HAL_RCC_OscConfig+0x4c4>)
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	4a3b      	ldr	r2, [pc, #236]	; (8003a5c <HAL_RCC_OscConfig+0x4c4>)
 8003970:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003974:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 8087 	beq.w	8003a8e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003980:	4b36      	ldr	r3, [pc, #216]	; (8003a5c <HAL_RCC_OscConfig+0x4c4>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f003 030c 	and.w	r3, r3, #12
 8003988:	2b08      	cmp	r3, #8
 800398a:	d061      	beq.n	8003a50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	2b02      	cmp	r3, #2
 8003992:	d146      	bne.n	8003a22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003994:	4b33      	ldr	r3, [pc, #204]	; (8003a64 <HAL_RCC_OscConfig+0x4cc>)
 8003996:	2200      	movs	r2, #0
 8003998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399a:	f7fe fc9b 	bl	80022d4 <HAL_GetTick>
 800399e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039a0:	e008      	b.n	80039b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039a2:	f7fe fc97 	bl	80022d4 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d901      	bls.n	80039b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e06d      	b.n	8003a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039b4:	4b29      	ldr	r3, [pc, #164]	; (8003a5c <HAL_RCC_OscConfig+0x4c4>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1f0      	bne.n	80039a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c8:	d108      	bne.n	80039dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039ca:	4b24      	ldr	r3, [pc, #144]	; (8003a5c <HAL_RCC_OscConfig+0x4c4>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	4921      	ldr	r1, [pc, #132]	; (8003a5c <HAL_RCC_OscConfig+0x4c4>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039dc:	4b1f      	ldr	r3, [pc, #124]	; (8003a5c <HAL_RCC_OscConfig+0x4c4>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a19      	ldr	r1, [r3, #32]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ec:	430b      	orrs	r3, r1
 80039ee:	491b      	ldr	r1, [pc, #108]	; (8003a5c <HAL_RCC_OscConfig+0x4c4>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039f4:	4b1b      	ldr	r3, [pc, #108]	; (8003a64 <HAL_RCC_OscConfig+0x4cc>)
 80039f6:	2201      	movs	r2, #1
 80039f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039fa:	f7fe fc6b 	bl	80022d4 <HAL_GetTick>
 80039fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a00:	e008      	b.n	8003a14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a02:	f7fe fc67 	bl	80022d4 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e03d      	b.n	8003a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a14:	4b11      	ldr	r3, [pc, #68]	; (8003a5c <HAL_RCC_OscConfig+0x4c4>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0f0      	beq.n	8003a02 <HAL_RCC_OscConfig+0x46a>
 8003a20:	e035      	b.n	8003a8e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a22:	4b10      	ldr	r3, [pc, #64]	; (8003a64 <HAL_RCC_OscConfig+0x4cc>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a28:	f7fe fc54 	bl	80022d4 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a30:	f7fe fc50 	bl	80022d4 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e026      	b.n	8003a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a42:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <HAL_RCC_OscConfig+0x4c4>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1f0      	bne.n	8003a30 <HAL_RCC_OscConfig+0x498>
 8003a4e:	e01e      	b.n	8003a8e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	69db      	ldr	r3, [r3, #28]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d107      	bne.n	8003a68 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e019      	b.n	8003a90 <HAL_RCC_OscConfig+0x4f8>
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	40007000 	.word	0x40007000
 8003a64:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a68:	4b0b      	ldr	r3, [pc, #44]	; (8003a98 <HAL_RCC_OscConfig+0x500>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d106      	bne.n	8003a8a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d001      	beq.n	8003a8e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40021000 	.word	0x40021000

08003a9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d101      	bne.n	8003ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e0d0      	b.n	8003c52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ab0:	4b6a      	ldr	r3, [pc, #424]	; (8003c5c <HAL_RCC_ClockConfig+0x1c0>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d910      	bls.n	8003ae0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003abe:	4b67      	ldr	r3, [pc, #412]	; (8003c5c <HAL_RCC_ClockConfig+0x1c0>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f023 0207 	bic.w	r2, r3, #7
 8003ac6:	4965      	ldr	r1, [pc, #404]	; (8003c5c <HAL_RCC_ClockConfig+0x1c0>)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ace:	4b63      	ldr	r3, [pc, #396]	; (8003c5c <HAL_RCC_ClockConfig+0x1c0>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d001      	beq.n	8003ae0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e0b8      	b.n	8003c52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d020      	beq.n	8003b2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d005      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003af8:	4b59      	ldr	r3, [pc, #356]	; (8003c60 <HAL_RCC_ClockConfig+0x1c4>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	4a58      	ldr	r2, [pc, #352]	; (8003c60 <HAL_RCC_ClockConfig+0x1c4>)
 8003afe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0308 	and.w	r3, r3, #8
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d005      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b10:	4b53      	ldr	r3, [pc, #332]	; (8003c60 <HAL_RCC_ClockConfig+0x1c4>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	4a52      	ldr	r2, [pc, #328]	; (8003c60 <HAL_RCC_ClockConfig+0x1c4>)
 8003b16:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003b1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b1c:	4b50      	ldr	r3, [pc, #320]	; (8003c60 <HAL_RCC_ClockConfig+0x1c4>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	494d      	ldr	r1, [pc, #308]	; (8003c60 <HAL_RCC_ClockConfig+0x1c4>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d040      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d107      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b42:	4b47      	ldr	r3, [pc, #284]	; (8003c60 <HAL_RCC_ClockConfig+0x1c4>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d115      	bne.n	8003b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e07f      	b.n	8003c52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d107      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b5a:	4b41      	ldr	r3, [pc, #260]	; (8003c60 <HAL_RCC_ClockConfig+0x1c4>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d109      	bne.n	8003b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e073      	b.n	8003c52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b6a:	4b3d      	ldr	r3, [pc, #244]	; (8003c60 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e06b      	b.n	8003c52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b7a:	4b39      	ldr	r3, [pc, #228]	; (8003c60 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f023 0203 	bic.w	r2, r3, #3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	4936      	ldr	r1, [pc, #216]	; (8003c60 <HAL_RCC_ClockConfig+0x1c4>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b8c:	f7fe fba2 	bl	80022d4 <HAL_GetTick>
 8003b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b92:	e00a      	b.n	8003baa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b94:	f7fe fb9e 	bl	80022d4 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e053      	b.n	8003c52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003baa:	4b2d      	ldr	r3, [pc, #180]	; (8003c60 <HAL_RCC_ClockConfig+0x1c4>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f003 020c 	and.w	r2, r3, #12
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d1eb      	bne.n	8003b94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bbc:	4b27      	ldr	r3, [pc, #156]	; (8003c5c <HAL_RCC_ClockConfig+0x1c0>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d210      	bcs.n	8003bec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bca:	4b24      	ldr	r3, [pc, #144]	; (8003c5c <HAL_RCC_ClockConfig+0x1c0>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f023 0207 	bic.w	r2, r3, #7
 8003bd2:	4922      	ldr	r1, [pc, #136]	; (8003c5c <HAL_RCC_ClockConfig+0x1c0>)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bda:	4b20      	ldr	r3, [pc, #128]	; (8003c5c <HAL_RCC_ClockConfig+0x1c0>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0307 	and.w	r3, r3, #7
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d001      	beq.n	8003bec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e032      	b.n	8003c52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0304 	and.w	r3, r3, #4
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d008      	beq.n	8003c0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bf8:	4b19      	ldr	r3, [pc, #100]	; (8003c60 <HAL_RCC_ClockConfig+0x1c4>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	4916      	ldr	r1, [pc, #88]	; (8003c60 <HAL_RCC_ClockConfig+0x1c4>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d009      	beq.n	8003c2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c16:	4b12      	ldr	r3, [pc, #72]	; (8003c60 <HAL_RCC_ClockConfig+0x1c4>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	490e      	ldr	r1, [pc, #56]	; (8003c60 <HAL_RCC_ClockConfig+0x1c4>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c2a:	f000 f821 	bl	8003c70 <HAL_RCC_GetSysClockFreq>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	4b0b      	ldr	r3, [pc, #44]	; (8003c60 <HAL_RCC_ClockConfig+0x1c4>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	091b      	lsrs	r3, r3, #4
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	490a      	ldr	r1, [pc, #40]	; (8003c64 <HAL_RCC_ClockConfig+0x1c8>)
 8003c3c:	5ccb      	ldrb	r3, [r1, r3]
 8003c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c42:	4a09      	ldr	r2, [pc, #36]	; (8003c68 <HAL_RCC_ClockConfig+0x1cc>)
 8003c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c46:	4b09      	ldr	r3, [pc, #36]	; (8003c6c <HAL_RCC_ClockConfig+0x1d0>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7fe fb00 	bl	8002250 <HAL_InitTick>

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	40022000 	.word	0x40022000
 8003c60:	40021000 	.word	0x40021000
 8003c64:	08006388 	.word	0x08006388
 8003c68:	20000014 	.word	0x20000014
 8003c6c:	20000018 	.word	0x20000018

08003c70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c70:	b490      	push	{r4, r7}
 8003c72:	b08a      	sub	sp, #40	; 0x28
 8003c74:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003c76:	4b29      	ldr	r3, [pc, #164]	; (8003d1c <HAL_RCC_GetSysClockFreq+0xac>)
 8003c78:	1d3c      	adds	r4, r7, #4
 8003c7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003c80:	f240 2301 	movw	r3, #513	; 0x201
 8003c84:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	61fb      	str	r3, [r7, #28]
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61bb      	str	r3, [r7, #24]
 8003c8e:	2300      	movs	r3, #0
 8003c90:	627b      	str	r3, [r7, #36]	; 0x24
 8003c92:	2300      	movs	r3, #0
 8003c94:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c9a:	4b21      	ldr	r3, [pc, #132]	; (8003d20 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	f003 030c 	and.w	r3, r3, #12
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d002      	beq.n	8003cb0 <HAL_RCC_GetSysClockFreq+0x40>
 8003caa:	2b08      	cmp	r3, #8
 8003cac:	d003      	beq.n	8003cb6 <HAL_RCC_GetSysClockFreq+0x46>
 8003cae:	e02b      	b.n	8003d08 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cb0:	4b1c      	ldr	r3, [pc, #112]	; (8003d24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003cb2:	623b      	str	r3, [r7, #32]
      break;
 8003cb4:	e02b      	b.n	8003d0e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	0c9b      	lsrs	r3, r3, #18
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	3328      	adds	r3, #40	; 0x28
 8003cc0:	443b      	add	r3, r7
 8003cc2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003cc6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d012      	beq.n	8003cf8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003cd2:	4b13      	ldr	r3, [pc, #76]	; (8003d20 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	0c5b      	lsrs	r3, r3, #17
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	3328      	adds	r3, #40	; 0x28
 8003cde:	443b      	add	r3, r7
 8003ce0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ce4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	4a0e      	ldr	r2, [pc, #56]	; (8003d24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003cea:	fb03 f202 	mul.w	r2, r3, r2
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf6:	e004      	b.n	8003d02 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	4a0b      	ldr	r2, [pc, #44]	; (8003d28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cfc:	fb02 f303 	mul.w	r3, r2, r3
 8003d00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d04:	623b      	str	r3, [r7, #32]
      break;
 8003d06:	e002      	b.n	8003d0e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d08:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d0a:	623b      	str	r3, [r7, #32]
      break;
 8003d0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d0e:	6a3b      	ldr	r3, [r7, #32]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3728      	adds	r7, #40	; 0x28
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bc90      	pop	{r4, r7}
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	0800561c 	.word	0x0800561c
 8003d20:	40021000 	.word	0x40021000
 8003d24:	007a1200 	.word	0x007a1200
 8003d28:	003d0900 	.word	0x003d0900

08003d2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d30:	4b02      	ldr	r3, [pc, #8]	; (8003d3c <HAL_RCC_GetHCLKFreq+0x10>)
 8003d32:	681b      	ldr	r3, [r3, #0]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bc80      	pop	{r7}
 8003d3a:	4770      	bx	lr
 8003d3c:	20000014 	.word	0x20000014

08003d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d44:	f7ff fff2 	bl	8003d2c <HAL_RCC_GetHCLKFreq>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	0a1b      	lsrs	r3, r3, #8
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	4903      	ldr	r1, [pc, #12]	; (8003d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d56:	5ccb      	ldrb	r3, [r1, r3]
 8003d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40021000 	.word	0x40021000
 8003d64:	08006398 	.word	0x08006398

08003d68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d70:	4b0a      	ldr	r3, [pc, #40]	; (8003d9c <RCC_Delay+0x34>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a0a      	ldr	r2, [pc, #40]	; (8003da0 <RCC_Delay+0x38>)
 8003d76:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7a:	0a5b      	lsrs	r3, r3, #9
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	fb02 f303 	mul.w	r3, r2, r3
 8003d82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d84:	bf00      	nop
  }
  while (Delay --);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	1e5a      	subs	r2, r3, #1
 8003d8a:	60fa      	str	r2, [r7, #12]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1f9      	bne.n	8003d84 <RCC_Delay+0x1c>
}
 8003d90:	bf00      	nop
 8003d92:	bf00      	nop
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bc80      	pop	{r7}
 8003d9a:	4770      	bx	lr
 8003d9c:	20000014 	.word	0x20000014
 8003da0:	10624dd3 	.word	0x10624dd3

08003da4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e041      	b.n	8003e3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d106      	bne.n	8003dd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7fe f93a 	bl	8002044 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3304      	adds	r3, #4
 8003de0:	4619      	mov	r1, r3
 8003de2:	4610      	mov	r0, r2
 8003de4:	f000 fb20 	bl	8004428 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
	...

08003e44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d001      	beq.n	8003e5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e03a      	b.n	8003ed2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0201 	orr.w	r2, r2, #1
 8003e72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a18      	ldr	r2, [pc, #96]	; (8003edc <HAL_TIM_Base_Start_IT+0x98>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d00e      	beq.n	8003e9c <HAL_TIM_Base_Start_IT+0x58>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e86:	d009      	beq.n	8003e9c <HAL_TIM_Base_Start_IT+0x58>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a14      	ldr	r2, [pc, #80]	; (8003ee0 <HAL_TIM_Base_Start_IT+0x9c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d004      	beq.n	8003e9c <HAL_TIM_Base_Start_IT+0x58>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a13      	ldr	r2, [pc, #76]	; (8003ee4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d111      	bne.n	8003ec0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2b06      	cmp	r3, #6
 8003eac:	d010      	beq.n	8003ed0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f042 0201 	orr.w	r2, r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ebe:	e007      	b.n	8003ed0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 0201 	orr.w	r2, r2, #1
 8003ece:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3714      	adds	r7, #20
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bc80      	pop	{r7}
 8003eda:	4770      	bx	lr
 8003edc:	40012c00 	.word	0x40012c00
 8003ee0:	40000400 	.word	0x40000400
 8003ee4:	40000800 	.word	0x40000800

08003ee8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e041      	b.n	8003f7e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d106      	bne.n	8003f14 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f839 	bl	8003f86 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2202      	movs	r2, #2
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3304      	adds	r3, #4
 8003f24:	4619      	mov	r1, r3
 8003f26:	4610      	mov	r0, r2
 8003f28:	f000 fa7e 	bl	8004428 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bc80      	pop	{r7}
 8003f96:	4770      	bx	lr

08003f98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d122      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d11b      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f06f 0202 	mvn.w	r2, #2
 8003fc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	f003 0303 	and.w	r3, r3, #3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 fa09 	bl	80043f2 <HAL_TIM_IC_CaptureCallback>
 8003fe0:	e005      	b.n	8003fee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f9fc 	bl	80043e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 fa0b 	bl	8004404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	f003 0304 	and.w	r3, r3, #4
 8003ffe:	2b04      	cmp	r3, #4
 8004000:	d122      	bne.n	8004048 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b04      	cmp	r3, #4
 800400e:	d11b      	bne.n	8004048 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f06f 0204 	mvn.w	r2, #4
 8004018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2202      	movs	r2, #2
 800401e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f9df 	bl	80043f2 <HAL_TIM_IC_CaptureCallback>
 8004034:	e005      	b.n	8004042 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f9d2 	bl	80043e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f9e1 	bl	8004404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	f003 0308 	and.w	r3, r3, #8
 8004052:	2b08      	cmp	r3, #8
 8004054:	d122      	bne.n	800409c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f003 0308 	and.w	r3, r3, #8
 8004060:	2b08      	cmp	r3, #8
 8004062:	d11b      	bne.n	800409c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f06f 0208 	mvn.w	r2, #8
 800406c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2204      	movs	r2, #4
 8004072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f9b5 	bl	80043f2 <HAL_TIM_IC_CaptureCallback>
 8004088:	e005      	b.n	8004096 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f9a8 	bl	80043e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 f9b7 	bl	8004404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f003 0310 	and.w	r3, r3, #16
 80040a6:	2b10      	cmp	r3, #16
 80040a8:	d122      	bne.n	80040f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f003 0310 	and.w	r3, r3, #16
 80040b4:	2b10      	cmp	r3, #16
 80040b6:	d11b      	bne.n	80040f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f06f 0210 	mvn.w	r2, #16
 80040c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2208      	movs	r2, #8
 80040c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f98b 	bl	80043f2 <HAL_TIM_IC_CaptureCallback>
 80040dc:	e005      	b.n	80040ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f97e 	bl	80043e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f98d 	bl	8004404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d10e      	bne.n	800411c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b01      	cmp	r3, #1
 800410a:	d107      	bne.n	800411c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f06f 0201 	mvn.w	r2, #1
 8004114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7fd fc44 	bl	80019a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004126:	2b80      	cmp	r3, #128	; 0x80
 8004128:	d10e      	bne.n	8004148 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004134:	2b80      	cmp	r3, #128	; 0x80
 8004136:	d107      	bne.n	8004148 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 fca8 	bl	8004a98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004152:	2b40      	cmp	r3, #64	; 0x40
 8004154:	d10e      	bne.n	8004174 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004160:	2b40      	cmp	r3, #64	; 0x40
 8004162:	d107      	bne.n	8004174 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800416c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f951 	bl	8004416 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	2b20      	cmp	r3, #32
 8004180:	d10e      	bne.n	80041a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f003 0320 	and.w	r3, r3, #32
 800418c:	2b20      	cmp	r3, #32
 800418e:	d107      	bne.n	80041a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f06f 0220 	mvn.w	r2, #32
 8004198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 fc73 	bl	8004a86 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041a0:	bf00      	nop
 80041a2:	3708      	adds	r7, #8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d101      	bne.n	80041c2 <HAL_TIM_OC_ConfigChannel+0x1a>
 80041be:	2302      	movs	r3, #2
 80041c0:	e046      	b.n	8004250 <HAL_TIM_OC_ConfigChannel+0xa8>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b0c      	cmp	r3, #12
 80041ce:	d839      	bhi.n	8004244 <HAL_TIM_OC_ConfigChannel+0x9c>
 80041d0:	a201      	add	r2, pc, #4	; (adr r2, 80041d8 <HAL_TIM_OC_ConfigChannel+0x30>)
 80041d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d6:	bf00      	nop
 80041d8:	0800420d 	.word	0x0800420d
 80041dc:	08004245 	.word	0x08004245
 80041e0:	08004245 	.word	0x08004245
 80041e4:	08004245 	.word	0x08004245
 80041e8:	0800421b 	.word	0x0800421b
 80041ec:	08004245 	.word	0x08004245
 80041f0:	08004245 	.word	0x08004245
 80041f4:	08004245 	.word	0x08004245
 80041f8:	08004229 	.word	0x08004229
 80041fc:	08004245 	.word	0x08004245
 8004200:	08004245 	.word	0x08004245
 8004204:	08004245 	.word	0x08004245
 8004208:	08004237 	.word	0x08004237
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68b9      	ldr	r1, [r7, #8]
 8004212:	4618      	mov	r0, r3
 8004214:	f000 f96a 	bl	80044ec <TIM_OC1_SetConfig>
      break;
 8004218:	e015      	b.n	8004246 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68b9      	ldr	r1, [r7, #8]
 8004220:	4618      	mov	r0, r3
 8004222:	f000 f9c9 	bl	80045b8 <TIM_OC2_SetConfig>
      break;
 8004226:	e00e      	b.n	8004246 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68b9      	ldr	r1, [r7, #8]
 800422e:	4618      	mov	r0, r3
 8004230:	f000 fa2c 	bl	800468c <TIM_OC3_SetConfig>
      break;
 8004234:	e007      	b.n	8004246 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68b9      	ldr	r1, [r7, #8]
 800423c:	4618      	mov	r0, r3
 800423e:	f000 fa8f 	bl	8004760 <TIM_OC4_SetConfig>
      break;
 8004242:	e000      	b.n	8004246 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8004244:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004268:	2b01      	cmp	r3, #1
 800426a:	d101      	bne.n	8004270 <HAL_TIM_ConfigClockSource+0x18>
 800426c:	2302      	movs	r3, #2
 800426e:	e0b3      	b.n	80043d8 <HAL_TIM_ConfigClockSource+0x180>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2202      	movs	r2, #2
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800428e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004296:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042a8:	d03e      	beq.n	8004328 <HAL_TIM_ConfigClockSource+0xd0>
 80042aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ae:	f200 8087 	bhi.w	80043c0 <HAL_TIM_ConfigClockSource+0x168>
 80042b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b6:	f000 8085 	beq.w	80043c4 <HAL_TIM_ConfigClockSource+0x16c>
 80042ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042be:	d87f      	bhi.n	80043c0 <HAL_TIM_ConfigClockSource+0x168>
 80042c0:	2b70      	cmp	r3, #112	; 0x70
 80042c2:	d01a      	beq.n	80042fa <HAL_TIM_ConfigClockSource+0xa2>
 80042c4:	2b70      	cmp	r3, #112	; 0x70
 80042c6:	d87b      	bhi.n	80043c0 <HAL_TIM_ConfigClockSource+0x168>
 80042c8:	2b60      	cmp	r3, #96	; 0x60
 80042ca:	d050      	beq.n	800436e <HAL_TIM_ConfigClockSource+0x116>
 80042cc:	2b60      	cmp	r3, #96	; 0x60
 80042ce:	d877      	bhi.n	80043c0 <HAL_TIM_ConfigClockSource+0x168>
 80042d0:	2b50      	cmp	r3, #80	; 0x50
 80042d2:	d03c      	beq.n	800434e <HAL_TIM_ConfigClockSource+0xf6>
 80042d4:	2b50      	cmp	r3, #80	; 0x50
 80042d6:	d873      	bhi.n	80043c0 <HAL_TIM_ConfigClockSource+0x168>
 80042d8:	2b40      	cmp	r3, #64	; 0x40
 80042da:	d058      	beq.n	800438e <HAL_TIM_ConfigClockSource+0x136>
 80042dc:	2b40      	cmp	r3, #64	; 0x40
 80042de:	d86f      	bhi.n	80043c0 <HAL_TIM_ConfigClockSource+0x168>
 80042e0:	2b30      	cmp	r3, #48	; 0x30
 80042e2:	d064      	beq.n	80043ae <HAL_TIM_ConfigClockSource+0x156>
 80042e4:	2b30      	cmp	r3, #48	; 0x30
 80042e6:	d86b      	bhi.n	80043c0 <HAL_TIM_ConfigClockSource+0x168>
 80042e8:	2b20      	cmp	r3, #32
 80042ea:	d060      	beq.n	80043ae <HAL_TIM_ConfigClockSource+0x156>
 80042ec:	2b20      	cmp	r3, #32
 80042ee:	d867      	bhi.n	80043c0 <HAL_TIM_ConfigClockSource+0x168>
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d05c      	beq.n	80043ae <HAL_TIM_ConfigClockSource+0x156>
 80042f4:	2b10      	cmp	r3, #16
 80042f6:	d05a      	beq.n	80043ae <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80042f8:	e062      	b.n	80043c0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6818      	ldr	r0, [r3, #0]
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	6899      	ldr	r1, [r3, #8]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f000 faee 	bl	80048ea <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800431c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	609a      	str	r2, [r3, #8]
      break;
 8004326:	e04e      	b.n	80043c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6818      	ldr	r0, [r3, #0]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	6899      	ldr	r1, [r3, #8]
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f000 fad7 	bl	80048ea <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689a      	ldr	r2, [r3, #8]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800434a:	609a      	str	r2, [r3, #8]
      break;
 800434c:	e03b      	b.n	80043c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6818      	ldr	r0, [r3, #0]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	6859      	ldr	r1, [r3, #4]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	461a      	mov	r2, r3
 800435c:	f000 fa4e 	bl	80047fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2150      	movs	r1, #80	; 0x50
 8004366:	4618      	mov	r0, r3
 8004368:	f000 faa5 	bl	80048b6 <TIM_ITRx_SetConfig>
      break;
 800436c:	e02b      	b.n	80043c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6818      	ldr	r0, [r3, #0]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	6859      	ldr	r1, [r3, #4]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	461a      	mov	r2, r3
 800437c:	f000 fa6c 	bl	8004858 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2160      	movs	r1, #96	; 0x60
 8004386:	4618      	mov	r0, r3
 8004388:	f000 fa95 	bl	80048b6 <TIM_ITRx_SetConfig>
      break;
 800438c:	e01b      	b.n	80043c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6818      	ldr	r0, [r3, #0]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	6859      	ldr	r1, [r3, #4]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	461a      	mov	r2, r3
 800439c:	f000 fa2e 	bl	80047fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2140      	movs	r1, #64	; 0x40
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 fa85 	bl	80048b6 <TIM_ITRx_SetConfig>
      break;
 80043ac:	e00b      	b.n	80043c6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4619      	mov	r1, r3
 80043b8:	4610      	mov	r0, r2
 80043ba:	f000 fa7c 	bl	80048b6 <TIM_ITRx_SetConfig>
        break;
 80043be:	e002      	b.n	80043c6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80043c0:	bf00      	nop
 80043c2:	e000      	b.n	80043c6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80043c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bc80      	pop	{r7}
 80043f0:	4770      	bx	lr

080043f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043f2:	b480      	push	{r7}
 80043f4:	b083      	sub	sp, #12
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043fa:	bf00      	nop
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	bc80      	pop	{r7}
 8004402:	4770      	bx	lr

08004404 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	bc80      	pop	{r7}
 8004414:	4770      	bx	lr

08004416 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	bc80      	pop	{r7}
 8004426:	4770      	bx	lr

08004428 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a29      	ldr	r2, [pc, #164]	; (80044e0 <TIM_Base_SetConfig+0xb8>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d00b      	beq.n	8004458 <TIM_Base_SetConfig+0x30>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004446:	d007      	beq.n	8004458 <TIM_Base_SetConfig+0x30>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a26      	ldr	r2, [pc, #152]	; (80044e4 <TIM_Base_SetConfig+0xbc>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d003      	beq.n	8004458 <TIM_Base_SetConfig+0x30>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a25      	ldr	r2, [pc, #148]	; (80044e8 <TIM_Base_SetConfig+0xc0>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d108      	bne.n	800446a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800445e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	4313      	orrs	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a1c      	ldr	r2, [pc, #112]	; (80044e0 <TIM_Base_SetConfig+0xb8>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d00b      	beq.n	800448a <TIM_Base_SetConfig+0x62>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004478:	d007      	beq.n	800448a <TIM_Base_SetConfig+0x62>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a19      	ldr	r2, [pc, #100]	; (80044e4 <TIM_Base_SetConfig+0xbc>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d003      	beq.n	800448a <TIM_Base_SetConfig+0x62>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a18      	ldr	r2, [pc, #96]	; (80044e8 <TIM_Base_SetConfig+0xc0>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d108      	bne.n	800449c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004490:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	4313      	orrs	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	689a      	ldr	r2, [r3, #8]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a07      	ldr	r2, [pc, #28]	; (80044e0 <TIM_Base_SetConfig+0xb8>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d103      	bne.n	80044d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	691a      	ldr	r2, [r3, #16]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	615a      	str	r2, [r3, #20]
}
 80044d6:	bf00      	nop
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	bc80      	pop	{r7}
 80044de:	4770      	bx	lr
 80044e0:	40012c00 	.word	0x40012c00
 80044e4:	40000400 	.word	0x40000400
 80044e8:	40000800 	.word	0x40000800

080044ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	f023 0201 	bic.w	r2, r3, #1
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800451a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f023 0303 	bic.w	r3, r3, #3
 8004522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	4313      	orrs	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f023 0302 	bic.w	r3, r3, #2
 8004534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	4313      	orrs	r3, r2
 800453e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a1c      	ldr	r2, [pc, #112]	; (80045b4 <TIM_OC1_SetConfig+0xc8>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d10c      	bne.n	8004562 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f023 0308 	bic.w	r3, r3, #8
 800454e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	4313      	orrs	r3, r2
 8004558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	f023 0304 	bic.w	r3, r3, #4
 8004560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a13      	ldr	r2, [pc, #76]	; (80045b4 <TIM_OC1_SetConfig+0xc8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d111      	bne.n	800458e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004570:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004578:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4313      	orrs	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	4313      	orrs	r3, r2
 800458c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	621a      	str	r2, [r3, #32]
}
 80045a8:	bf00      	nop
 80045aa:	371c      	adds	r7, #28
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bc80      	pop	{r7}
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	40012c00 	.word	0x40012c00

080045b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	f023 0210 	bic.w	r2, r3, #16
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	021b      	lsls	r3, r3, #8
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f023 0320 	bic.w	r3, r3, #32
 8004602:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	011b      	lsls	r3, r3, #4
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	4313      	orrs	r3, r2
 800460e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a1d      	ldr	r2, [pc, #116]	; (8004688 <TIM_OC2_SetConfig+0xd0>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d10d      	bne.n	8004634 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800461e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	011b      	lsls	r3, r3, #4
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	4313      	orrs	r3, r2
 800462a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004632:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a14      	ldr	r2, [pc, #80]	; (8004688 <TIM_OC2_SetConfig+0xd0>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d113      	bne.n	8004664 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004642:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800464a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	4313      	orrs	r3, r2
 8004656:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	4313      	orrs	r3, r2
 8004662:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	621a      	str	r2, [r3, #32]
}
 800467e:	bf00      	nop
 8004680:	371c      	adds	r7, #28
 8004682:	46bd      	mov	sp, r7
 8004684:	bc80      	pop	{r7}
 8004686:	4770      	bx	lr
 8004688:	40012c00 	.word	0x40012c00

0800468c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f023 0303 	bic.w	r3, r3, #3
 80046c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	021b      	lsls	r3, r3, #8
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	4313      	orrs	r3, r2
 80046e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a1d      	ldr	r2, [pc, #116]	; (800475c <TIM_OC3_SetConfig+0xd0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d10d      	bne.n	8004706 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	021b      	lsls	r3, r3, #8
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004704:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a14      	ldr	r2, [pc, #80]	; (800475c <TIM_OC3_SetConfig+0xd0>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d113      	bne.n	8004736 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800471c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	011b      	lsls	r3, r3, #4
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	4313      	orrs	r3, r2
 8004728:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	4313      	orrs	r3, r2
 8004734:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	621a      	str	r2, [r3, #32]
}
 8004750:	bf00      	nop
 8004752:	371c      	adds	r7, #28
 8004754:	46bd      	mov	sp, r7
 8004756:	bc80      	pop	{r7}
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	40012c00 	.word	0x40012c00

08004760 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004760:	b480      	push	{r7}
 8004762:	b087      	sub	sp, #28
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800478e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004796:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	021b      	lsls	r3, r3, #8
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	031b      	lsls	r3, r3, #12
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a0f      	ldr	r2, [pc, #60]	; (80047f8 <TIM_OC4_SetConfig+0x98>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d109      	bne.n	80047d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	019b      	lsls	r3, r3, #6
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	621a      	str	r2, [r3, #32]
}
 80047ee:	bf00      	nop
 80047f0:	371c      	adds	r7, #28
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bc80      	pop	{r7}
 80047f6:	4770      	bx	lr
 80047f8:	40012c00 	.word	0x40012c00

080047fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b087      	sub	sp, #28
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	f023 0201 	bic.w	r2, r3, #1
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	011b      	lsls	r3, r3, #4
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	4313      	orrs	r3, r2
 8004830:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	f023 030a 	bic.w	r3, r3, #10
 8004838:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	4313      	orrs	r3, r2
 8004840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	621a      	str	r2, [r3, #32]
}
 800484e:	bf00      	nop
 8004850:	371c      	adds	r7, #28
 8004852:	46bd      	mov	sp, r7
 8004854:	bc80      	pop	{r7}
 8004856:	4770      	bx	lr

08004858 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004858:	b480      	push	{r7}
 800485a:	b087      	sub	sp, #28
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	f023 0210 	bic.w	r2, r3, #16
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004882:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	031b      	lsls	r3, r3, #12
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	4313      	orrs	r3, r2
 800488c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004894:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	011b      	lsls	r3, r3, #4
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	4313      	orrs	r3, r2
 800489e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	621a      	str	r2, [r3, #32]
}
 80048ac:	bf00      	nop
 80048ae:	371c      	adds	r7, #28
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bc80      	pop	{r7}
 80048b4:	4770      	bx	lr

080048b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b085      	sub	sp, #20
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
 80048be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	f043 0307 	orr.w	r3, r3, #7
 80048d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	609a      	str	r2, [r3, #8]
}
 80048e0:	bf00      	nop
 80048e2:	3714      	adds	r7, #20
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bc80      	pop	{r7}
 80048e8:	4770      	bx	lr

080048ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b087      	sub	sp, #28
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	60f8      	str	r0, [r7, #12]
 80048f2:	60b9      	str	r1, [r7, #8]
 80048f4:	607a      	str	r2, [r7, #4]
 80048f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004904:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	021a      	lsls	r2, r3, #8
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	431a      	orrs	r2, r3
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	4313      	orrs	r3, r2
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	4313      	orrs	r3, r2
 8004916:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	609a      	str	r2, [r3, #8]
}
 800491e:	bf00      	nop
 8004920:	371c      	adds	r7, #28
 8004922:	46bd      	mov	sp, r7
 8004924:	bc80      	pop	{r7}
 8004926:	4770      	bx	lr

08004928 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004938:	2b01      	cmp	r3, #1
 800493a:	d101      	bne.n	8004940 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800493c:	2302      	movs	r3, #2
 800493e:	e046      	b.n	80049ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004966:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	4313      	orrs	r3, r2
 8004970:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a16      	ldr	r2, [pc, #88]	; (80049d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d00e      	beq.n	80049a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800498c:	d009      	beq.n	80049a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a12      	ldr	r2, [pc, #72]	; (80049dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d004      	beq.n	80049a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a10      	ldr	r2, [pc, #64]	; (80049e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d10c      	bne.n	80049bc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bc80      	pop	{r7}
 80049d6:	4770      	bx	lr
 80049d8:	40012c00 	.word	0x40012c00
 80049dc:	40000400 	.word	0x40000400
 80049e0:	40000800 	.word	0x40000800

080049e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d101      	bne.n	8004a00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80049fc:	2302      	movs	r3, #2
 80049fe:	e03d      	b.n	8004a7c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bc80      	pop	{r7}
 8004a84:	4770      	bx	lr

08004a86 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a8e:	bf00      	nop
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bc80      	pop	{r7}
 8004a96:	4770      	bx	lr

08004a98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bc80      	pop	{r7}
 8004aa8:	4770      	bx	lr
	...

08004aac <__errno>:
 8004aac:	4b01      	ldr	r3, [pc, #4]	; (8004ab4 <__errno+0x8>)
 8004aae:	6818      	ldr	r0, [r3, #0]
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	20000020 	.word	0x20000020

08004ab8 <__libc_init_array>:
 8004ab8:	b570      	push	{r4, r5, r6, lr}
 8004aba:	2600      	movs	r6, #0
 8004abc:	4d0c      	ldr	r5, [pc, #48]	; (8004af0 <__libc_init_array+0x38>)
 8004abe:	4c0d      	ldr	r4, [pc, #52]	; (8004af4 <__libc_init_array+0x3c>)
 8004ac0:	1b64      	subs	r4, r4, r5
 8004ac2:	10a4      	asrs	r4, r4, #2
 8004ac4:	42a6      	cmp	r6, r4
 8004ac6:	d109      	bne.n	8004adc <__libc_init_array+0x24>
 8004ac8:	f000 fc9c 	bl	8005404 <_init>
 8004acc:	2600      	movs	r6, #0
 8004ace:	4d0a      	ldr	r5, [pc, #40]	; (8004af8 <__libc_init_array+0x40>)
 8004ad0:	4c0a      	ldr	r4, [pc, #40]	; (8004afc <__libc_init_array+0x44>)
 8004ad2:	1b64      	subs	r4, r4, r5
 8004ad4:	10a4      	asrs	r4, r4, #2
 8004ad6:	42a6      	cmp	r6, r4
 8004ad8:	d105      	bne.n	8004ae6 <__libc_init_array+0x2e>
 8004ada:	bd70      	pop	{r4, r5, r6, pc}
 8004adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ae0:	4798      	blx	r3
 8004ae2:	3601      	adds	r6, #1
 8004ae4:	e7ee      	b.n	8004ac4 <__libc_init_array+0xc>
 8004ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aea:	4798      	blx	r3
 8004aec:	3601      	adds	r6, #1
 8004aee:	e7f2      	b.n	8004ad6 <__libc_init_array+0x1e>
 8004af0:	080063d4 	.word	0x080063d4
 8004af4:	080063d4 	.word	0x080063d4
 8004af8:	080063d4 	.word	0x080063d4
 8004afc:	080063d8 	.word	0x080063d8

08004b00 <memcpy>:
 8004b00:	440a      	add	r2, r1
 8004b02:	4291      	cmp	r1, r2
 8004b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b08:	d100      	bne.n	8004b0c <memcpy+0xc>
 8004b0a:	4770      	bx	lr
 8004b0c:	b510      	push	{r4, lr}
 8004b0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b12:	4291      	cmp	r1, r2
 8004b14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b18:	d1f9      	bne.n	8004b0e <memcpy+0xe>
 8004b1a:	bd10      	pop	{r4, pc}

08004b1c <memmove>:
 8004b1c:	4288      	cmp	r0, r1
 8004b1e:	b510      	push	{r4, lr}
 8004b20:	eb01 0402 	add.w	r4, r1, r2
 8004b24:	d902      	bls.n	8004b2c <memmove+0x10>
 8004b26:	4284      	cmp	r4, r0
 8004b28:	4623      	mov	r3, r4
 8004b2a:	d807      	bhi.n	8004b3c <memmove+0x20>
 8004b2c:	1e43      	subs	r3, r0, #1
 8004b2e:	42a1      	cmp	r1, r4
 8004b30:	d008      	beq.n	8004b44 <memmove+0x28>
 8004b32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b3a:	e7f8      	b.n	8004b2e <memmove+0x12>
 8004b3c:	4601      	mov	r1, r0
 8004b3e:	4402      	add	r2, r0
 8004b40:	428a      	cmp	r2, r1
 8004b42:	d100      	bne.n	8004b46 <memmove+0x2a>
 8004b44:	bd10      	pop	{r4, pc}
 8004b46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b4e:	e7f7      	b.n	8004b40 <memmove+0x24>

08004b50 <memset>:
 8004b50:	4603      	mov	r3, r0
 8004b52:	4402      	add	r2, r0
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d100      	bne.n	8004b5a <memset+0xa>
 8004b58:	4770      	bx	lr
 8004b5a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b5e:	e7f9      	b.n	8004b54 <memset+0x4>

08004b60 <siprintf>:
 8004b60:	b40e      	push	{r1, r2, r3}
 8004b62:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b66:	b500      	push	{lr}
 8004b68:	b09c      	sub	sp, #112	; 0x70
 8004b6a:	ab1d      	add	r3, sp, #116	; 0x74
 8004b6c:	9002      	str	r0, [sp, #8]
 8004b6e:	9006      	str	r0, [sp, #24]
 8004b70:	9107      	str	r1, [sp, #28]
 8004b72:	9104      	str	r1, [sp, #16]
 8004b74:	4808      	ldr	r0, [pc, #32]	; (8004b98 <siprintf+0x38>)
 8004b76:	4909      	ldr	r1, [pc, #36]	; (8004b9c <siprintf+0x3c>)
 8004b78:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b7c:	9105      	str	r1, [sp, #20]
 8004b7e:	6800      	ldr	r0, [r0, #0]
 8004b80:	a902      	add	r1, sp, #8
 8004b82:	9301      	str	r3, [sp, #4]
 8004b84:	f000 f868 	bl	8004c58 <_svfiprintf_r>
 8004b88:	2200      	movs	r2, #0
 8004b8a:	9b02      	ldr	r3, [sp, #8]
 8004b8c:	701a      	strb	r2, [r3, #0]
 8004b8e:	b01c      	add	sp, #112	; 0x70
 8004b90:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b94:	b003      	add	sp, #12
 8004b96:	4770      	bx	lr
 8004b98:	20000020 	.word	0x20000020
 8004b9c:	ffff0208 	.word	0xffff0208

08004ba0 <__ssputs_r>:
 8004ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ba4:	688e      	ldr	r6, [r1, #8]
 8004ba6:	4682      	mov	sl, r0
 8004ba8:	429e      	cmp	r6, r3
 8004baa:	460c      	mov	r4, r1
 8004bac:	4690      	mov	r8, r2
 8004bae:	461f      	mov	r7, r3
 8004bb0:	d838      	bhi.n	8004c24 <__ssputs_r+0x84>
 8004bb2:	898a      	ldrh	r2, [r1, #12]
 8004bb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004bb8:	d032      	beq.n	8004c20 <__ssputs_r+0x80>
 8004bba:	6825      	ldr	r5, [r4, #0]
 8004bbc:	6909      	ldr	r1, [r1, #16]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	eba5 0901 	sub.w	r9, r5, r1
 8004bc4:	6965      	ldr	r5, [r4, #20]
 8004bc6:	444b      	add	r3, r9
 8004bc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004bcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004bd0:	106d      	asrs	r5, r5, #1
 8004bd2:	429d      	cmp	r5, r3
 8004bd4:	bf38      	it	cc
 8004bd6:	461d      	movcc	r5, r3
 8004bd8:	0553      	lsls	r3, r2, #21
 8004bda:	d531      	bpl.n	8004c40 <__ssputs_r+0xa0>
 8004bdc:	4629      	mov	r1, r5
 8004bde:	f000 fb47 	bl	8005270 <_malloc_r>
 8004be2:	4606      	mov	r6, r0
 8004be4:	b950      	cbnz	r0, 8004bfc <__ssputs_r+0x5c>
 8004be6:	230c      	movs	r3, #12
 8004be8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bec:	f8ca 3000 	str.w	r3, [sl]
 8004bf0:	89a3      	ldrh	r3, [r4, #12]
 8004bf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bf6:	81a3      	strh	r3, [r4, #12]
 8004bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bfc:	464a      	mov	r2, r9
 8004bfe:	6921      	ldr	r1, [r4, #16]
 8004c00:	f7ff ff7e 	bl	8004b00 <memcpy>
 8004c04:	89a3      	ldrh	r3, [r4, #12]
 8004c06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c0e:	81a3      	strh	r3, [r4, #12]
 8004c10:	6126      	str	r6, [r4, #16]
 8004c12:	444e      	add	r6, r9
 8004c14:	6026      	str	r6, [r4, #0]
 8004c16:	463e      	mov	r6, r7
 8004c18:	6165      	str	r5, [r4, #20]
 8004c1a:	eba5 0509 	sub.w	r5, r5, r9
 8004c1e:	60a5      	str	r5, [r4, #8]
 8004c20:	42be      	cmp	r6, r7
 8004c22:	d900      	bls.n	8004c26 <__ssputs_r+0x86>
 8004c24:	463e      	mov	r6, r7
 8004c26:	4632      	mov	r2, r6
 8004c28:	4641      	mov	r1, r8
 8004c2a:	6820      	ldr	r0, [r4, #0]
 8004c2c:	f7ff ff76 	bl	8004b1c <memmove>
 8004c30:	68a3      	ldr	r3, [r4, #8]
 8004c32:	2000      	movs	r0, #0
 8004c34:	1b9b      	subs	r3, r3, r6
 8004c36:	60a3      	str	r3, [r4, #8]
 8004c38:	6823      	ldr	r3, [r4, #0]
 8004c3a:	4433      	add	r3, r6
 8004c3c:	6023      	str	r3, [r4, #0]
 8004c3e:	e7db      	b.n	8004bf8 <__ssputs_r+0x58>
 8004c40:	462a      	mov	r2, r5
 8004c42:	f000 fb89 	bl	8005358 <_realloc_r>
 8004c46:	4606      	mov	r6, r0
 8004c48:	2800      	cmp	r0, #0
 8004c4a:	d1e1      	bne.n	8004c10 <__ssputs_r+0x70>
 8004c4c:	4650      	mov	r0, sl
 8004c4e:	6921      	ldr	r1, [r4, #16]
 8004c50:	f000 faa6 	bl	80051a0 <_free_r>
 8004c54:	e7c7      	b.n	8004be6 <__ssputs_r+0x46>
	...

08004c58 <_svfiprintf_r>:
 8004c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c5c:	4698      	mov	r8, r3
 8004c5e:	898b      	ldrh	r3, [r1, #12]
 8004c60:	4607      	mov	r7, r0
 8004c62:	061b      	lsls	r3, r3, #24
 8004c64:	460d      	mov	r5, r1
 8004c66:	4614      	mov	r4, r2
 8004c68:	b09d      	sub	sp, #116	; 0x74
 8004c6a:	d50e      	bpl.n	8004c8a <_svfiprintf_r+0x32>
 8004c6c:	690b      	ldr	r3, [r1, #16]
 8004c6e:	b963      	cbnz	r3, 8004c8a <_svfiprintf_r+0x32>
 8004c70:	2140      	movs	r1, #64	; 0x40
 8004c72:	f000 fafd 	bl	8005270 <_malloc_r>
 8004c76:	6028      	str	r0, [r5, #0]
 8004c78:	6128      	str	r0, [r5, #16]
 8004c7a:	b920      	cbnz	r0, 8004c86 <_svfiprintf_r+0x2e>
 8004c7c:	230c      	movs	r3, #12
 8004c7e:	603b      	str	r3, [r7, #0]
 8004c80:	f04f 30ff 	mov.w	r0, #4294967295
 8004c84:	e0d1      	b.n	8004e2a <_svfiprintf_r+0x1d2>
 8004c86:	2340      	movs	r3, #64	; 0x40
 8004c88:	616b      	str	r3, [r5, #20]
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8004c8e:	2320      	movs	r3, #32
 8004c90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c94:	2330      	movs	r3, #48	; 0x30
 8004c96:	f04f 0901 	mov.w	r9, #1
 8004c9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c9e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004e44 <_svfiprintf_r+0x1ec>
 8004ca2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ca6:	4623      	mov	r3, r4
 8004ca8:	469a      	mov	sl, r3
 8004caa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cae:	b10a      	cbz	r2, 8004cb4 <_svfiprintf_r+0x5c>
 8004cb0:	2a25      	cmp	r2, #37	; 0x25
 8004cb2:	d1f9      	bne.n	8004ca8 <_svfiprintf_r+0x50>
 8004cb4:	ebba 0b04 	subs.w	fp, sl, r4
 8004cb8:	d00b      	beq.n	8004cd2 <_svfiprintf_r+0x7a>
 8004cba:	465b      	mov	r3, fp
 8004cbc:	4622      	mov	r2, r4
 8004cbe:	4629      	mov	r1, r5
 8004cc0:	4638      	mov	r0, r7
 8004cc2:	f7ff ff6d 	bl	8004ba0 <__ssputs_r>
 8004cc6:	3001      	adds	r0, #1
 8004cc8:	f000 80aa 	beq.w	8004e20 <_svfiprintf_r+0x1c8>
 8004ccc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cce:	445a      	add	r2, fp
 8004cd0:	9209      	str	r2, [sp, #36]	; 0x24
 8004cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	f000 80a2 	beq.w	8004e20 <_svfiprintf_r+0x1c8>
 8004cdc:	2300      	movs	r3, #0
 8004cde:	f04f 32ff 	mov.w	r2, #4294967295
 8004ce2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ce6:	f10a 0a01 	add.w	sl, sl, #1
 8004cea:	9304      	str	r3, [sp, #16]
 8004cec:	9307      	str	r3, [sp, #28]
 8004cee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004cf2:	931a      	str	r3, [sp, #104]	; 0x68
 8004cf4:	4654      	mov	r4, sl
 8004cf6:	2205      	movs	r2, #5
 8004cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cfc:	4851      	ldr	r0, [pc, #324]	; (8004e44 <_svfiprintf_r+0x1ec>)
 8004cfe:	f000 fa41 	bl	8005184 <memchr>
 8004d02:	9a04      	ldr	r2, [sp, #16]
 8004d04:	b9d8      	cbnz	r0, 8004d3e <_svfiprintf_r+0xe6>
 8004d06:	06d0      	lsls	r0, r2, #27
 8004d08:	bf44      	itt	mi
 8004d0a:	2320      	movmi	r3, #32
 8004d0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d10:	0711      	lsls	r1, r2, #28
 8004d12:	bf44      	itt	mi
 8004d14:	232b      	movmi	r3, #43	; 0x2b
 8004d16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d1a:	f89a 3000 	ldrb.w	r3, [sl]
 8004d1e:	2b2a      	cmp	r3, #42	; 0x2a
 8004d20:	d015      	beq.n	8004d4e <_svfiprintf_r+0xf6>
 8004d22:	4654      	mov	r4, sl
 8004d24:	2000      	movs	r0, #0
 8004d26:	f04f 0c0a 	mov.w	ip, #10
 8004d2a:	9a07      	ldr	r2, [sp, #28]
 8004d2c:	4621      	mov	r1, r4
 8004d2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d32:	3b30      	subs	r3, #48	; 0x30
 8004d34:	2b09      	cmp	r3, #9
 8004d36:	d94e      	bls.n	8004dd6 <_svfiprintf_r+0x17e>
 8004d38:	b1b0      	cbz	r0, 8004d68 <_svfiprintf_r+0x110>
 8004d3a:	9207      	str	r2, [sp, #28]
 8004d3c:	e014      	b.n	8004d68 <_svfiprintf_r+0x110>
 8004d3e:	eba0 0308 	sub.w	r3, r0, r8
 8004d42:	fa09 f303 	lsl.w	r3, r9, r3
 8004d46:	4313      	orrs	r3, r2
 8004d48:	46a2      	mov	sl, r4
 8004d4a:	9304      	str	r3, [sp, #16]
 8004d4c:	e7d2      	b.n	8004cf4 <_svfiprintf_r+0x9c>
 8004d4e:	9b03      	ldr	r3, [sp, #12]
 8004d50:	1d19      	adds	r1, r3, #4
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	9103      	str	r1, [sp, #12]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	bfbb      	ittet	lt
 8004d5a:	425b      	neglt	r3, r3
 8004d5c:	f042 0202 	orrlt.w	r2, r2, #2
 8004d60:	9307      	strge	r3, [sp, #28]
 8004d62:	9307      	strlt	r3, [sp, #28]
 8004d64:	bfb8      	it	lt
 8004d66:	9204      	strlt	r2, [sp, #16]
 8004d68:	7823      	ldrb	r3, [r4, #0]
 8004d6a:	2b2e      	cmp	r3, #46	; 0x2e
 8004d6c:	d10c      	bne.n	8004d88 <_svfiprintf_r+0x130>
 8004d6e:	7863      	ldrb	r3, [r4, #1]
 8004d70:	2b2a      	cmp	r3, #42	; 0x2a
 8004d72:	d135      	bne.n	8004de0 <_svfiprintf_r+0x188>
 8004d74:	9b03      	ldr	r3, [sp, #12]
 8004d76:	3402      	adds	r4, #2
 8004d78:	1d1a      	adds	r2, r3, #4
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	9203      	str	r2, [sp, #12]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	bfb8      	it	lt
 8004d82:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d86:	9305      	str	r3, [sp, #20]
 8004d88:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004e48 <_svfiprintf_r+0x1f0>
 8004d8c:	2203      	movs	r2, #3
 8004d8e:	4650      	mov	r0, sl
 8004d90:	7821      	ldrb	r1, [r4, #0]
 8004d92:	f000 f9f7 	bl	8005184 <memchr>
 8004d96:	b140      	cbz	r0, 8004daa <_svfiprintf_r+0x152>
 8004d98:	2340      	movs	r3, #64	; 0x40
 8004d9a:	eba0 000a 	sub.w	r0, r0, sl
 8004d9e:	fa03 f000 	lsl.w	r0, r3, r0
 8004da2:	9b04      	ldr	r3, [sp, #16]
 8004da4:	3401      	adds	r4, #1
 8004da6:	4303      	orrs	r3, r0
 8004da8:	9304      	str	r3, [sp, #16]
 8004daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dae:	2206      	movs	r2, #6
 8004db0:	4826      	ldr	r0, [pc, #152]	; (8004e4c <_svfiprintf_r+0x1f4>)
 8004db2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004db6:	f000 f9e5 	bl	8005184 <memchr>
 8004dba:	2800      	cmp	r0, #0
 8004dbc:	d038      	beq.n	8004e30 <_svfiprintf_r+0x1d8>
 8004dbe:	4b24      	ldr	r3, [pc, #144]	; (8004e50 <_svfiprintf_r+0x1f8>)
 8004dc0:	bb1b      	cbnz	r3, 8004e0a <_svfiprintf_r+0x1b2>
 8004dc2:	9b03      	ldr	r3, [sp, #12]
 8004dc4:	3307      	adds	r3, #7
 8004dc6:	f023 0307 	bic.w	r3, r3, #7
 8004dca:	3308      	adds	r3, #8
 8004dcc:	9303      	str	r3, [sp, #12]
 8004dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dd0:	4433      	add	r3, r6
 8004dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8004dd4:	e767      	b.n	8004ca6 <_svfiprintf_r+0x4e>
 8004dd6:	460c      	mov	r4, r1
 8004dd8:	2001      	movs	r0, #1
 8004dda:	fb0c 3202 	mla	r2, ip, r2, r3
 8004dde:	e7a5      	b.n	8004d2c <_svfiprintf_r+0xd4>
 8004de0:	2300      	movs	r3, #0
 8004de2:	f04f 0c0a 	mov.w	ip, #10
 8004de6:	4619      	mov	r1, r3
 8004de8:	3401      	adds	r4, #1
 8004dea:	9305      	str	r3, [sp, #20]
 8004dec:	4620      	mov	r0, r4
 8004dee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004df2:	3a30      	subs	r2, #48	; 0x30
 8004df4:	2a09      	cmp	r2, #9
 8004df6:	d903      	bls.n	8004e00 <_svfiprintf_r+0x1a8>
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d0c5      	beq.n	8004d88 <_svfiprintf_r+0x130>
 8004dfc:	9105      	str	r1, [sp, #20]
 8004dfe:	e7c3      	b.n	8004d88 <_svfiprintf_r+0x130>
 8004e00:	4604      	mov	r4, r0
 8004e02:	2301      	movs	r3, #1
 8004e04:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e08:	e7f0      	b.n	8004dec <_svfiprintf_r+0x194>
 8004e0a:	ab03      	add	r3, sp, #12
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	462a      	mov	r2, r5
 8004e10:	4638      	mov	r0, r7
 8004e12:	4b10      	ldr	r3, [pc, #64]	; (8004e54 <_svfiprintf_r+0x1fc>)
 8004e14:	a904      	add	r1, sp, #16
 8004e16:	f3af 8000 	nop.w
 8004e1a:	1c42      	adds	r2, r0, #1
 8004e1c:	4606      	mov	r6, r0
 8004e1e:	d1d6      	bne.n	8004dce <_svfiprintf_r+0x176>
 8004e20:	89ab      	ldrh	r3, [r5, #12]
 8004e22:	065b      	lsls	r3, r3, #25
 8004e24:	f53f af2c 	bmi.w	8004c80 <_svfiprintf_r+0x28>
 8004e28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e2a:	b01d      	add	sp, #116	; 0x74
 8004e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e30:	ab03      	add	r3, sp, #12
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	462a      	mov	r2, r5
 8004e36:	4638      	mov	r0, r7
 8004e38:	4b06      	ldr	r3, [pc, #24]	; (8004e54 <_svfiprintf_r+0x1fc>)
 8004e3a:	a904      	add	r1, sp, #16
 8004e3c:	f000 f87c 	bl	8004f38 <_printf_i>
 8004e40:	e7eb      	b.n	8004e1a <_svfiprintf_r+0x1c2>
 8004e42:	bf00      	nop
 8004e44:	080063a0 	.word	0x080063a0
 8004e48:	080063a6 	.word	0x080063a6
 8004e4c:	080063aa 	.word	0x080063aa
 8004e50:	00000000 	.word	0x00000000
 8004e54:	08004ba1 	.word	0x08004ba1

08004e58 <_printf_common>:
 8004e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e5c:	4616      	mov	r6, r2
 8004e5e:	4699      	mov	r9, r3
 8004e60:	688a      	ldr	r2, [r1, #8]
 8004e62:	690b      	ldr	r3, [r1, #16]
 8004e64:	4607      	mov	r7, r0
 8004e66:	4293      	cmp	r3, r2
 8004e68:	bfb8      	it	lt
 8004e6a:	4613      	movlt	r3, r2
 8004e6c:	6033      	str	r3, [r6, #0]
 8004e6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e72:	460c      	mov	r4, r1
 8004e74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e78:	b10a      	cbz	r2, 8004e7e <_printf_common+0x26>
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	6033      	str	r3, [r6, #0]
 8004e7e:	6823      	ldr	r3, [r4, #0]
 8004e80:	0699      	lsls	r1, r3, #26
 8004e82:	bf42      	ittt	mi
 8004e84:	6833      	ldrmi	r3, [r6, #0]
 8004e86:	3302      	addmi	r3, #2
 8004e88:	6033      	strmi	r3, [r6, #0]
 8004e8a:	6825      	ldr	r5, [r4, #0]
 8004e8c:	f015 0506 	ands.w	r5, r5, #6
 8004e90:	d106      	bne.n	8004ea0 <_printf_common+0x48>
 8004e92:	f104 0a19 	add.w	sl, r4, #25
 8004e96:	68e3      	ldr	r3, [r4, #12]
 8004e98:	6832      	ldr	r2, [r6, #0]
 8004e9a:	1a9b      	subs	r3, r3, r2
 8004e9c:	42ab      	cmp	r3, r5
 8004e9e:	dc28      	bgt.n	8004ef2 <_printf_common+0x9a>
 8004ea0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ea4:	1e13      	subs	r3, r2, #0
 8004ea6:	6822      	ldr	r2, [r4, #0]
 8004ea8:	bf18      	it	ne
 8004eaa:	2301      	movne	r3, #1
 8004eac:	0692      	lsls	r2, r2, #26
 8004eae:	d42d      	bmi.n	8004f0c <_printf_common+0xb4>
 8004eb0:	4649      	mov	r1, r9
 8004eb2:	4638      	mov	r0, r7
 8004eb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004eb8:	47c0      	blx	r8
 8004eba:	3001      	adds	r0, #1
 8004ebc:	d020      	beq.n	8004f00 <_printf_common+0xa8>
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	68e5      	ldr	r5, [r4, #12]
 8004ec2:	f003 0306 	and.w	r3, r3, #6
 8004ec6:	2b04      	cmp	r3, #4
 8004ec8:	bf18      	it	ne
 8004eca:	2500      	movne	r5, #0
 8004ecc:	6832      	ldr	r2, [r6, #0]
 8004ece:	f04f 0600 	mov.w	r6, #0
 8004ed2:	68a3      	ldr	r3, [r4, #8]
 8004ed4:	bf08      	it	eq
 8004ed6:	1aad      	subeq	r5, r5, r2
 8004ed8:	6922      	ldr	r2, [r4, #16]
 8004eda:	bf08      	it	eq
 8004edc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	bfc4      	itt	gt
 8004ee4:	1a9b      	subgt	r3, r3, r2
 8004ee6:	18ed      	addgt	r5, r5, r3
 8004ee8:	341a      	adds	r4, #26
 8004eea:	42b5      	cmp	r5, r6
 8004eec:	d11a      	bne.n	8004f24 <_printf_common+0xcc>
 8004eee:	2000      	movs	r0, #0
 8004ef0:	e008      	b.n	8004f04 <_printf_common+0xac>
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	4652      	mov	r2, sl
 8004ef6:	4649      	mov	r1, r9
 8004ef8:	4638      	mov	r0, r7
 8004efa:	47c0      	blx	r8
 8004efc:	3001      	adds	r0, #1
 8004efe:	d103      	bne.n	8004f08 <_printf_common+0xb0>
 8004f00:	f04f 30ff 	mov.w	r0, #4294967295
 8004f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f08:	3501      	adds	r5, #1
 8004f0a:	e7c4      	b.n	8004e96 <_printf_common+0x3e>
 8004f0c:	2030      	movs	r0, #48	; 0x30
 8004f0e:	18e1      	adds	r1, r4, r3
 8004f10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f14:	1c5a      	adds	r2, r3, #1
 8004f16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f1a:	4422      	add	r2, r4
 8004f1c:	3302      	adds	r3, #2
 8004f1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f22:	e7c5      	b.n	8004eb0 <_printf_common+0x58>
 8004f24:	2301      	movs	r3, #1
 8004f26:	4622      	mov	r2, r4
 8004f28:	4649      	mov	r1, r9
 8004f2a:	4638      	mov	r0, r7
 8004f2c:	47c0      	blx	r8
 8004f2e:	3001      	adds	r0, #1
 8004f30:	d0e6      	beq.n	8004f00 <_printf_common+0xa8>
 8004f32:	3601      	adds	r6, #1
 8004f34:	e7d9      	b.n	8004eea <_printf_common+0x92>
	...

08004f38 <_printf_i>:
 8004f38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f3c:	7e0f      	ldrb	r7, [r1, #24]
 8004f3e:	4691      	mov	r9, r2
 8004f40:	2f78      	cmp	r7, #120	; 0x78
 8004f42:	4680      	mov	r8, r0
 8004f44:	460c      	mov	r4, r1
 8004f46:	469a      	mov	sl, r3
 8004f48:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f4e:	d807      	bhi.n	8004f60 <_printf_i+0x28>
 8004f50:	2f62      	cmp	r7, #98	; 0x62
 8004f52:	d80a      	bhi.n	8004f6a <_printf_i+0x32>
 8004f54:	2f00      	cmp	r7, #0
 8004f56:	f000 80d9 	beq.w	800510c <_printf_i+0x1d4>
 8004f5a:	2f58      	cmp	r7, #88	; 0x58
 8004f5c:	f000 80a4 	beq.w	80050a8 <_printf_i+0x170>
 8004f60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f68:	e03a      	b.n	8004fe0 <_printf_i+0xa8>
 8004f6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f6e:	2b15      	cmp	r3, #21
 8004f70:	d8f6      	bhi.n	8004f60 <_printf_i+0x28>
 8004f72:	a101      	add	r1, pc, #4	; (adr r1, 8004f78 <_printf_i+0x40>)
 8004f74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f78:	08004fd1 	.word	0x08004fd1
 8004f7c:	08004fe5 	.word	0x08004fe5
 8004f80:	08004f61 	.word	0x08004f61
 8004f84:	08004f61 	.word	0x08004f61
 8004f88:	08004f61 	.word	0x08004f61
 8004f8c:	08004f61 	.word	0x08004f61
 8004f90:	08004fe5 	.word	0x08004fe5
 8004f94:	08004f61 	.word	0x08004f61
 8004f98:	08004f61 	.word	0x08004f61
 8004f9c:	08004f61 	.word	0x08004f61
 8004fa0:	08004f61 	.word	0x08004f61
 8004fa4:	080050f3 	.word	0x080050f3
 8004fa8:	08005015 	.word	0x08005015
 8004fac:	080050d5 	.word	0x080050d5
 8004fb0:	08004f61 	.word	0x08004f61
 8004fb4:	08004f61 	.word	0x08004f61
 8004fb8:	08005115 	.word	0x08005115
 8004fbc:	08004f61 	.word	0x08004f61
 8004fc0:	08005015 	.word	0x08005015
 8004fc4:	08004f61 	.word	0x08004f61
 8004fc8:	08004f61 	.word	0x08004f61
 8004fcc:	080050dd 	.word	0x080050dd
 8004fd0:	682b      	ldr	r3, [r5, #0]
 8004fd2:	1d1a      	adds	r2, r3, #4
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	602a      	str	r2, [r5, #0]
 8004fd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e0a4      	b.n	800512e <_printf_i+0x1f6>
 8004fe4:	6820      	ldr	r0, [r4, #0]
 8004fe6:	6829      	ldr	r1, [r5, #0]
 8004fe8:	0606      	lsls	r6, r0, #24
 8004fea:	f101 0304 	add.w	r3, r1, #4
 8004fee:	d50a      	bpl.n	8005006 <_printf_i+0xce>
 8004ff0:	680e      	ldr	r6, [r1, #0]
 8004ff2:	602b      	str	r3, [r5, #0]
 8004ff4:	2e00      	cmp	r6, #0
 8004ff6:	da03      	bge.n	8005000 <_printf_i+0xc8>
 8004ff8:	232d      	movs	r3, #45	; 0x2d
 8004ffa:	4276      	negs	r6, r6
 8004ffc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005000:	230a      	movs	r3, #10
 8005002:	485e      	ldr	r0, [pc, #376]	; (800517c <_printf_i+0x244>)
 8005004:	e019      	b.n	800503a <_printf_i+0x102>
 8005006:	680e      	ldr	r6, [r1, #0]
 8005008:	f010 0f40 	tst.w	r0, #64	; 0x40
 800500c:	602b      	str	r3, [r5, #0]
 800500e:	bf18      	it	ne
 8005010:	b236      	sxthne	r6, r6
 8005012:	e7ef      	b.n	8004ff4 <_printf_i+0xbc>
 8005014:	682b      	ldr	r3, [r5, #0]
 8005016:	6820      	ldr	r0, [r4, #0]
 8005018:	1d19      	adds	r1, r3, #4
 800501a:	6029      	str	r1, [r5, #0]
 800501c:	0601      	lsls	r1, r0, #24
 800501e:	d501      	bpl.n	8005024 <_printf_i+0xec>
 8005020:	681e      	ldr	r6, [r3, #0]
 8005022:	e002      	b.n	800502a <_printf_i+0xf2>
 8005024:	0646      	lsls	r6, r0, #25
 8005026:	d5fb      	bpl.n	8005020 <_printf_i+0xe8>
 8005028:	881e      	ldrh	r6, [r3, #0]
 800502a:	2f6f      	cmp	r7, #111	; 0x6f
 800502c:	bf0c      	ite	eq
 800502e:	2308      	moveq	r3, #8
 8005030:	230a      	movne	r3, #10
 8005032:	4852      	ldr	r0, [pc, #328]	; (800517c <_printf_i+0x244>)
 8005034:	2100      	movs	r1, #0
 8005036:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800503a:	6865      	ldr	r5, [r4, #4]
 800503c:	2d00      	cmp	r5, #0
 800503e:	bfa8      	it	ge
 8005040:	6821      	ldrge	r1, [r4, #0]
 8005042:	60a5      	str	r5, [r4, #8]
 8005044:	bfa4      	itt	ge
 8005046:	f021 0104 	bicge.w	r1, r1, #4
 800504a:	6021      	strge	r1, [r4, #0]
 800504c:	b90e      	cbnz	r6, 8005052 <_printf_i+0x11a>
 800504e:	2d00      	cmp	r5, #0
 8005050:	d04d      	beq.n	80050ee <_printf_i+0x1b6>
 8005052:	4615      	mov	r5, r2
 8005054:	fbb6 f1f3 	udiv	r1, r6, r3
 8005058:	fb03 6711 	mls	r7, r3, r1, r6
 800505c:	5dc7      	ldrb	r7, [r0, r7]
 800505e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005062:	4637      	mov	r7, r6
 8005064:	42bb      	cmp	r3, r7
 8005066:	460e      	mov	r6, r1
 8005068:	d9f4      	bls.n	8005054 <_printf_i+0x11c>
 800506a:	2b08      	cmp	r3, #8
 800506c:	d10b      	bne.n	8005086 <_printf_i+0x14e>
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	07de      	lsls	r6, r3, #31
 8005072:	d508      	bpl.n	8005086 <_printf_i+0x14e>
 8005074:	6923      	ldr	r3, [r4, #16]
 8005076:	6861      	ldr	r1, [r4, #4]
 8005078:	4299      	cmp	r1, r3
 800507a:	bfde      	ittt	le
 800507c:	2330      	movle	r3, #48	; 0x30
 800507e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005082:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005086:	1b52      	subs	r2, r2, r5
 8005088:	6122      	str	r2, [r4, #16]
 800508a:	464b      	mov	r3, r9
 800508c:	4621      	mov	r1, r4
 800508e:	4640      	mov	r0, r8
 8005090:	f8cd a000 	str.w	sl, [sp]
 8005094:	aa03      	add	r2, sp, #12
 8005096:	f7ff fedf 	bl	8004e58 <_printf_common>
 800509a:	3001      	adds	r0, #1
 800509c:	d14c      	bne.n	8005138 <_printf_i+0x200>
 800509e:	f04f 30ff 	mov.w	r0, #4294967295
 80050a2:	b004      	add	sp, #16
 80050a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050a8:	4834      	ldr	r0, [pc, #208]	; (800517c <_printf_i+0x244>)
 80050aa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80050ae:	6829      	ldr	r1, [r5, #0]
 80050b0:	6823      	ldr	r3, [r4, #0]
 80050b2:	f851 6b04 	ldr.w	r6, [r1], #4
 80050b6:	6029      	str	r1, [r5, #0]
 80050b8:	061d      	lsls	r5, r3, #24
 80050ba:	d514      	bpl.n	80050e6 <_printf_i+0x1ae>
 80050bc:	07df      	lsls	r7, r3, #31
 80050be:	bf44      	itt	mi
 80050c0:	f043 0320 	orrmi.w	r3, r3, #32
 80050c4:	6023      	strmi	r3, [r4, #0]
 80050c6:	b91e      	cbnz	r6, 80050d0 <_printf_i+0x198>
 80050c8:	6823      	ldr	r3, [r4, #0]
 80050ca:	f023 0320 	bic.w	r3, r3, #32
 80050ce:	6023      	str	r3, [r4, #0]
 80050d0:	2310      	movs	r3, #16
 80050d2:	e7af      	b.n	8005034 <_printf_i+0xfc>
 80050d4:	6823      	ldr	r3, [r4, #0]
 80050d6:	f043 0320 	orr.w	r3, r3, #32
 80050da:	6023      	str	r3, [r4, #0]
 80050dc:	2378      	movs	r3, #120	; 0x78
 80050de:	4828      	ldr	r0, [pc, #160]	; (8005180 <_printf_i+0x248>)
 80050e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050e4:	e7e3      	b.n	80050ae <_printf_i+0x176>
 80050e6:	0659      	lsls	r1, r3, #25
 80050e8:	bf48      	it	mi
 80050ea:	b2b6      	uxthmi	r6, r6
 80050ec:	e7e6      	b.n	80050bc <_printf_i+0x184>
 80050ee:	4615      	mov	r5, r2
 80050f0:	e7bb      	b.n	800506a <_printf_i+0x132>
 80050f2:	682b      	ldr	r3, [r5, #0]
 80050f4:	6826      	ldr	r6, [r4, #0]
 80050f6:	1d18      	adds	r0, r3, #4
 80050f8:	6961      	ldr	r1, [r4, #20]
 80050fa:	6028      	str	r0, [r5, #0]
 80050fc:	0635      	lsls	r5, r6, #24
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	d501      	bpl.n	8005106 <_printf_i+0x1ce>
 8005102:	6019      	str	r1, [r3, #0]
 8005104:	e002      	b.n	800510c <_printf_i+0x1d4>
 8005106:	0670      	lsls	r0, r6, #25
 8005108:	d5fb      	bpl.n	8005102 <_printf_i+0x1ca>
 800510a:	8019      	strh	r1, [r3, #0]
 800510c:	2300      	movs	r3, #0
 800510e:	4615      	mov	r5, r2
 8005110:	6123      	str	r3, [r4, #16]
 8005112:	e7ba      	b.n	800508a <_printf_i+0x152>
 8005114:	682b      	ldr	r3, [r5, #0]
 8005116:	2100      	movs	r1, #0
 8005118:	1d1a      	adds	r2, r3, #4
 800511a:	602a      	str	r2, [r5, #0]
 800511c:	681d      	ldr	r5, [r3, #0]
 800511e:	6862      	ldr	r2, [r4, #4]
 8005120:	4628      	mov	r0, r5
 8005122:	f000 f82f 	bl	8005184 <memchr>
 8005126:	b108      	cbz	r0, 800512c <_printf_i+0x1f4>
 8005128:	1b40      	subs	r0, r0, r5
 800512a:	6060      	str	r0, [r4, #4]
 800512c:	6863      	ldr	r3, [r4, #4]
 800512e:	6123      	str	r3, [r4, #16]
 8005130:	2300      	movs	r3, #0
 8005132:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005136:	e7a8      	b.n	800508a <_printf_i+0x152>
 8005138:	462a      	mov	r2, r5
 800513a:	4649      	mov	r1, r9
 800513c:	4640      	mov	r0, r8
 800513e:	6923      	ldr	r3, [r4, #16]
 8005140:	47d0      	blx	sl
 8005142:	3001      	adds	r0, #1
 8005144:	d0ab      	beq.n	800509e <_printf_i+0x166>
 8005146:	6823      	ldr	r3, [r4, #0]
 8005148:	079b      	lsls	r3, r3, #30
 800514a:	d413      	bmi.n	8005174 <_printf_i+0x23c>
 800514c:	68e0      	ldr	r0, [r4, #12]
 800514e:	9b03      	ldr	r3, [sp, #12]
 8005150:	4298      	cmp	r0, r3
 8005152:	bfb8      	it	lt
 8005154:	4618      	movlt	r0, r3
 8005156:	e7a4      	b.n	80050a2 <_printf_i+0x16a>
 8005158:	2301      	movs	r3, #1
 800515a:	4632      	mov	r2, r6
 800515c:	4649      	mov	r1, r9
 800515e:	4640      	mov	r0, r8
 8005160:	47d0      	blx	sl
 8005162:	3001      	adds	r0, #1
 8005164:	d09b      	beq.n	800509e <_printf_i+0x166>
 8005166:	3501      	adds	r5, #1
 8005168:	68e3      	ldr	r3, [r4, #12]
 800516a:	9903      	ldr	r1, [sp, #12]
 800516c:	1a5b      	subs	r3, r3, r1
 800516e:	42ab      	cmp	r3, r5
 8005170:	dcf2      	bgt.n	8005158 <_printf_i+0x220>
 8005172:	e7eb      	b.n	800514c <_printf_i+0x214>
 8005174:	2500      	movs	r5, #0
 8005176:	f104 0619 	add.w	r6, r4, #25
 800517a:	e7f5      	b.n	8005168 <_printf_i+0x230>
 800517c:	080063b1 	.word	0x080063b1
 8005180:	080063c2 	.word	0x080063c2

08005184 <memchr>:
 8005184:	4603      	mov	r3, r0
 8005186:	b510      	push	{r4, lr}
 8005188:	b2c9      	uxtb	r1, r1
 800518a:	4402      	add	r2, r0
 800518c:	4293      	cmp	r3, r2
 800518e:	4618      	mov	r0, r3
 8005190:	d101      	bne.n	8005196 <memchr+0x12>
 8005192:	2000      	movs	r0, #0
 8005194:	e003      	b.n	800519e <memchr+0x1a>
 8005196:	7804      	ldrb	r4, [r0, #0]
 8005198:	3301      	adds	r3, #1
 800519a:	428c      	cmp	r4, r1
 800519c:	d1f6      	bne.n	800518c <memchr+0x8>
 800519e:	bd10      	pop	{r4, pc}

080051a0 <_free_r>:
 80051a0:	b538      	push	{r3, r4, r5, lr}
 80051a2:	4605      	mov	r5, r0
 80051a4:	2900      	cmp	r1, #0
 80051a6:	d040      	beq.n	800522a <_free_r+0x8a>
 80051a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051ac:	1f0c      	subs	r4, r1, #4
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	bfb8      	it	lt
 80051b2:	18e4      	addlt	r4, r4, r3
 80051b4:	f000 f910 	bl	80053d8 <__malloc_lock>
 80051b8:	4a1c      	ldr	r2, [pc, #112]	; (800522c <_free_r+0x8c>)
 80051ba:	6813      	ldr	r3, [r2, #0]
 80051bc:	b933      	cbnz	r3, 80051cc <_free_r+0x2c>
 80051be:	6063      	str	r3, [r4, #4]
 80051c0:	6014      	str	r4, [r2, #0]
 80051c2:	4628      	mov	r0, r5
 80051c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051c8:	f000 b90c 	b.w	80053e4 <__malloc_unlock>
 80051cc:	42a3      	cmp	r3, r4
 80051ce:	d908      	bls.n	80051e2 <_free_r+0x42>
 80051d0:	6820      	ldr	r0, [r4, #0]
 80051d2:	1821      	adds	r1, r4, r0
 80051d4:	428b      	cmp	r3, r1
 80051d6:	bf01      	itttt	eq
 80051d8:	6819      	ldreq	r1, [r3, #0]
 80051da:	685b      	ldreq	r3, [r3, #4]
 80051dc:	1809      	addeq	r1, r1, r0
 80051de:	6021      	streq	r1, [r4, #0]
 80051e0:	e7ed      	b.n	80051be <_free_r+0x1e>
 80051e2:	461a      	mov	r2, r3
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	b10b      	cbz	r3, 80051ec <_free_r+0x4c>
 80051e8:	42a3      	cmp	r3, r4
 80051ea:	d9fa      	bls.n	80051e2 <_free_r+0x42>
 80051ec:	6811      	ldr	r1, [r2, #0]
 80051ee:	1850      	adds	r0, r2, r1
 80051f0:	42a0      	cmp	r0, r4
 80051f2:	d10b      	bne.n	800520c <_free_r+0x6c>
 80051f4:	6820      	ldr	r0, [r4, #0]
 80051f6:	4401      	add	r1, r0
 80051f8:	1850      	adds	r0, r2, r1
 80051fa:	4283      	cmp	r3, r0
 80051fc:	6011      	str	r1, [r2, #0]
 80051fe:	d1e0      	bne.n	80051c2 <_free_r+0x22>
 8005200:	6818      	ldr	r0, [r3, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	4401      	add	r1, r0
 8005206:	6011      	str	r1, [r2, #0]
 8005208:	6053      	str	r3, [r2, #4]
 800520a:	e7da      	b.n	80051c2 <_free_r+0x22>
 800520c:	d902      	bls.n	8005214 <_free_r+0x74>
 800520e:	230c      	movs	r3, #12
 8005210:	602b      	str	r3, [r5, #0]
 8005212:	e7d6      	b.n	80051c2 <_free_r+0x22>
 8005214:	6820      	ldr	r0, [r4, #0]
 8005216:	1821      	adds	r1, r4, r0
 8005218:	428b      	cmp	r3, r1
 800521a:	bf01      	itttt	eq
 800521c:	6819      	ldreq	r1, [r3, #0]
 800521e:	685b      	ldreq	r3, [r3, #4]
 8005220:	1809      	addeq	r1, r1, r0
 8005222:	6021      	streq	r1, [r4, #0]
 8005224:	6063      	str	r3, [r4, #4]
 8005226:	6054      	str	r4, [r2, #4]
 8005228:	e7cb      	b.n	80051c2 <_free_r+0x22>
 800522a:	bd38      	pop	{r3, r4, r5, pc}
 800522c:	20000628 	.word	0x20000628

08005230 <sbrk_aligned>:
 8005230:	b570      	push	{r4, r5, r6, lr}
 8005232:	4e0e      	ldr	r6, [pc, #56]	; (800526c <sbrk_aligned+0x3c>)
 8005234:	460c      	mov	r4, r1
 8005236:	6831      	ldr	r1, [r6, #0]
 8005238:	4605      	mov	r5, r0
 800523a:	b911      	cbnz	r1, 8005242 <sbrk_aligned+0x12>
 800523c:	f000 f8bc 	bl	80053b8 <_sbrk_r>
 8005240:	6030      	str	r0, [r6, #0]
 8005242:	4621      	mov	r1, r4
 8005244:	4628      	mov	r0, r5
 8005246:	f000 f8b7 	bl	80053b8 <_sbrk_r>
 800524a:	1c43      	adds	r3, r0, #1
 800524c:	d00a      	beq.n	8005264 <sbrk_aligned+0x34>
 800524e:	1cc4      	adds	r4, r0, #3
 8005250:	f024 0403 	bic.w	r4, r4, #3
 8005254:	42a0      	cmp	r0, r4
 8005256:	d007      	beq.n	8005268 <sbrk_aligned+0x38>
 8005258:	1a21      	subs	r1, r4, r0
 800525a:	4628      	mov	r0, r5
 800525c:	f000 f8ac 	bl	80053b8 <_sbrk_r>
 8005260:	3001      	adds	r0, #1
 8005262:	d101      	bne.n	8005268 <sbrk_aligned+0x38>
 8005264:	f04f 34ff 	mov.w	r4, #4294967295
 8005268:	4620      	mov	r0, r4
 800526a:	bd70      	pop	{r4, r5, r6, pc}
 800526c:	2000062c 	.word	0x2000062c

08005270 <_malloc_r>:
 8005270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005274:	1ccd      	adds	r5, r1, #3
 8005276:	f025 0503 	bic.w	r5, r5, #3
 800527a:	3508      	adds	r5, #8
 800527c:	2d0c      	cmp	r5, #12
 800527e:	bf38      	it	cc
 8005280:	250c      	movcc	r5, #12
 8005282:	2d00      	cmp	r5, #0
 8005284:	4607      	mov	r7, r0
 8005286:	db01      	blt.n	800528c <_malloc_r+0x1c>
 8005288:	42a9      	cmp	r1, r5
 800528a:	d905      	bls.n	8005298 <_malloc_r+0x28>
 800528c:	230c      	movs	r3, #12
 800528e:	2600      	movs	r6, #0
 8005290:	603b      	str	r3, [r7, #0]
 8005292:	4630      	mov	r0, r6
 8005294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005298:	4e2e      	ldr	r6, [pc, #184]	; (8005354 <_malloc_r+0xe4>)
 800529a:	f000 f89d 	bl	80053d8 <__malloc_lock>
 800529e:	6833      	ldr	r3, [r6, #0]
 80052a0:	461c      	mov	r4, r3
 80052a2:	bb34      	cbnz	r4, 80052f2 <_malloc_r+0x82>
 80052a4:	4629      	mov	r1, r5
 80052a6:	4638      	mov	r0, r7
 80052a8:	f7ff ffc2 	bl	8005230 <sbrk_aligned>
 80052ac:	1c43      	adds	r3, r0, #1
 80052ae:	4604      	mov	r4, r0
 80052b0:	d14d      	bne.n	800534e <_malloc_r+0xde>
 80052b2:	6834      	ldr	r4, [r6, #0]
 80052b4:	4626      	mov	r6, r4
 80052b6:	2e00      	cmp	r6, #0
 80052b8:	d140      	bne.n	800533c <_malloc_r+0xcc>
 80052ba:	6823      	ldr	r3, [r4, #0]
 80052bc:	4631      	mov	r1, r6
 80052be:	4638      	mov	r0, r7
 80052c0:	eb04 0803 	add.w	r8, r4, r3
 80052c4:	f000 f878 	bl	80053b8 <_sbrk_r>
 80052c8:	4580      	cmp	r8, r0
 80052ca:	d13a      	bne.n	8005342 <_malloc_r+0xd2>
 80052cc:	6821      	ldr	r1, [r4, #0]
 80052ce:	3503      	adds	r5, #3
 80052d0:	1a6d      	subs	r5, r5, r1
 80052d2:	f025 0503 	bic.w	r5, r5, #3
 80052d6:	3508      	adds	r5, #8
 80052d8:	2d0c      	cmp	r5, #12
 80052da:	bf38      	it	cc
 80052dc:	250c      	movcc	r5, #12
 80052de:	4638      	mov	r0, r7
 80052e0:	4629      	mov	r1, r5
 80052e2:	f7ff ffa5 	bl	8005230 <sbrk_aligned>
 80052e6:	3001      	adds	r0, #1
 80052e8:	d02b      	beq.n	8005342 <_malloc_r+0xd2>
 80052ea:	6823      	ldr	r3, [r4, #0]
 80052ec:	442b      	add	r3, r5
 80052ee:	6023      	str	r3, [r4, #0]
 80052f0:	e00e      	b.n	8005310 <_malloc_r+0xa0>
 80052f2:	6822      	ldr	r2, [r4, #0]
 80052f4:	1b52      	subs	r2, r2, r5
 80052f6:	d41e      	bmi.n	8005336 <_malloc_r+0xc6>
 80052f8:	2a0b      	cmp	r2, #11
 80052fa:	d916      	bls.n	800532a <_malloc_r+0xba>
 80052fc:	1961      	adds	r1, r4, r5
 80052fe:	42a3      	cmp	r3, r4
 8005300:	6025      	str	r5, [r4, #0]
 8005302:	bf18      	it	ne
 8005304:	6059      	strne	r1, [r3, #4]
 8005306:	6863      	ldr	r3, [r4, #4]
 8005308:	bf08      	it	eq
 800530a:	6031      	streq	r1, [r6, #0]
 800530c:	5162      	str	r2, [r4, r5]
 800530e:	604b      	str	r3, [r1, #4]
 8005310:	4638      	mov	r0, r7
 8005312:	f104 060b 	add.w	r6, r4, #11
 8005316:	f000 f865 	bl	80053e4 <__malloc_unlock>
 800531a:	f026 0607 	bic.w	r6, r6, #7
 800531e:	1d23      	adds	r3, r4, #4
 8005320:	1af2      	subs	r2, r6, r3
 8005322:	d0b6      	beq.n	8005292 <_malloc_r+0x22>
 8005324:	1b9b      	subs	r3, r3, r6
 8005326:	50a3      	str	r3, [r4, r2]
 8005328:	e7b3      	b.n	8005292 <_malloc_r+0x22>
 800532a:	6862      	ldr	r2, [r4, #4]
 800532c:	42a3      	cmp	r3, r4
 800532e:	bf0c      	ite	eq
 8005330:	6032      	streq	r2, [r6, #0]
 8005332:	605a      	strne	r2, [r3, #4]
 8005334:	e7ec      	b.n	8005310 <_malloc_r+0xa0>
 8005336:	4623      	mov	r3, r4
 8005338:	6864      	ldr	r4, [r4, #4]
 800533a:	e7b2      	b.n	80052a2 <_malloc_r+0x32>
 800533c:	4634      	mov	r4, r6
 800533e:	6876      	ldr	r6, [r6, #4]
 8005340:	e7b9      	b.n	80052b6 <_malloc_r+0x46>
 8005342:	230c      	movs	r3, #12
 8005344:	4638      	mov	r0, r7
 8005346:	603b      	str	r3, [r7, #0]
 8005348:	f000 f84c 	bl	80053e4 <__malloc_unlock>
 800534c:	e7a1      	b.n	8005292 <_malloc_r+0x22>
 800534e:	6025      	str	r5, [r4, #0]
 8005350:	e7de      	b.n	8005310 <_malloc_r+0xa0>
 8005352:	bf00      	nop
 8005354:	20000628 	.word	0x20000628

08005358 <_realloc_r>:
 8005358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800535c:	4680      	mov	r8, r0
 800535e:	4614      	mov	r4, r2
 8005360:	460e      	mov	r6, r1
 8005362:	b921      	cbnz	r1, 800536e <_realloc_r+0x16>
 8005364:	4611      	mov	r1, r2
 8005366:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800536a:	f7ff bf81 	b.w	8005270 <_malloc_r>
 800536e:	b92a      	cbnz	r2, 800537c <_realloc_r+0x24>
 8005370:	f7ff ff16 	bl	80051a0 <_free_r>
 8005374:	4625      	mov	r5, r4
 8005376:	4628      	mov	r0, r5
 8005378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800537c:	f000 f838 	bl	80053f0 <_malloc_usable_size_r>
 8005380:	4284      	cmp	r4, r0
 8005382:	4607      	mov	r7, r0
 8005384:	d802      	bhi.n	800538c <_realloc_r+0x34>
 8005386:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800538a:	d812      	bhi.n	80053b2 <_realloc_r+0x5a>
 800538c:	4621      	mov	r1, r4
 800538e:	4640      	mov	r0, r8
 8005390:	f7ff ff6e 	bl	8005270 <_malloc_r>
 8005394:	4605      	mov	r5, r0
 8005396:	2800      	cmp	r0, #0
 8005398:	d0ed      	beq.n	8005376 <_realloc_r+0x1e>
 800539a:	42bc      	cmp	r4, r7
 800539c:	4622      	mov	r2, r4
 800539e:	4631      	mov	r1, r6
 80053a0:	bf28      	it	cs
 80053a2:	463a      	movcs	r2, r7
 80053a4:	f7ff fbac 	bl	8004b00 <memcpy>
 80053a8:	4631      	mov	r1, r6
 80053aa:	4640      	mov	r0, r8
 80053ac:	f7ff fef8 	bl	80051a0 <_free_r>
 80053b0:	e7e1      	b.n	8005376 <_realloc_r+0x1e>
 80053b2:	4635      	mov	r5, r6
 80053b4:	e7df      	b.n	8005376 <_realloc_r+0x1e>
	...

080053b8 <_sbrk_r>:
 80053b8:	b538      	push	{r3, r4, r5, lr}
 80053ba:	2300      	movs	r3, #0
 80053bc:	4d05      	ldr	r5, [pc, #20]	; (80053d4 <_sbrk_r+0x1c>)
 80053be:	4604      	mov	r4, r0
 80053c0:	4608      	mov	r0, r1
 80053c2:	602b      	str	r3, [r5, #0]
 80053c4:	f7fc fecc 	bl	8002160 <_sbrk>
 80053c8:	1c43      	adds	r3, r0, #1
 80053ca:	d102      	bne.n	80053d2 <_sbrk_r+0x1a>
 80053cc:	682b      	ldr	r3, [r5, #0]
 80053ce:	b103      	cbz	r3, 80053d2 <_sbrk_r+0x1a>
 80053d0:	6023      	str	r3, [r4, #0]
 80053d2:	bd38      	pop	{r3, r4, r5, pc}
 80053d4:	20000630 	.word	0x20000630

080053d8 <__malloc_lock>:
 80053d8:	4801      	ldr	r0, [pc, #4]	; (80053e0 <__malloc_lock+0x8>)
 80053da:	f000 b811 	b.w	8005400 <__retarget_lock_acquire_recursive>
 80053de:	bf00      	nop
 80053e0:	20000634 	.word	0x20000634

080053e4 <__malloc_unlock>:
 80053e4:	4801      	ldr	r0, [pc, #4]	; (80053ec <__malloc_unlock+0x8>)
 80053e6:	f000 b80c 	b.w	8005402 <__retarget_lock_release_recursive>
 80053ea:	bf00      	nop
 80053ec:	20000634 	.word	0x20000634

080053f0 <_malloc_usable_size_r>:
 80053f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053f4:	1f18      	subs	r0, r3, #4
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	bfbc      	itt	lt
 80053fa:	580b      	ldrlt	r3, [r1, r0]
 80053fc:	18c0      	addlt	r0, r0, r3
 80053fe:	4770      	bx	lr

08005400 <__retarget_lock_acquire_recursive>:
 8005400:	4770      	bx	lr

08005402 <__retarget_lock_release_recursive>:
 8005402:	4770      	bx	lr

08005404 <_init>:
 8005404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005406:	bf00      	nop
 8005408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800540a:	bc08      	pop	{r3}
 800540c:	469e      	mov	lr, r3
 800540e:	4770      	bx	lr

08005410 <_fini>:
 8005410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005412:	bf00      	nop
 8005414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005416:	bc08      	pop	{r3}
 8005418:	469e      	mov	lr, r3
 800541a:	4770      	bx	lr
